
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007798  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08007968  08007968  00017968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea4  08007ea4  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  08007ea4  08007ea4  00017ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eac  08007eac  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eac  08007eac  00017eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08007eb4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000278  0800812c  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  0800812c  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f24b  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f23  00000000  00000000  0002f4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00031418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  00031e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002278e  00000000  00000000  00032868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfb3  00000000  00000000  00054ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccd39  00000000  00000000  00062fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fce2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cbc  00000000  00000000  0012fd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000278 	.word	0x20000278
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007950 	.word	0x08007950

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000027c 	.word	0x2000027c
 800020c:	08007950 	.word	0x08007950

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ffc2 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f001 f870 	bl	8002060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f828 	bl	8000fd4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock / 1000);
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <main+0x4c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <main+0x50>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	099b      	lsrs	r3, r3, #6
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ffcf 	bl	8000f34 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 f8e3 	bl	8001160 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f9a:	f000 f8b7 	bl	800110c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f9e:	f000 f887 	bl	80010b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (mpu6050_Init_Correction(&hi2c1, &MPU6050) == 1)
 8000fa2:	490a      	ldr	r1, [pc, #40]	; (8000fcc <main+0x54>)
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <main+0x58>)
 8000fa6:	f000 f975 	bl	8001294 <mpu6050_Init_Correction>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <main+0x3c>
  {
    Error_Handler();
 8000fb0:	f000 f96a 	bl	8001288 <Error_Handler>
	//mpu6050_AccelRead_Angle(&hi2c1, &MPU6050);

	// Gyroscope (Angular Velocity Meter)
	//mpu6050_GyroRead_AngVel(&hi2c1, &MPU6050);

	KalmanFilter_getAngle(&hi2c1, &MPU6050);
 8000fb4:	4905      	ldr	r1, [pc, #20]	; (8000fcc <main+0x54>)
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <main+0x58>)
 8000fb8:	f000 fb0a 	bl	80015d0 <KalmanFilter_getAngle>
	HAL_Delay (10);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f001 f8c1 	bl	8002144 <HAL_Delay>
	KalmanFilter_getAngle(&hi2c1, &MPU6050);
 8000fc2:	e7f7      	b.n	8000fb4 <main+0x3c>
 8000fc4:	20000098 	.word	0x20000098
 8000fc8:	10624dd3 	.word	0x10624dd3
 8000fcc:	20000320 	.word	0x20000320
 8000fd0:	200002c8 	.word	0x200002c8

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	2234      	movs	r2, #52	; 0x34
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fc2e 	bl	8004844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <SystemClock_Config+0xd4>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <SystemClock_Config+0xd4>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <SystemClock_Config+0xd4>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <SystemClock_Config+0xd8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001020:	4a22      	ldr	r2, [pc, #136]	; (80010ac <SystemClock_Config+0xd8>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <SystemClock_Config+0xd8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	2310      	movs	r3, #16
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001044:	2300      	movs	r3, #0
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001048:	2310      	movs	r3, #16
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800104c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001050:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001052:	2304      	movs	r3, #4
 8001054:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001056:	2302      	movs	r3, #2
 8001058:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fe10 	bl	8003c88 <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800106e:	f000 f90b 	bl	8001288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001076:	2302      	movs	r3, #2
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	2102      	movs	r1, #2
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fb2e 	bl	80036f0 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800109a:	f000 f8f5 	bl	8001288 <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	; 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000

080010b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_I2C1_Init+0x50>)
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_I2C1_Init+0x54>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_I2C1_Init+0x50>)
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <MX_I2C1_Init+0x58>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_I2C1_Init+0x50>)
 80010ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_I2C1_Init+0x50>)
 80010ee:	f001 fb3f 	bl	8002770 <HAL_I2C_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f8:	f000 f8c6 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200002c8 	.word	0x200002c8
 8001104:	40005400 	.word	0x40005400
 8001108:	00061a80 	.word	0x00061a80

0800110c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_USART2_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001144:	f003 f83e 	bl	80041c4 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f000 f89b 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000388 	.word	0x20000388
 800115c:	40004400 	.word	0x40004400

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <MX_GPIO_Init+0xe0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a30      	ldr	r2, [pc, #192]	; (8001240 <MX_GPIO_Init+0xe0>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <MX_GPIO_Init+0xe0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_GPIO_Init+0xe0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a29      	ldr	r2, [pc, #164]	; (8001240 <MX_GPIO_Init+0xe0>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_GPIO_Init+0xe0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <MX_GPIO_Init+0xe0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <MX_GPIO_Init+0xe0>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MX_GPIO_Init+0xe0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_GPIO_Init+0xe0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <MX_GPIO_Init+0xe0>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_GPIO_Init+0xe0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2120      	movs	r1, #32
 80011ea:	4816      	ldr	r0, [pc, #88]	; (8001244 <MX_GPIO_Init+0xe4>)
 80011ec:	f001 fa74 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <MX_GPIO_Init+0xe8>)
 8001208:	f001 f8d2 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800120c:	2320      	movs	r3, #32
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <MX_GPIO_Init+0xe4>)
 8001224:	f001 f8c4 	bl	80023b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2028      	movs	r0, #40	; 0x28
 800122e:	f001 f888 	bl	8002342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001232:	2028      	movs	r0, #40	; 0x28
 8001234:	f001 f8a1 	bl	800237a <HAL_NVIC_EnableIRQ>

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020800 	.word	0x40020800

0800124c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	80fb      	strh	r3, [r7, #6]
   */

  if(GPIO_Pin == B1_Pin){

  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800126c:	1d39      	adds	r1, r7, #4
 800126e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001272:	2201      	movs	r2, #1
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <__io_putchar+0x20>)
 8001276:	f002 fff2 	bl	800425e <HAL_UART_Transmit>
return ch;
 800127a:	687b      	ldr	r3, [r7, #4]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000388 	.word	0x20000388

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <mpu6050_Init_Correction>:
    .Q_gyro = 0.01f,
    .R_angle = 0.003f
};

uint8_t mpu6050_Init_Correction(I2C_HandleTypeDef *hi2c, MPU6050_HandleTypeDef *data_struct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af04      	add	r7, sp, #16
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
    uint8_t device_ID = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
    uint8_t data_buffer = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Mem_Read(hi2c, MPU6050_DEV_ADDR, WHO_AM_I, 1, &device_ID, 1, timeout);
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <mpu6050_Init_Correction+0x128>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	f107 030f 	add.w	r3, r7, #15
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	2275      	movs	r2, #117	; 0x75
 80012ba:	21d0      	movs	r1, #208	; 0xd0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f001 fc95 	bl	8002bec <HAL_I2C_Mem_Read>

    if (device_ID == 104)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b68      	cmp	r3, #104	; 0x68
 80012c6:	d173      	bne.n	80013b0 <mpu6050_Init_Correction+0x11c>
    {
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80012c8:	2120      	movs	r1, #32
 80012ca:	483d      	ldr	r0, [pc, #244]	; (80013c0 <mpu6050_Init_Correction+0x12c>)
 80012cc:	f001 fa1d 	bl	800270a <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 80012d0:	20c8      	movs	r0, #200	; 0xc8
 80012d2:	f000 ff37 	bl	8002144 <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80012d6:	2120      	movs	r1, #32
 80012d8:	4839      	ldr	r0, [pc, #228]	; (80013c0 <mpu6050_Init_Correction+0x12c>)
 80012da:	f001 fa16 	bl	800270a <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 80012de:	20c8      	movs	r0, #200	; 0xc8
 80012e0:	f000 ff30 	bl	8002144 <HAL_Delay>

    	data_buffer = 0x00;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_DEV_ADDR, PWR_MGMT_1, 1, &data_buffer, 1, timeout);  // PWR_MGMT_1 register
 80012e8:	4b34      	ldr	r3, [pc, #208]	; (80013bc <mpu6050_Init_Correction+0x128>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030e 	add.w	r3, r7, #14
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	226b      	movs	r2, #107	; 0x6b
 80012fc:	21d0      	movs	r1, #208	; 0xd0
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 fb7a 	bl	80029f8 <HAL_I2C_Mem_Write>

        data_buffer = 0x07;
 8001304:	2307      	movs	r3, #7
 8001306:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_DEV_ADDR, SMPLRT_DIV, 1, &data_buffer, 1, timeout);  // SMPLRT_DIV register
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <mpu6050_Init_Correction+0x128>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2301      	movs	r3, #1
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f107 030e 	add.w	r3, r7, #14
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	2219      	movs	r2, #25
 800131c:	21d0      	movs	r1, #208	; 0xd0
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f001 fb6a 	bl	80029f8 <HAL_I2C_Mem_Write>

        data_buffer = 0x00;
 8001324:	2300      	movs	r3, #0
 8001326:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_DEV_ADDR, ACCEL_CONFIG, 1, &data_buffer, 1, timeout);  // ACCEL_CONFIG register
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <mpu6050_Init_Correction+0x128>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 030e 	add.w	r3, r7, #14
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	221c      	movs	r2, #28
 800133c:	21d0      	movs	r1, #208	; 0xd0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f001 fb5a 	bl	80029f8 <HAL_I2C_Mem_Write>

        data_buffer = 0x00;
 8001344:	2300      	movs	r3, #0
 8001346:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_DEV_ADDR, GYRO_CONFIG, 1, &data_buffer, 1, timeout);  // GYRO_CONFIG register
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <mpu6050_Init_Correction+0x128>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	2301      	movs	r3, #1
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	f107 030e 	add.w	r3, r7, #14
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	221b      	movs	r2, #27
 800135c:	21d0      	movs	r1, #208	; 0xd0
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f001 fb4a 	bl	80029f8 <HAL_I2C_Mem_Write>

        mpu6050_GyroCorrection(hi2c, data_struct);
 8001364:	6839      	ldr	r1, [r7, #0]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f82e 	bl	80013c8 <mpu6050_GyroCorrection>

        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800136c:	2120      	movs	r1, #32
 800136e:	4814      	ldr	r0, [pc, #80]	; (80013c0 <mpu6050_Init_Correction+0x12c>)
 8001370:	f001 f9cb 	bl	800270a <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 8001374:	20c8      	movs	r0, #200	; 0xc8
 8001376:	f000 fee5 	bl	8002144 <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800137a:	2120      	movs	r1, #32
 800137c:	4810      	ldr	r0, [pc, #64]	; (80013c0 <mpu6050_Init_Correction+0x12c>)
 800137e:	f001 f9c4 	bl	800270a <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 8001382:	20c8      	movs	r0, #200	; 0xc8
 8001384:	f000 fede 	bl	8002144 <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001388:	2120      	movs	r1, #32
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <mpu6050_Init_Correction+0x12c>)
 800138c:	f001 f9bd 	bl	800270a <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 8001390:	20c8      	movs	r0, #200	; 0xc8
 8001392:	f000 fed7 	bl	8002144 <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001396:	2120      	movs	r1, #32
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <mpu6050_Init_Correction+0x12c>)
 800139a:	f001 f9b6 	bl	800270a <HAL_GPIO_TogglePin>
        HAL_Delay (200);
 800139e:	20c8      	movs	r0, #200	; 0xc8
 80013a0:	f000 fed0 	bl	8002144 <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013a4:	2120      	movs	r1, #32
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <mpu6050_Init_Correction+0x12c>)
 80013a8:	f001 f9af 	bl	800270a <HAL_GPIO_TogglePin>

        return 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e000      	b.n	80013b2 <mpu6050_Init_Correction+0x11e>
    }
    return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000000 	.word	0x20000000
 80013c0:	40020000 	.word	0x40020000
 80013c4:	00000000 	.word	0x00000000

080013c8 <mpu6050_GyroCorrection>:

void mpu6050_GyroCorrection(I2C_HandleTypeDef *hi2c, MPU6050_HandleTypeDef *data_struct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af04      	add	r7, sp, #16
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[6] = {0};
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	2300      	movs	r3, #0
 80013d8:	81bb      	strh	r3, [r7, #12]
    uint8_t count = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]

	while(count < 50)
 80013de:	e09c      	b.n	800151a <mpu6050_GyroCorrection+0x152>
	{
	    HAL_I2C_Mem_Read(hi2c, MPU6050_DEV_ADDR, GYRO_XOUT_H, 1, raw_data, 6, timeout);
 80013e0:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <mpu6050_GyroCorrection+0x1e0>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2306      	movs	r3, #6
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	2243      	movs	r2, #67	; 0x43
 80013f4:	21d0      	movs	r1, #208	; 0xd0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f001 fbf8 	bl	8002bec <HAL_I2C_Mem_Read>

	    data_struct->Gyro_X_RAW = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 80013fc:	7a3b      	ldrb	r3, [r7, #8]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	7a7b      	ldrb	r3, [r7, #9]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21a      	sxth	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	871a      	strh	r2, [r3, #56]	; 0x38
	    data_struct->Gyro_Y_RAW = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 800140e:	7abb      	ldrb	r3, [r7, #10]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	7afb      	ldrb	r3, [r7, #11]
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21a      	sxth	r2, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	875a      	strh	r2, [r3, #58]	; 0x3a
	    data_struct->Gyro_Z_RAW = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 8001420:	7b3b      	ldrb	r3, [r7, #12]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21a      	sxth	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	879a      	strh	r2, [r3, #60]	; 0x3c

	    data_struct->Gyro_X_AngVel = data_struct->Gyro_X_RAW / 131.0;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f893 	bl	8000564 <__aeabi_i2d>
 800143e:	a358      	add	r3, pc, #352	; (adr r3, 80015a0 <mpu6050_GyroCorrection+0x1d8>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff fa22 	bl	800088c <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	    data_struct->Gyro_Y_AngVel = data_struct->Gyro_Y_RAW / 131.0;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f883 	bl	8000564 <__aeabi_i2d>
 800145e:	a350      	add	r3, pc, #320	; (adr r3, 80015a0 <mpu6050_GyroCorrection+0x1d8>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff fa12 	bl	800088c <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	6839      	ldr	r1, [r7, #0]
 800146e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	    data_struct->Gyro_Z_AngVel = data_struct->Gyro_Z_RAW / 131.0;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f873 	bl	8000564 <__aeabi_i2d>
 800147e:	a348      	add	r3, pc, #288	; (adr r3, 80015a0 <mpu6050_GyroCorrection+0x1d8>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff fa02 	bl	800088c <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		Correction_Gyro_X_AngVel += data_struct->Gyro_X_AngVel;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001498:	4b44      	ldr	r3, [pc, #272]	; (80015ac <mpu6050_GyroCorrection+0x1e4>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7fe ff15 	bl	80002cc <__adddf3>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4941      	ldr	r1, [pc, #260]	; (80015ac <mpu6050_GyroCorrection+0x1e4>)
 80014a8:	e9c1 2300 	strd	r2, r3, [r1]
		Correction_Gyro_Y_AngVel += data_struct->Gyro_Y_AngVel;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <mpu6050_GyroCorrection+0x1e8>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7fe ff08 	bl	80002cc <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	493b      	ldr	r1, [pc, #236]	; (80015b0 <mpu6050_GyroCorrection+0x1e8>)
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
		Correction_Gyro_Z_AngVel += data_struct->Gyro_Z_AngVel;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <mpu6050_GyroCorrection+0x1ec>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7fe fefb 	bl	80002cc <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4936      	ldr	r1, [pc, #216]	; (80015b4 <mpu6050_GyroCorrection+0x1ec>)
 80014dc:	e9c1 2300 	strd	r2, r3, [r1]
		count ++;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	3301      	adds	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
		HAL_Delay (100);
 80014e6:	2064      	movs	r0, #100	; 0x64
 80014e8:	f000 fe2c 	bl	8002144 <HAL_Delay>
		printf("count = %d  ,  ", count);
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4831      	ldr	r0, [pc, #196]	; (80015b8 <mpu6050_GyroCorrection+0x1f0>)
 80014f2:	f003 fe19 	bl	8005128 <iprintf>
		printf("Correction_Gyro_X_AngVel = %f  ,  ", Correction_Gyro_X_AngVel);
 80014f6:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <mpu6050_GyroCorrection+0x1e4>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	482f      	ldr	r0, [pc, #188]	; (80015bc <mpu6050_GyroCorrection+0x1f4>)
 80014fe:	f003 fe13 	bl	8005128 <iprintf>
		printf("Correction_Gyro_Y_AngVel = %f  ,  ", Correction_Gyro_Y_AngVel);
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <mpu6050_GyroCorrection+0x1e8>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	482d      	ldr	r0, [pc, #180]	; (80015c0 <mpu6050_GyroCorrection+0x1f8>)
 800150a:	f003 fe0d 	bl	8005128 <iprintf>
		printf("Correction_Gyro_Z_AngVel = %f\r\n", Correction_Gyro_Z_AngVel);
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <mpu6050_GyroCorrection+0x1ec>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	482b      	ldr	r0, [pc, #172]	; (80015c4 <mpu6050_GyroCorrection+0x1fc>)
 8001516:	f003 fe07 	bl	8005128 <iprintf>
	while(count < 50)
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	2b31      	cmp	r3, #49	; 0x31
 800151e:	f67f af5f 	bls.w	80013e0 <mpu6050_GyroCorrection+0x18>
	}

	Correction_Gyro_X_AngVel /= 50.0;
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <mpu6050_GyroCorrection+0x1e4>)
 8001524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <mpu6050_GyroCorrection+0x200>)
 800152e:	f7ff f9ad 	bl	800088c <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	491d      	ldr	r1, [pc, #116]	; (80015ac <mpu6050_GyroCorrection+0x1e4>)
 8001538:	e9c1 2300 	strd	r2, r3, [r1]
	Correction_Gyro_Y_AngVel /= 50.0;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <mpu6050_GyroCorrection+0x1e8>)
 800153e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <mpu6050_GyroCorrection+0x200>)
 8001548:	f7ff f9a0 	bl	800088c <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4917      	ldr	r1, [pc, #92]	; (80015b0 <mpu6050_GyroCorrection+0x1e8>)
 8001552:	e9c1 2300 	strd	r2, r3, [r1]
	Correction_Gyro_Z_AngVel /= 50.0;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <mpu6050_GyroCorrection+0x1ec>)
 8001558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <mpu6050_GyroCorrection+0x200>)
 8001562:	f7ff f993 	bl	800088c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4912      	ldr	r1, [pc, #72]	; (80015b4 <mpu6050_GyroCorrection+0x1ec>)
 800156c:	e9c1 2300 	strd	r2, r3, [r1]
	printf("Correction_Gyro_X_AngVel = %f  ,  ", Correction_Gyro_X_AngVel);
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <mpu6050_GyroCorrection+0x1e4>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	4811      	ldr	r0, [pc, #68]	; (80015bc <mpu6050_GyroCorrection+0x1f4>)
 8001578:	f003 fdd6 	bl	8005128 <iprintf>
	printf("Correction_Gyro_Y_AngVel = %f  ,  ", Correction_Gyro_Y_AngVel);
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <mpu6050_GyroCorrection+0x1e8>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	480f      	ldr	r0, [pc, #60]	; (80015c0 <mpu6050_GyroCorrection+0x1f8>)
 8001584:	f003 fdd0 	bl	8005128 <iprintf>
	printf("Correction_Gyro_Z_AngVel = %f\r\n", Correction_Gyro_Z_AngVel);
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <mpu6050_GyroCorrection+0x1ec>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	480d      	ldr	r0, [pc, #52]	; (80015c4 <mpu6050_GyroCorrection+0x1fc>)
 8001590:	f003 fdca 	bl	8005128 <iprintf>
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	f3af 8000 	nop.w
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40606000 	.word	0x40606000
 80015a8:	20000000 	.word	0x20000000
 80015ac:	200002a0 	.word	0x200002a0
 80015b0:	200002a8 	.word	0x200002a8
 80015b4:	200002b0 	.word	0x200002b0
 80015b8:	08007968 	.word	0x08007968
 80015bc:	08007978 	.word	0x08007978
 80015c0:	0800799c 	.word	0x0800799c
 80015c4:	080079c0 	.word	0x080079c0
 80015c8:	40490000 	.word	0x40490000
 80015cc:	00000000 	.word	0x00000000

080015d0 <KalmanFilter_getAngle>:
	printf("Gyro_Y_AngVel = %f  ,  ", data_struct->Gyro_Y_AngVel);
	printf("Gyro_Z_AngVel = %f\r\n", data_struct->Gyro_Z_AngVel);
}

void KalmanFilter_getAngle(I2C_HandleTypeDef *hi2c, MPU6050_HandleTypeDef *data_struct)
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b08e      	sub	sp, #56	; 0x38
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[14] = {0};
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	811a      	strh	r2, [r3, #8]
    int16_t temperature_RAW = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	84fb      	strh	r3, [r7, #38]	; 0x26

    HAL_I2C_Mem_Read(hi2c, MPU6050_DEV_ADDR, ACCEL_XOUT_H, 1, raw_data, 14, timeout);
 80015ee:	4bb6      	ldr	r3, [pc, #728]	; (80018c8 <KalmanFilter_getAngle+0x2f8>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	230e      	movs	r3, #14
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	223b      	movs	r2, #59	; 0x3b
 8001602:	21d0      	movs	r1, #208	; 0xd0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f001 faf1 	bl	8002bec <HAL_I2C_Mem_Read>

    // Accelerometer ============================================================
    data_struct->Accel_X_RAW = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 800160a:	7a3b      	ldrb	r3, [r7, #8]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	7a7b      	ldrb	r3, [r7, #9]
 8001612:	b21b      	sxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b21a      	sxth	r2, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	801a      	strh	r2, [r3, #0]
    data_struct->Accel_Y_RAW = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 800161c:	7abb      	ldrb	r3, [r7, #10]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	7afb      	ldrb	r3, [r7, #11]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	805a      	strh	r2, [r3, #2]
    data_struct->Accel_Z_RAW = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 800162e:	7b3b      	ldrb	r3, [r7, #12]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	7b7b      	ldrb	r3, [r7, #13]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21a      	sxth	r2, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	809a      	strh	r2, [r3, #4]

    data_struct->Accel_X = data_struct->Accel_X_RAW / 16384.0;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff8c 	bl	8000564 <__aeabi_i2d>
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b9e      	ldr	r3, [pc, #632]	; (80018cc <KalmanFilter_getAngle+0x2fc>)
 8001652:	f7ff f91b 	bl	800088c <__aeabi_ddiv>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    data_struct->Accel_Y = data_struct->Accel_Y_RAW / 16384.0;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff7c 	bl	8000564 <__aeabi_i2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b96      	ldr	r3, [pc, #600]	; (80018cc <KalmanFilter_getAngle+0x2fc>)
 8001672:	f7ff f90b 	bl	800088c <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    data_struct->Accel_Z = data_struct->Accel_Z_RAW / 16384.0;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff6c 	bl	8000564 <__aeabi_i2d>
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b8e      	ldr	r3, [pc, #568]	; (80018cc <KalmanFilter_getAngle+0x2fc>)
 8001692:	f7ff f8fb 	bl	800088c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	e9c1 2306 	strd	r2, r3, [r1, #24]

	R = sqrt((data_struct->Accel_X)*(data_struct->Accel_X) + (data_struct->Accel_Y)*(data_struct->Accel_Y) + (data_struct->Accel_Z)*(data_struct->Accel_Z));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016ac:	f7fe ffc4 	bl	8000638 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4614      	mov	r4, r2
 80016b6:	461d      	mov	r5, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016c4:	f7fe ffb8 	bl	8000638 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fdfc 	bl	80002cc <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4614      	mov	r4, r2
 80016da:	461d      	mov	r5, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016e8:	f7fe ffa6 	bl	8000638 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe fdea 	bl	80002cc <__adddf3>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b17 	vmov	d7, r2, r3
 8001700:	eeb0 0a47 	vmov.f32	s0, s14
 8001704:	eef0 0a67 	vmov.f32	s1, s15
 8001708:	f005 fdc6 	bl	8007298 <sqrt>
 800170c:	eeb0 7a40 	vmov.f32	s14, s0
 8001710:	eef0 7a60 	vmov.f32	s15, s1
 8001714:	4b6e      	ldr	r3, [pc, #440]	; (80018d0 <KalmanFilter_getAngle+0x300>)
 8001716:	ed83 7b00 	vstr	d7, [r3]
	data_struct->Accel_X_Angle = (acos((data_struct->Accel_X)/R)*57.2957795131);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001720:	4b6b      	ldr	r3, [pc, #428]	; (80018d0 <KalmanFilter_getAngle+0x300>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7ff f8b1 	bl	800088c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	ec43 2b17 	vmov	d7, r2, r3
 8001732:	eeb0 0a47 	vmov.f32	s0, s14
 8001736:	eef0 0a67 	vmov.f32	s1, s15
 800173a:	f005 fd73 	bl	8007224 <acos>
 800173e:	ec51 0b10 	vmov	r0, r1, d0
 8001742:	a35d      	add	r3, pc, #372	; (adr r3, 80018b8 <KalmanFilter_getAngle+0x2e8>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe ff76 	bl	8000638 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	6839      	ldr	r1, [r7, #0]
 8001752:	e9c1 2308 	strd	r2, r3, [r1, #32]
	data_struct->Accel_Y_Angle = (acos((data_struct->Accel_Y)/R)*57.2957795131);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800175c:	4b5c      	ldr	r3, [pc, #368]	; (80018d0 <KalmanFilter_getAngle+0x300>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7ff f893 	bl	800088c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	ec43 2b17 	vmov	d7, r2, r3
 800176e:	eeb0 0a47 	vmov.f32	s0, s14
 8001772:	eef0 0a67 	vmov.f32	s1, s15
 8001776:	f005 fd55 	bl	8007224 <acos>
 800177a:	ec51 0b10 	vmov	r0, r1, d0
 800177e:	a34e      	add	r3, pc, #312	; (adr r3, 80018b8 <KalmanFilter_getAngle+0x2e8>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe ff58 	bl	8000638 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	6839      	ldr	r1, [r7, #0]
 800178e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	data_struct->Accel_Z_Angle = (acos((data_struct->Accel_Z)/R)*57.2957795131);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <KalmanFilter_getAngle+0x300>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7ff f875 	bl	800088c <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	ec43 2b17 	vmov	d7, r2, r3
 80017aa:	eeb0 0a47 	vmov.f32	s0, s14
 80017ae:	eef0 0a67 	vmov.f32	s1, s15
 80017b2:	f005 fd37 	bl	8007224 <acos>
 80017b6:	ec51 0b10 	vmov	r0, r1, d0
 80017ba:	a33f      	add	r3, pc, #252	; (adr r3, 80018b8 <KalmanFilter_getAngle+0x2e8>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe ff3a 	bl	8000638 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	6839      	ldr	r1, [r7, #0]
 80017ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	//printf("Accel_X_Angle = %f  ,  ", data_struct->Accel_X_Angle);
	//printf("Accel_Y_Angle = %f  ,  ", data_struct->Accel_Y_Angle);
	//printf("Accel_Z_Angle = %f  ,  ", data_struct->Accel_Z_Angle);

	// Temperature ============================================================
	temperature_RAW = (int16_t)(raw_data[6] << 8 | raw_data[7]);
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	84fb      	strh	r3, [r7, #38]	; 0x26

	// Gyroscope (Angular Velocity Meter) ============================================================
	data_struct->Gyro_X_RAW = (int16_t)(raw_data[8] << 8 | raw_data[9]);
 80017dc:	7c3b      	ldrb	r3, [r7, #16]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	7c7b      	ldrb	r3, [r7, #17]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	871a      	strh	r2, [r3, #56]	; 0x38
	data_struct->Gyro_Y_RAW = (int16_t)(raw_data[10] << 8 | raw_data[11]);
 80017ee:	7cbb      	ldrb	r3, [r7, #18]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7cfb      	ldrb	r3, [r7, #19]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	875a      	strh	r2, [r3, #58]	; 0x3a
	data_struct->Gyro_Z_RAW = (int16_t)(raw_data[12] << 8 | raw_data[13]);
 8001800:	7d3b      	ldrb	r3, [r7, #20]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	b21a      	sxth	r2, r3
 8001806:	7d7b      	ldrb	r3, [r7, #21]
 8001808:	b21b      	sxth	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	b21a      	sxth	r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	879a      	strh	r2, [r3, #60]	; 0x3c

	data_struct->Gyro_X_AngVel = (data_struct->Gyro_X_RAW / 131.0) - Correction_Gyro_X_AngVel;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fea3 	bl	8000564 <__aeabi_i2d>
 800181e:	a328      	add	r3, pc, #160	; (adr r3, 80018c0 <KalmanFilter_getAngle+0x2f0>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7ff f832 	bl	800088c <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <KalmanFilter_getAngle+0x304>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe fd47 	bl	80002c8 <__aeabi_dsub>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	data_struct->Gyro_Y_AngVel = (data_struct->Gyro_Y_RAW / 131.0) - Correction_Gyro_Y_AngVel;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe8a 	bl	8000564 <__aeabi_i2d>
 8001850:	a31b      	add	r3, pc, #108	; (adr r3, 80018c0 <KalmanFilter_getAngle+0x2f0>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7ff f819 	bl	800088c <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <KalmanFilter_getAngle+0x308>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fd2e 	bl	80002c8 <__aeabi_dsub>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	6839      	ldr	r1, [r7, #0]
 8001872:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	data_struct->Gyro_Z_AngVel = (data_struct->Gyro_Z_RAW / 131.0) - Correction_Gyro_Z_AngVel;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe71 	bl	8000564 <__aeabi_i2d>
 8001882:	a30f      	add	r3, pc, #60	; (adr r3, 80018c0 <KalmanFilter_getAngle+0x2f0>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7ff f800 	bl	800088c <__aeabi_ddiv>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <KalmanFilter_getAngle+0x30c>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fd15 	bl	80002c8 <__aeabi_dsub>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	//printf("Gyro_X_AngVel = %f  ,  ", data_struct->Gyro_X_AngVel);
	//printf("Gyro_Y_AngVel = %f  ,  ", data_struct->Gyro_Y_AngVel);
	//printf("Gyro_Z_AngVel = %f\r\n", data_struct->Gyro_Z_AngVel);

    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80018a8:	f000 fc40 	bl	800212c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <KalmanFilter_getAngle+0x310>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	e016      	b.n	80018e4 <KalmanFilter_getAngle+0x314>
 80018b6:	bf00      	nop
 80018b8:	1a63cbb0 	.word	0x1a63cbb0
 80018bc:	404ca5dc 	.word	0x404ca5dc
 80018c0:	00000000 	.word	0x00000000
 80018c4:	40606000 	.word	0x40606000
 80018c8:	20000000 	.word	0x20000000
 80018cc:	40d00000 	.word	0x40d00000
 80018d0:	20000298 	.word	0x20000298
 80018d4:	200002a0 	.word	0x200002a0
 80018d8:	200002a8 	.word	0x200002a8
 80018dc:	200002b0 	.word	0x200002b0
 80018e0:	20000294 	.word	0x20000294
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe2d 	bl	8000544 <__aeabi_ui2d>
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <KalmanFilter_getAngle+0x3d4>)
 80018f0:	f7fe ffcc 	bl	800088c <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 80018fc:	f000 fc16 	bl	800212c <HAL_GetTick>
 8001900:	4603      	mov	r3, r0
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <KalmanFilter_getAngle+0x3d8>)
 8001904:	6013      	str	r3, [r2, #0]
    data_struct->KalmanFilter_AngleX = 90 - KalmanFilter_Algorithm(&KalmanFilter_X, data_struct->Accel_X_Angle, data_struct->Gyro_Y_AngVel, dt);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	ed93 7b08 	vldr	d7, [r3, #32]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001912:	ed97 2b06 	vldr	d2, [r7, #24]
 8001916:	eeb0 1a46 	vmov.f32	s2, s12
 800191a:	eef0 1a66 	vmov.f32	s3, s13
 800191e:	eeb0 0a47 	vmov.f32	s0, s14
 8001922:	eef0 0a67 	vmov.f32	s1, s15
 8001926:	4821      	ldr	r0, [pc, #132]	; (80019ac <KalmanFilter_getAngle+0x3dc>)
 8001928:	f000 f84a 	bl	80019c0 <KalmanFilter_Algorithm>
 800192c:	ec53 2b10 	vmov	r2, r3, d0
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	491e      	ldr	r1, [pc, #120]	; (80019b0 <KalmanFilter_getAngle+0x3e0>)
 8001936:	f7fe fcc7 	bl	80002c8 <__aeabi_dsub>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    data_struct->KalmanFilter_AngleY = 90 - KalmanFilter_Algorithm(&KalmanFilter_Y, data_struct->Accel_Y_Angle, data_struct->Gyro_X_AngVel, dt);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001950:	ed97 2b06 	vldr	d2, [r7, #24]
 8001954:	eeb0 1a46 	vmov.f32	s2, s12
 8001958:	eef0 1a66 	vmov.f32	s3, s13
 800195c:	eeb0 0a47 	vmov.f32	s0, s14
 8001960:	eef0 0a67 	vmov.f32	s1, s15
 8001964:	4813      	ldr	r0, [pc, #76]	; (80019b4 <KalmanFilter_getAngle+0x3e4>)
 8001966:	f000 f82b 	bl	80019c0 <KalmanFilter_Algorithm>
 800196a:	ec53 2b10 	vmov	r2, r3, d0
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	490f      	ldr	r1, [pc, #60]	; (80019b0 <KalmanFilter_getAngle+0x3e0>)
 8001974:	f7fe fca8 	bl	80002c8 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

    printf("KalmanFilter_AngleX = %f , ", data_struct->KalmanFilter_AngleX);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <KalmanFilter_getAngle+0x3e8>)
 800198a:	f003 fbcd 	bl	8005128 <iprintf>
    printf("KalmanFilter_AngleY = %f\n", data_struct->KalmanFilter_AngleY);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <KalmanFilter_getAngle+0x3ec>)
 8001996:	f003 fbc7 	bl	8005128 <iprintf>
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bdb0      	pop	{r4, r5, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	408f4000 	.word	0x408f4000
 80019a8:	20000294 	.word	0x20000294
 80019ac:	20000008 	.word	0x20000008
 80019b0:	40568000 	.word	0x40568000
 80019b4:	20000050 	.word	0x20000050
 80019b8:	08007a70 	.word	0x08007a70
 80019bc:	08007a8c 	.word	0x08007a8c

080019c0 <KalmanFilter_Algorithm>:

double KalmanFilter_Algorithm(KalmanFilter_HandleTypeDef *KalmanFilter, double Angle, double AngVel, double dt)
{
 80019c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019c4:	b08c      	sub	sp, #48	; 0x30
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	61f8      	str	r0, [r7, #28]
 80019ca:	ed87 0b04 	vstr	d0, [r7, #16]
 80019ce:	ed87 1b02 	vstr	d1, [r7, #8]
 80019d2:	ed87 2b00 	vstr	d2, [r7]
    double Kalman_gain[2];

    // 1
    KalmanFilter->Angle += (AngVel - KalmanFilter->Q_bias) * dt;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019e6:	f7fe fc6f 	bl	80002c8 <__aeabi_dsub>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019f6:	f7fe fe1f 	bl	8000638 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc63 	bl	80002cc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	69f9      	ldr	r1, [r7, #28]
 8001a0c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // 2
    KalmanFilter->P[0][0] += (KalmanFilter->Q_angle - KalmanFilter->P[0][1] - KalmanFilter->P[1][0] - KalmanFilter->P[1][1] * dt) * dt;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a22:	f7fe fc51 	bl	80002c8 <__aeabi_dsub>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a34:	f7fe fc48 	bl	80002c8 <__aeabi_dsub>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	4699      	mov	r9, r3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a4a:	f7fe fdf5 	bl	8000638 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4640      	mov	r0, r8
 8001a54:	4649      	mov	r1, r9
 8001a56:	f7fe fc37 	bl	80002c8 <__aeabi_dsub>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a66:	f7fe fde7 	bl	8000638 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7fe fc2b 	bl	80002cc <__adddf3>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	69f9      	ldr	r1, [r7, #28]
 8001a7c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    KalmanFilter->P[0][1] += -(KalmanFilter->P[1][1] * dt);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a90:	f7fe fdd2 	bl	8000638 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fc14 	bl	80002c8 <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    KalmanFilter->P[1][0] += -(KalmanFilter->P[1][1] * dt);
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aba:	f7fe fdbd 	bl	8000638 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fbff 	bl	80002c8 <__aeabi_dsub>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	69f9      	ldr	r1, [r7, #28]
 8001ad0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    KalmanFilter->P[1][1] += KalmanFilter->Q_gyro * dt;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ae4:	f7fe fda8 	bl	8000638 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe fbec 	bl	80002cc <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	69f9      	ldr	r1, [r7, #28]
 8001afa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    // 3
    Kalman_gain[0] = KalmanFilter->P[0][0] / (KalmanFilter->R_angle + KalmanFilter->P[0][0]);
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b10:	f7fe fbdc 	bl	80002cc <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe feb6 	bl	800088c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Kalman_gain[1] = KalmanFilter->P[1][0] / (KalmanFilter->R_angle + KalmanFilter->P[0][0]);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b3a:	f7fe fbc7 	bl	80002cc <__adddf3>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4620      	mov	r0, r4
 8001b44:	4629      	mov	r1, r5
 8001b46:	f7fe fea1 	bl	800088c <__aeabi_ddiv>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // 4
    KalmanFilter->Angle += Kalman_gain[0] * (Angle - KalmanFilter->Angle);
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b66:	f7fe fbaf 	bl	80002c8 <__aeabi_dsub>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4640      	mov	r0, r8
 8001b70:	4649      	mov	r1, r9
 8001b72:	f7fe fd61 	bl	8000638 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	f7fe fba5 	bl	80002cc <__adddf3>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	69f9      	ldr	r1, [r7, #28]
 8001b88:	e9c1 2306 	strd	r2, r3, [r1, #24]
    KalmanFilter->Q_bias += Kalman_gain[1] * (Angle - KalmanFilter->Angle);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001b92:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba0:	f7fe fb92 	bl	80002c8 <__aeabi_dsub>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4640      	mov	r0, r8
 8001baa:	4649      	mov	r1, r9
 8001bac:	f7fe fd44 	bl	8000638 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb88 	bl	80002cc <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	69f9      	ldr	r1, [r7, #28]
 8001bc2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // 5
    KalmanFilter->P[0][0] -= Kalman_gain[0] * KalmanFilter->P[0][0];
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001bcc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001bd6:	f7fe fd2f 	bl	8000638 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f7fe fb71 	bl	80002c8 <__aeabi_dsub>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	69f9      	ldr	r1, [r7, #28]
 8001bec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    KalmanFilter->P[0][1] -= Kalman_gain[0] * KalmanFilter->P[0][1];
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001bf6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c00:	f7fe fd1a 	bl	8000638 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	f7fe fb5c 	bl	80002c8 <__aeabi_dsub>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	69f9      	ldr	r1, [r7, #28]
 8001c16:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    KalmanFilter->P[1][0] -= Kalman_gain[1] * KalmanFilter->P[0][0];
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001c20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c2a:	f7fe fd05 	bl	8000638 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f7fe fb47 	bl	80002c8 <__aeabi_dsub>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	69f9      	ldr	r1, [r7, #28]
 8001c40:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    KalmanFilter->P[1][1] -= Kalman_gain[1] * KalmanFilter->P[0][1];
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001c4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c54:	f7fe fcf0 	bl	8000638 <__aeabi_dmul>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f7fe fb32 	bl	80002c8 <__aeabi_dsub>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	69f9      	ldr	r1, [r7, #28]
 8001c6a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return KalmanFilter->Angle;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c74:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c78:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7c:	eef0 0a67 	vmov.f32	s1, s15
 8001c80:	3730      	adds	r7, #48	; 0x30
 8001c82:	46bd      	mov	sp, r7
 8001c84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cc6:	2007      	movs	r0, #7
 8001cc8:	f000 fb30 	bl	800232c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_I2C_MspInit+0x84>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d12b      	bne.n	8001d52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_I2C_MspInit+0x88>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_I2C_MspInit+0x88>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_I2C_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d16:	23c0      	movs	r3, #192	; 0xc0
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d26:	2304      	movs	r3, #4
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480c      	ldr	r0, [pc, #48]	; (8001d64 <HAL_I2C_MspInit+0x8c>)
 8001d32:	f000 fb3d 	bl	80023b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_I2C_MspInit+0x88>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <HAL_I2C_MspInit+0x88>)
 8001d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_I2C_MspInit+0x88>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40005400 	.word	0x40005400
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020400 	.word	0x40020400

08001d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_UART_MspInit+0x84>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12b      	bne.n	8001de2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_UART_MspInit+0x8c>)
 8001dde:	f000 fae7 	bl	80023b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	; 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40004400 	.word	0x40004400
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <NMI_Handler+0x4>

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <BusFault_Handler+0x4>

08001e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <UsageFault_Handler+0x4>

08001e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e44:	f000 f95e 	bl	8002104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e54:	f000 fc74 	bl	8002740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
	return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_kill>:

int _kill(int pid, int sig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e76:	f002 fcbb 	bl	80047f0 <__errno>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2216      	movs	r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_exit>:

void _exit (int status)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffe7 	bl	8001e6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e9e:	e7fe      	b.n	8001e9e <_exit+0x12>

08001ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e00a      	b.n	8001ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eb2:	f3af 8000 	nop.w
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	b2ca      	uxtb	r2, r1
 8001ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf0      	blt.n	8001eb2 <_read+0x12>
	}

return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e009      	b.n	8001f00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff f9b5 	bl	8001264 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3301      	adds	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbf1      	blt.n	8001eec <_write+0x12>
	}
	return len;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_close>:

int _close(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_isatty>:

int _isatty(int file)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
	return 1;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f002 fc20 	bl	80047f0 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20020000 	.word	0x20020000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	200002b8 	.word	0x200002b8
 8001fe4:	200003e0 	.word	0x200003e0

08001fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <SystemInit+0x20>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <SystemInit+0x20>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800200c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002044 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002012:	490e      	ldr	r1, [pc, #56]	; (800204c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002018:	e002      	b.n	8002020 <LoopCopyDataInit>

0800201a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800201c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201e:	3304      	adds	r3, #4

08002020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002024:	d3f9      	bcc.n	800201a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002028:	4c0b      	ldr	r4, [pc, #44]	; (8002058 <LoopFillZerobss+0x26>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800202c:	e001      	b.n	8002032 <LoopFillZerobss>

0800202e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002030:	3204      	adds	r2, #4

08002032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002034:	d3fb      	bcc.n	800202e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002036:	f7ff ffd7 	bl	8001fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203a:	f002 fbdf 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203e:	f7fe ff9b 	bl	8000f78 <main>
  bx  lr    
 8002042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002050:	08007eb4 	.word	0x08007eb4
  ldr r2, =_sbss
 8002054:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002058:	200003e0 	.word	0x200003e0

0800205c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC_IRQHandler>
	...

08002060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_Init+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <HAL_Init+0x40>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_Init+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <HAL_Init+0x40>)
 8002076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_Init+0x40>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <HAL_Init+0x40>)
 8002082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002088:	2003      	movs	r0, #3
 800208a:	f000 f94f 	bl	800232c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208e:	2000      	movs	r0, #0
 8002090:	f000 f808 	bl	80020a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002094:	f7ff fdf8 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023c00 	.word	0x40023c00

080020a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_InitTick+0x54>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_InitTick+0x58>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80020be:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f967 	bl	8002396 <HAL_SYSTICK_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00e      	b.n	80020f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b0f      	cmp	r3, #15
 80020d6:	d80a      	bhi.n	80020ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d8:	2200      	movs	r2, #0
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f000 f92f 	bl	8002342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <HAL_InitTick+0x5c>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000098 	.word	0x20000098
 80020fc:	200000a0 	.word	0x200000a0
 8002100:	2000009c 	.word	0x2000009c

08002104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_IncTick+0x20>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_IncTick+0x24>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4413      	add	r3, r2
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_IncTick+0x24>)
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200000a0 	.word	0x200000a0
 8002128:	200003cc 	.word	0x200003cc

0800212c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return uwTick;
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_GetTick+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	200003cc 	.word	0x200003cc

08002144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff ffee 	bl	800212c <HAL_GetTick>
 8002150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d005      	beq.n	800216a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_Delay+0x44>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800216a:	bf00      	nop
 800216c:	f7ff ffde 	bl	800212c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d8f7      	bhi.n	800216c <HAL_Delay+0x28>
  {
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200000a0 	.word	0x200000a0

0800218c <__NVIC_SetPriorityGrouping>:
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4907      	ldr	r1, [pc, #28]	; (8002228 <__NVIC_EnableIRQ+0x38>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPriority>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	; (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	; (800227c <__NVIC_SetPriority+0x50>)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	4313      	orrs	r3, r2
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <SysTick_Config>:
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f8:	d301      	bcc.n	80022fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00f      	b.n	800231e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <SysTick_Config+0x40>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002306:	210f      	movs	r1, #15
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f7ff ff8e 	bl	800222c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <SysTick_Config+0x40>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <SysTick_Config+0x40>)
 8002318:	2207      	movs	r2, #7
 800231a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	e000e010 	.word	0xe000e010

0800232c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff29 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002354:	f7ff ff3e 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 8002358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	f7ff ff8e 	bl	8002280 <NVIC_EncodePriority>
 8002364:	4602      	mov	r2, r0
 8002366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff5d 	bl	800222c <__NVIC_SetPriority>
}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff31 	bl	80021f0 <__NVIC_EnableIRQ>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffa2 	bl	80022e8 <SysTick_Config>
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e165      	b.n	8002698 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f040 8154 	bne.w	8002692 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d005      	beq.n	8002402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d130      	bne.n	8002464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0201 	and.w	r2, r3, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b03      	cmp	r3, #3
 800246e:	d017      	beq.n	80024a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d123      	bne.n	80024f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0203 	and.w	r2, r3, #3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80ae 	beq.w	8002692 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <HAL_GPIO_Init+0x300>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a5c      	ldr	r2, [pc, #368]	; (80026b0 <HAL_GPIO_Init+0x300>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <HAL_GPIO_Init+0x300>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002552:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_GPIO_Init+0x304>)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4f      	ldr	r2, [pc, #316]	; (80026b8 <HAL_GPIO_Init+0x308>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d025      	beq.n	80025ca <HAL_GPIO_Init+0x21a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <HAL_GPIO_Init+0x30c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d01f      	beq.n	80025c6 <HAL_GPIO_Init+0x216>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4d      	ldr	r2, [pc, #308]	; (80026c0 <HAL_GPIO_Init+0x310>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d019      	beq.n	80025c2 <HAL_GPIO_Init+0x212>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4c      	ldr	r2, [pc, #304]	; (80026c4 <HAL_GPIO_Init+0x314>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <HAL_GPIO_Init+0x20e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4b      	ldr	r2, [pc, #300]	; (80026c8 <HAL_GPIO_Init+0x318>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00d      	beq.n	80025ba <HAL_GPIO_Init+0x20a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4a      	ldr	r2, [pc, #296]	; (80026cc <HAL_GPIO_Init+0x31c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <HAL_GPIO_Init+0x206>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a49      	ldr	r2, [pc, #292]	; (80026d0 <HAL_GPIO_Init+0x320>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_GPIO_Init+0x202>
 80025ae:	2306      	movs	r3, #6
 80025b0:	e00c      	b.n	80025cc <HAL_GPIO_Init+0x21c>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e00a      	b.n	80025cc <HAL_GPIO_Init+0x21c>
 80025b6:	2305      	movs	r3, #5
 80025b8:	e008      	b.n	80025cc <HAL_GPIO_Init+0x21c>
 80025ba:	2304      	movs	r3, #4
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x21c>
 80025be:	2303      	movs	r3, #3
 80025c0:	e004      	b.n	80025cc <HAL_GPIO_Init+0x21c>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e002      	b.n	80025cc <HAL_GPIO_Init+0x21c>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_GPIO_Init+0x21c>
 80025ca:	2300      	movs	r3, #0
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	f002 0203 	and.w	r2, r2, #3
 80025d2:	0092      	lsls	r2, r2, #2
 80025d4:	4093      	lsls	r3, r2
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025dc:	4935      	ldr	r1, [pc, #212]	; (80026b4 <HAL_GPIO_Init+0x304>)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ea:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_GPIO_Init+0x324>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800260e:	4a31      	ldr	r2, [pc, #196]	; (80026d4 <HAL_GPIO_Init+0x324>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002614:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <HAL_GPIO_Init+0x324>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002638:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <HAL_GPIO_Init+0x324>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <HAL_GPIO_Init+0x324>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_GPIO_Init+0x324>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_GPIO_Init+0x324>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_GPIO_Init+0x324>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	f67f ae96 	bls.w	80023cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40013800 	.word	0x40013800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40020c00 	.word	0x40020c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40021400 	.word	0x40021400
 80026d0:	40021800 	.word	0x40021800
 80026d4:	40013c00 	.word	0x40013c00

080026d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]
 80026e4:	4613      	mov	r3, r2
 80026e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e8:	787b      	ldrb	r3, [r7, #1]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026f4:	e003      	b.n	80026fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	041a      	lsls	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	619a      	str	r2, [r3, #24]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800271c:	887a      	ldrh	r2, [r7, #2]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	041a      	lsls	r2, r3, #16
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43d9      	mvns	r1, r3
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	400b      	ands	r3, r1
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fd74 	bl	800124c <HAL_GPIO_EXTI_Callback>
  }
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12b      	b.n	80029da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff fa9e 	bl	8001cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d4:	f001 f87e 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a81      	ldr	r2, [pc, #516]	; (80029e4 <HAL_I2C_Init+0x274>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d807      	bhi.n	80027f4 <HAL_I2C_Init+0x84>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a80      	ldr	r2, [pc, #512]	; (80029e8 <HAL_I2C_Init+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf94      	ite	ls
 80027ec:	2301      	movls	r3, #1
 80027ee:	2300      	movhi	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e006      	b.n	8002802 <HAL_I2C_Init+0x92>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a7d      	ldr	r2, [pc, #500]	; (80029ec <HAL_I2C_Init+0x27c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0e7      	b.n	80029da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a78      	ldr	r2, [pc, #480]	; (80029f0 <HAL_I2C_Init+0x280>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_I2C_Init+0x274>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d802      	bhi.n	8002844 <HAL_I2C_Init+0xd4>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	e009      	b.n	8002858 <HAL_I2C_Init+0xe8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	4a69      	ldr	r2, [pc, #420]	; (80029f4 <HAL_I2C_Init+0x284>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800286a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	495c      	ldr	r1, [pc, #368]	; (80029e4 <HAL_I2C_Init+0x274>)
 8002874:	428b      	cmp	r3, r1
 8002876:	d819      	bhi.n	80028ac <HAL_I2C_Init+0x13c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e59      	subs	r1, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fbb1 f3f3 	udiv	r3, r1, r3
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800288c:	400b      	ands	r3, r1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_I2C_Init+0x138>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	e051      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e04f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_I2C_Init+0x168>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e012      	b.n	80028fe <HAL_I2C_Init+0x18e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x196>
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_I2C_Init+0x1dc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_I2C_Init+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e58      	subs	r0, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292a:	e00f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6809      	ldr	r1, [r1, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800297a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6911      	ldr	r1, [r2, #16]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	000186a0 	.word	0x000186a0
 80029e8:	001e847f 	.word	0x001e847f
 80029ec:	003d08ff 	.word	0x003d08ff
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	813b      	strh	r3, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a12:	f7ff fb8b 	bl	800212c <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	f040 80d9 	bne.w	8002bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2319      	movs	r3, #25
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	496d      	ldr	r1, [pc, #436]	; (8002be4 <HAL_I2C_Mem_Write+0x1ec>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fc7f 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0cc      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Mem_Write+0x56>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e0c5      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d007      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2221      	movs	r2, #33	; 0x21
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2240      	movs	r2, #64	; 0x40
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a4d      	ldr	r2, [pc, #308]	; (8002be8 <HAL_I2C_Mem_Write+0x1f0>)
 8002ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ab6:	88f8      	ldrh	r0, [r7, #6]
 8002ab8:	893a      	ldrh	r2, [r7, #8]
 8002aba:	8979      	ldrh	r1, [r7, #10]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fab6 	bl	8003038 <I2C_RequestMemoryWrite>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d052      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e081      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fd00 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e06b      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d11b      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x180>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d017      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1aa      	bne.n	8002ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fcec 	bl	8003562 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e016      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	00100002 	.word	0x00100002
 8002be8:	ffff0000 	.word	0xffff0000

08002bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	; 0x30
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c06:	f7ff fa91 	bl	800212c <HAL_GetTick>
 8002c0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	f040 8208 	bne.w	800302a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2319      	movs	r3, #25
 8002c20:	2201      	movs	r2, #1
 8002c22:	497b      	ldr	r1, [pc, #492]	; (8002e10 <HAL_I2C_Mem_Read+0x224>)
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fb85 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	e1fb      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Mem_Read+0x56>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e1f4      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d007      	beq.n	8002c68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2222      	movs	r2, #34	; 0x22
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2240      	movs	r2, #64	; 0x40
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a5b      	ldr	r2, [pc, #364]	; (8002e14 <HAL_I2C_Mem_Read+0x228>)
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002caa:	88f8      	ldrh	r0, [r7, #6]
 8002cac:	893a      	ldrh	r2, [r7, #8]
 8002cae:	8979      	ldrh	r1, [r7, #10]
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fa52 	bl	8003164 <I2C_RequestMemoryRead>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1b0      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d113      	bne.n	8002cfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e184      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d11b      	bne.n	8002d3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e164      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d11b      	bne.n	8002d7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	e144      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d90:	e138      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	f200 80f1 	bhi.w	8002f7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d123      	bne.n	8002dec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fc1b 	bl	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e139      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dea:	e10b      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d14e      	bne.n	8002e92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4906      	ldr	r1, [pc, #24]	; (8002e18 <HAL_I2C_Mem_Read+0x22c>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fa98 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e10e      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
 8002e0e:	bf00      	nop
 8002e10:	00100002 	.word	0x00100002
 8002e14:	ffff0000 	.word	0xffff0000
 8002e18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e90:	e0b8      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4966      	ldr	r1, [pc, #408]	; (8003034 <HAL_I2C_Mem_Read+0x448>)
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fa49 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0bf      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	494f      	ldr	r1, [pc, #316]	; (8003034 <HAL_I2C_Mem_Read+0x448>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fa1b 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e091      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f7c:	e042      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fb2e 	bl	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e04c      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d118      	bne.n	8003004 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f aec2 	bne.w	8002d92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00010004 	.word	0x00010004

08003038 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	4608      	mov	r0, r1
 8003042:	4611      	mov	r1, r2
 8003044:	461a      	mov	r2, r3
 8003046:	4603      	mov	r3, r0
 8003048:	817b      	strh	r3, [r7, #10]
 800304a:	460b      	mov	r3, r1
 800304c:	813b      	strh	r3, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2200      	movs	r2, #0
 800306a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f960 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003088:	d103      	bne.n	8003092 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e05f      	b.n	8003156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	492d      	ldr	r1, [pc, #180]	; (8003160 <I2C_RequestMemoryWrite+0x128>)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f998 	bl	80033e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e04c      	b.n	8003156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	6a39      	ldr	r1, [r7, #32]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fa02 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d107      	bne.n	80030fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e02b      	b.n	8003156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	611a      	str	r2, [r3, #16]
 800310e:	e021      	b.n	8003154 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003110:	893b      	ldrh	r3, [r7, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	b29b      	uxth	r3, r3
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003120:	6a39      	ldr	r1, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f9dc 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b04      	cmp	r3, #4
 8003134:	d107      	bne.n	8003146 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003144:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e005      	b.n	8003156 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	00010002 	.word	0x00010002

08003164 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	4608      	mov	r0, r1
 800316e:	4611      	mov	r1, r2
 8003170:	461a      	mov	r2, r3
 8003172:	4603      	mov	r3, r0
 8003174:	817b      	strh	r3, [r7, #10]
 8003176:	460b      	mov	r3, r1
 8003178:	813b      	strh	r3, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800318c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f8c2 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	d103      	bne.n	80031ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0aa      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	4952      	ldr	r1, [pc, #328]	; (8003330 <I2C_RequestMemoryRead+0x1cc>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f8fa 	bl	80033e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e097      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	6a39      	ldr	r1, [r7, #32]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f964 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b04      	cmp	r3, #4
 8003224:	d107      	bne.n	8003236 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e076      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]
 800324a:	e021      	b.n	8003290 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800324c:	893b      	ldrh	r3, [r7, #8]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	b29b      	uxth	r3, r3
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	6a39      	ldr	r1, [r7, #32]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f93e 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b04      	cmp	r3, #4
 8003270:	d107      	bne.n	8003282 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e050      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	6a39      	ldr	r1, [r7, #32]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f923 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00d      	beq.n	80032bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d107      	bne.n	80032b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e035      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f82b 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00d      	beq.n	8003300 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f2:	d103      	bne.n	80032fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e013      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003300:	897b      	ldrh	r3, [r7, #10]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	6a3a      	ldr	r2, [r7, #32]
 8003314:	4906      	ldr	r1, [pc, #24]	; (8003330 <I2C_RequestMemoryRead+0x1cc>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f863 	bl	80033e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	00010002 	.word	0x00010002

08003334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003344:	e025      	b.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d021      	beq.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe feed 	bl	800212c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnFlagUntilTimeout+0x30>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d116      	bne.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e023      	b.n	80033da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10d      	bne.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	e00c      	b.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	43da      	mvns	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4013      	ands	r3, r2
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d0b6      	beq.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033f0:	e051      	b.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003400:	d123      	bne.n	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003410:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800341a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f043 0204 	orr.w	r2, r3, #4
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e046      	b.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d021      	beq.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7fe fe6b 	bl	800212c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d116      	bne.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f043 0220 	orr.w	r2, r3, #32
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e020      	b.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d10c      	bne.n	80034ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4013      	ands	r3, r2
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf14      	ite	ne
 80034b2:	2301      	movne	r3, #1
 80034b4:	2300      	moveq	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	e00b      	b.n	80034d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	43da      	mvns	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4013      	ands	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d18d      	bne.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ec:	e02d      	b.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f8ce 	bl	8003690 <I2C_IsAcknowledgeFailed>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e02d      	b.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d021      	beq.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fe fe11 	bl	800212c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d116      	bne.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e007      	b.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	2b80      	cmp	r3, #128	; 0x80
 8003556:	d1ca      	bne.n	80034ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800356e:	e02d      	b.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f88d 	bl	8003690 <I2C_IsAcknowledgeFailed>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e02d      	b.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d021      	beq.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003588:	f7fe fdd0 	bl	800212c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	429a      	cmp	r2, r3
 8003596:	d302      	bcc.n	800359e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d116      	bne.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e007      	b.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d1ca      	bne.n	8003570 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035f0:	e042      	b.n	8003678 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d119      	bne.n	8003634 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0210 	mvn.w	r2, #16
 8003608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e029      	b.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003634:	f7fe fd7a 	bl	800212c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	d302      	bcc.n	800364a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e007      	b.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	d1b5      	bne.n	80035f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d11b      	bne.n	80036e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0204 	orr.w	r2, r3, #4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0cc      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003704:	4b68      	ldr	r3, [pc, #416]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d90c      	bls.n	800372c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b63      	ldr	r3, [pc, #396]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0b8      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d020      	beq.n	800377a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003744:	4b59      	ldr	r3, [pc, #356]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800374e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800375c:	4b53      	ldr	r3, [pc, #332]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4a52      	ldr	r2, [pc, #328]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b50      	ldr	r3, [pc, #320]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	494d      	ldr	r1, [pc, #308]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d044      	beq.n	8003810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	4b47      	ldr	r3, [pc, #284]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d119      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e07f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ae:	4b3f      	ldr	r3, [pc, #252]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037be:	4b3b      	ldr	r3, [pc, #236]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e067      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b37      	ldr	r3, [pc, #220]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4934      	ldr	r1, [pc, #208]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e0:	f7fe fca4 	bl	800212c <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fe fca0 	bl	800212c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e04f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d20c      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e032      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4916      	ldr	r1, [pc, #88]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	490e      	ldr	r1, [pc, #56]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003876:	f000 f855 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 800387a:	4602      	mov	r2, r0
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	490a      	ldr	r1, [pc, #40]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	5ccb      	ldrb	r3, [r1, r3]
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fc04 	bl	80020a4 <HAL_InitTick>

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40023c00 	.word	0x40023c00
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08007aa8 	.word	0x08007aa8
 80038b4:	20000098 	.word	0x20000098
 80038b8:	2000009c 	.word	0x2000009c

080038bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000098 	.word	0x20000098

080038d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d8:	f7ff fff0 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0a9b      	lsrs	r3, r3, #10
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	08007ab8 	.word	0x08007ab8

080038fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003900:	f7ff ffdc 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0b5b      	lsrs	r3, r3, #13
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	08007ab8 	.word	0x08007ab8

08003924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003928:	b088      	sub	sp, #32
 800392a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003940:	4bce      	ldr	r3, [pc, #824]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b0c      	cmp	r3, #12
 800394a:	f200 818d 	bhi.w	8003c68 <HAL_RCC_GetSysClockFreq+0x344>
 800394e:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <HAL_RCC_GetSysClockFreq+0x30>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	08003989 	.word	0x08003989
 8003958:	08003c69 	.word	0x08003c69
 800395c:	08003c69 	.word	0x08003c69
 8003960:	08003c69 	.word	0x08003c69
 8003964:	0800398f 	.word	0x0800398f
 8003968:	08003c69 	.word	0x08003c69
 800396c:	08003c69 	.word	0x08003c69
 8003970:	08003c69 	.word	0x08003c69
 8003974:	08003995 	.word	0x08003995
 8003978:	08003c69 	.word	0x08003c69
 800397c:	08003c69 	.word	0x08003c69
 8003980:	08003c69 	.word	0x08003c69
 8003984:	08003b09 	.word	0x08003b09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4bbd      	ldr	r3, [pc, #756]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x35c>)
 800398a:	61bb      	str	r3, [r7, #24]
       break;
 800398c:	e16f      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800398e:	4bbd      	ldr	r3, [pc, #756]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x360>)
 8003990:	61bb      	str	r3, [r7, #24]
      break;
 8003992:	e16c      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003994:	4bb9      	ldr	r3, [pc, #740]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800399c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800399e:	4bb7      	ldr	r3, [pc, #732]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d053      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039aa:	4bb4      	ldr	r3, [pc, #720]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	461a      	mov	r2, r3
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	ea02 0400 	and.w	r4, r2, r0
 80039c2:	603c      	str	r4, [r7, #0]
 80039c4:	400b      	ands	r3, r1
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039cc:	4620      	mov	r0, r4
 80039ce:	4629      	mov	r1, r5
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	014b      	lsls	r3, r1, #5
 80039da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039de:	0142      	lsls	r2, r0, #5
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	4623      	mov	r3, r4
 80039e6:	1ac0      	subs	r0, r0, r3
 80039e8:	462b      	mov	r3, r5
 80039ea:	eb61 0103 	sbc.w	r1, r1, r3
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	018b      	lsls	r3, r1, #6
 80039f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039fc:	0182      	lsls	r2, r0, #6
 80039fe:	1a12      	subs	r2, r2, r0
 8003a00:	eb63 0301 	sbc.w	r3, r3, r1
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	00d9      	lsls	r1, r3, #3
 8003a0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a12:	00d0      	lsls	r0, r2, #3
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4621      	mov	r1, r4
 8003a1a:	1852      	adds	r2, r2, r1
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	eb43 0101 	adc.w	r1, r3, r1
 8003a22:	460b      	mov	r3, r1
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f04f 0100 	mov.w	r1, #0
 8003a2c:	0259      	lsls	r1, r3, #9
 8003a2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a32:	0250      	lsls	r0, r2, #9
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	f7fd f8d0 	bl	8000be8 <__aeabi_uldivmod>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	e04c      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a52:	4b8a      	ldr	r3, [pc, #552]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	099b      	lsrs	r3, r3, #6
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	ea02 0a00 	and.w	sl, r2, r0
 8003a6a:	ea03 0b01 	and.w	fp, r3, r1
 8003a6e:	4650      	mov	r0, sl
 8003a70:	4659      	mov	r1, fp
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	014b      	lsls	r3, r1, #5
 8003a7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a80:	0142      	lsls	r2, r0, #5
 8003a82:	4610      	mov	r0, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	ebb0 000a 	subs.w	r0, r0, sl
 8003a8a:	eb61 010b 	sbc.w	r1, r1, fp
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	018b      	lsls	r3, r1, #6
 8003a98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a9c:	0182      	lsls	r2, r0, #6
 8003a9e:	1a12      	subs	r2, r2, r0
 8003aa0:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	00d9      	lsls	r1, r3, #3
 8003aae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab2:	00d0      	lsls	r0, r2, #3
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	eb12 020a 	adds.w	r2, r2, sl
 8003abc:	eb43 030b 	adc.w	r3, r3, fp
 8003ac0:	f04f 0000 	mov.w	r0, #0
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	0299      	lsls	r1, r3, #10
 8003aca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ace:	0290      	lsls	r0, r2, #10
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	f7fd f882 	bl	8000be8 <__aeabi_uldivmod>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4613      	mov	r3, r2
 8003aea:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aec:	4b63      	ldr	r3, [pc, #396]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	3301      	adds	r3, #1
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	61bb      	str	r3, [r7, #24]
      break;
 8003b06:	e0b2      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b08:	4b5c      	ldr	r3, [pc, #368]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b10:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b12:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d04d      	beq.n	8003bba <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1e:	4b57      	ldr	r3, [pc, #348]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	461a      	mov	r2, r3
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	ea02 0800 	and.w	r8, r2, r0
 8003b36:	ea03 0901 	and.w	r9, r3, r1
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	014b      	lsls	r3, r1, #5
 8003b48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b4c:	0142      	lsls	r2, r0, #5
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	ebb0 0008 	subs.w	r0, r0, r8
 8003b56:	eb61 0109 	sbc.w	r1, r1, r9
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	018b      	lsls	r3, r1, #6
 8003b64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b68:	0182      	lsls	r2, r0, #6
 8003b6a:	1a12      	subs	r2, r2, r0
 8003b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	00d9      	lsls	r1, r3, #3
 8003b7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b7e:	00d0      	lsls	r0, r2, #3
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	eb12 0208 	adds.w	r2, r2, r8
 8003b88:	eb43 0309 	adc.w	r3, r3, r9
 8003b8c:	f04f 0000 	mov.w	r0, #0
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	0259      	lsls	r1, r3, #9
 8003b96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b9a:	0250      	lsls	r0, r2, #9
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	f7fd f81c 	bl	8000be8 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	e04a      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bba:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bca:	f04f 0100 	mov.w	r1, #0
 8003bce:	ea02 0400 	and.w	r4, r2, r0
 8003bd2:	ea03 0501 	and.w	r5, r3, r1
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	4629      	mov	r1, r5
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	014b      	lsls	r3, r1, #5
 8003be4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003be8:	0142      	lsls	r2, r0, #5
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	1b00      	subs	r0, r0, r4
 8003bf0:	eb61 0105 	sbc.w	r1, r1, r5
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	018b      	lsls	r3, r1, #6
 8003bfe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c02:	0182      	lsls	r2, r0, #6
 8003c04:	1a12      	subs	r2, r2, r0
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	f04f 0000 	mov.w	r0, #0
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	00d9      	lsls	r1, r3, #3
 8003c14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c18:	00d0      	lsls	r0, r2, #3
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	1912      	adds	r2, r2, r4
 8003c20:	eb45 0303 	adc.w	r3, r5, r3
 8003c24:	f04f 0000 	mov.w	r0, #0
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	0299      	lsls	r1, r3, #10
 8003c2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c32:	0290      	lsls	r0, r2, #10
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	f7fc ffd0 	bl	8000be8 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c50:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0f1b      	lsrs	r3, r3, #28
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	61bb      	str	r3, [r7, #24]
      break;
 8003c66:	e002      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c6a:	61bb      	str	r3, [r7, #24]
      break;
 8003c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	00f42400 	.word	0x00f42400
 8003c84:	007a1200 	.word	0x007a1200

08003c88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e28d      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8083 	beq.w	8003dae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ca8:	4b94      	ldr	r3, [pc, #592]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d019      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cb4:	4b91      	ldr	r3, [pc, #580]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cc0:	4b8e      	ldr	r3, [pc, #568]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cce:	4b8b      	ldr	r3, [pc, #556]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	d112      	bne.n	8003d00 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cda:	4b88      	ldr	r3, [pc, #544]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	4b84      	ldr	r3, [pc, #528]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d05b      	beq.n	8003dac <HAL_RCC_OscConfig+0x124>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d157      	bne.n	8003dac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e25a      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x90>
 8003d0a:	4b7c      	ldr	r3, [pc, #496]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7b      	ldr	r2, [pc, #492]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e01d      	b.n	8003d54 <HAL_RCC_OscConfig+0xcc>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0xb4>
 8003d22:	4b76      	ldr	r3, [pc, #472]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a75      	ldr	r2, [pc, #468]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b73      	ldr	r3, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a72      	ldr	r2, [pc, #456]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0xcc>
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6e      	ldr	r2, [pc, #440]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b6c      	ldr	r3, [pc, #432]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6b      	ldr	r2, [pc, #428]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe f9e6 	bl	800212c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fe f9e2 	bl	800212c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e21f      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b61      	ldr	r3, [pc, #388]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0xdc>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe f9d2 	bl	800212c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fe f9ce 	bl	800212c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e20b      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	4b57      	ldr	r3, [pc, #348]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x104>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d06f      	beq.n	8003e9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dba:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d017      	beq.n	8003df6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dc6:	4b4d      	ldr	r3, [pc, #308]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d105      	bne.n	8003dde <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dd2:	4b4a      	ldr	r3, [pc, #296]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dde:	4b47      	ldr	r3, [pc, #284]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d11c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dea:	4b44      	ldr	r3, [pc, #272]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d116      	bne.n	8003e24 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_RCC_OscConfig+0x186>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e1d3      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4937      	ldr	r1, [pc, #220]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	e03a      	b.n	8003e9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e2c:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <HAL_RCC_OscConfig+0x278>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fe f97b 	bl	800212c <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3a:	f7fe f977 	bl	800212c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e1b4      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e58:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4925      	ldr	r1, [pc, #148]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]
 8003e6c:	e015      	b.n	8003e9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6e:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_RCC_OscConfig+0x278>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fe f95a 	bl	800212c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e7c:	f7fe f956 	bl	800212c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e193      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d036      	beq.n	8003f14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eae:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <HAL_RCC_OscConfig+0x27c>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fe f93a 	bl	800212c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ebc:	f7fe f936 	bl	800212c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e173      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x234>
 8003eda:	e01b      	b.n	8003f14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <HAL_RCC_OscConfig+0x27c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fe f923 	bl	800212c <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	e00e      	b.n	8003f08 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eea:	f7fe f91f 	bl	800212c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d907      	bls.n	8003f08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e15c      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	42470000 	.word	0x42470000
 8003f04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	4b8a      	ldr	r3, [pc, #552]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1ea      	bne.n	8003eea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8097 	beq.w	8004050 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f26:	4b83      	ldr	r3, [pc, #524]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	4b7f      	ldr	r3, [pc, #508]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	4a7e      	ldr	r2, [pc, #504]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	; 0x40
 8003f42:	4b7c      	ldr	r3, [pc, #496]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f52:	4b79      	ldr	r3, [pc, #484]	; (8004138 <HAL_RCC_OscConfig+0x4b0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d118      	bne.n	8003f90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5e:	4b76      	ldr	r3, [pc, #472]	; (8004138 <HAL_RCC_OscConfig+0x4b0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a75      	ldr	r2, [pc, #468]	; (8004138 <HAL_RCC_OscConfig+0x4b0>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe f8df 	bl	800212c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f72:	f7fe f8db 	bl	800212c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e118      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	4b6c      	ldr	r3, [pc, #432]	; (8004138 <HAL_RCC_OscConfig+0x4b0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x31e>
 8003f98:	4b66      	ldr	r3, [pc, #408]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4a65      	ldr	r2, [pc, #404]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa4:	e01c      	b.n	8003fe0 <HAL_RCC_OscConfig+0x358>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b05      	cmp	r3, #5
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x340>
 8003fae:	4b61      	ldr	r3, [pc, #388]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a60      	ldr	r2, [pc, #384]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	f043 0304 	orr.w	r3, r3, #4
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fba:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a5d      	ldr	r2, [pc, #372]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x358>
 8003fc8:	4b5a      	ldr	r3, [pc, #360]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	4a59      	ldr	r2, [pc, #356]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd4:	4b57      	ldr	r3, [pc, #348]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a56      	ldr	r2, [pc, #344]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fda:	f023 0304 	bic.w	r3, r3, #4
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fe f8a0 	bl	800212c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fe f89c 	bl	800212c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0d7      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004006:	4b4b      	ldr	r3, [pc, #300]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0ee      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x368>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fe f88a 	bl	800212c <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401a:	e00a      	b.n	8004032 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401c:	f7fe f886 	bl	800212c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0c1      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004032:	4b40      	ldr	r3, [pc, #256]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ee      	bne.n	800401c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004044:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800404e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80ad 	beq.w	80041b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800405a:	4b36      	ldr	r3, [pc, #216]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b08      	cmp	r3, #8
 8004064:	d060      	beq.n	8004128 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d145      	bne.n	80040fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406e:	4b33      	ldr	r3, [pc, #204]	; (800413c <HAL_RCC_OscConfig+0x4b4>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe f85a 	bl	800212c <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407c:	f7fe f856 	bl	800212c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e093      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	4b29      	ldr	r3, [pc, #164]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	019b      	lsls	r3, r3, #6
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	3b01      	subs	r3, #1
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	071b      	lsls	r3, r3, #28
 80040c6:	491b      	ldr	r1, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCC_OscConfig+0x4b4>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fe f82b 	bl	800212c <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040da:	f7fe f827 	bl	800212c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e064      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x452>
 80040f8:	e05c      	b.n	80041b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <HAL_RCC_OscConfig+0x4b4>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe f814 	bl	800212c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004108:	f7fe f810 	bl	800212c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e04d      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_OscConfig+0x4ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x480>
 8004126:	e045      	b.n	80041b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d107      	bne.n	8004140 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e040      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
 8004134:	40023800 	.word	0x40023800
 8004138:	40007000 	.word	0x40007000
 800413c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004140:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <HAL_RCC_OscConfig+0x538>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d030      	beq.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d129      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d122      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004178:	4293      	cmp	r3, r2
 800417a:	d119      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	3b01      	subs	r3, #1
 800418a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d10f      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800

080041c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e03f      	b.n	8004256 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd fdbc 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	; 0x24
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f929 	bl	8004460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800421c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800422c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800423c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b08a      	sub	sp, #40	; 0x28
 8004262:	af02      	add	r7, sp, #8
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b20      	cmp	r3, #32
 800427c:	d17c      	bne.n	8004378 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UART_Transmit+0x2c>
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e075      	b.n	800437a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_UART_Transmit+0x3e>
 8004298:	2302      	movs	r3, #2
 800429a:	e06e      	b.n	800437a <HAL_UART_Transmit+0x11c>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2221      	movs	r2, #33	; 0x21
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b2:	f7fd ff3b 	bl	800212c <HAL_GetTick>
 80042b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042cc:	d108      	bne.n	80042e0 <HAL_UART_Transmit+0x82>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d104      	bne.n	80042e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	e003      	b.n	80042e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042f0:	e02a      	b.n	8004348 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2200      	movs	r2, #0
 80042fa:	2180      	movs	r1, #128	; 0x80
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f840 	bl	8004382 <UART_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e036      	b.n	800437a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10b      	bne.n	800432a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	3302      	adds	r3, #2
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e007      	b.n	800433a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	3301      	adds	r3, #1
 8004338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1cf      	bne.n	80042f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	2140      	movs	r1, #64	; 0x40
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f810 	bl	8004382 <UART_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e006      	b.n	800437a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	e000      	b.n	800437a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b090      	sub	sp, #64	; 0x40
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	4613      	mov	r3, r2
 8004390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004392:	e050      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439a:	d04c      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800439c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80043a2:	f7fd fec3 	bl	800212c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d241      	bcs.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043d2:	637a      	str	r2, [r7, #52]	; 0x34
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e5      	bne.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	613b      	str	r3, [r7, #16]
   return(result);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004406:	623a      	str	r2, [r7, #32]
 8004408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	69f9      	ldr	r1, [r7, #28]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	61bb      	str	r3, [r7, #24]
   return(result);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e5      	bne.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e00f      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4013      	ands	r3, r2
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	429a      	cmp	r2, r3
 8004452:	d09f      	beq.n	8004394 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3740      	adds	r7, #64	; 0x40
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	b09f      	sub	sp, #124	; 0x7c
 8004466:	af00      	add	r7, sp, #0
 8004468:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	68d9      	ldr	r1, [r3, #12]
 8004478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	ea40 0301 	orr.w	r3, r0, r1
 8004480:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	431a      	orrs	r2, r3
 800448c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	431a      	orrs	r2, r3
 8004492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	4313      	orrs	r3, r2
 8004498:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800449a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044a4:	f021 010c 	bic.w	r1, r1, #12
 80044a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ae:	430b      	orrs	r3, r1
 80044b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	6999      	ldr	r1, [r3, #24]
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	ea40 0301 	orr.w	r3, r0, r1
 80044c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4bc5      	ldr	r3, [pc, #788]	; (80047e4 <UART_SetConfig+0x384>)
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d004      	beq.n	80044de <UART_SetConfig+0x7e>
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4bc3      	ldr	r3, [pc, #780]	; (80047e8 <UART_SetConfig+0x388>)
 80044da:	429a      	cmp	r2, r3
 80044dc:	d103      	bne.n	80044e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044de:	f7ff fa0d 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 80044e2:	6778      	str	r0, [r7, #116]	; 0x74
 80044e4:	e002      	b.n	80044ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044e6:	f7ff f9f5 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80044ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f4:	f040 80b6 	bne.w	8004664 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044fa:	461c      	mov	r4, r3
 80044fc:	f04f 0500 	mov.w	r5, #0
 8004500:	4622      	mov	r2, r4
 8004502:	462b      	mov	r3, r5
 8004504:	1891      	adds	r1, r2, r2
 8004506:	6439      	str	r1, [r7, #64]	; 0x40
 8004508:	415b      	adcs	r3, r3
 800450a:	647b      	str	r3, [r7, #68]	; 0x44
 800450c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004510:	1912      	adds	r2, r2, r4
 8004512:	eb45 0303 	adc.w	r3, r5, r3
 8004516:	f04f 0000 	mov.w	r0, #0
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	00d9      	lsls	r1, r3, #3
 8004520:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004524:	00d0      	lsls	r0, r2, #3
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	1911      	adds	r1, r2, r4
 800452c:	6639      	str	r1, [r7, #96]	; 0x60
 800452e:	416b      	adcs	r3, r5
 8004530:	667b      	str	r3, [r7, #100]	; 0x64
 8004532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	461a      	mov	r2, r3
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	1891      	adds	r1, r2, r2
 800453e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004540:	415b      	adcs	r3, r3
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004548:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800454c:	f7fc fb4c 	bl	8000be8 <__aeabi_uldivmod>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4ba5      	ldr	r3, [pc, #660]	; (80047ec <UART_SetConfig+0x38c>)
 8004556:	fba3 2302 	umull	r2, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	011e      	lsls	r6, r3, #4
 800455e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004560:	461c      	mov	r4, r3
 8004562:	f04f 0500 	mov.w	r5, #0
 8004566:	4622      	mov	r2, r4
 8004568:	462b      	mov	r3, r5
 800456a:	1891      	adds	r1, r2, r2
 800456c:	6339      	str	r1, [r7, #48]	; 0x30
 800456e:	415b      	adcs	r3, r3
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
 8004572:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004576:	1912      	adds	r2, r2, r4
 8004578:	eb45 0303 	adc.w	r3, r5, r3
 800457c:	f04f 0000 	mov.w	r0, #0
 8004580:	f04f 0100 	mov.w	r1, #0
 8004584:	00d9      	lsls	r1, r3, #3
 8004586:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800458a:	00d0      	lsls	r0, r2, #3
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	1911      	adds	r1, r2, r4
 8004592:	65b9      	str	r1, [r7, #88]	; 0x58
 8004594:	416b      	adcs	r3, r5
 8004596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	461a      	mov	r2, r3
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	1891      	adds	r1, r2, r2
 80045a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80045a6:	415b      	adcs	r3, r3
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045b2:	f7fc fb19 	bl	8000be8 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4b8c      	ldr	r3, [pc, #560]	; (80047ec <UART_SetConfig+0x38c>)
 80045bc:	fba3 1302 	umull	r1, r3, r3, r2
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	2164      	movs	r1, #100	; 0x64
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	3332      	adds	r3, #50	; 0x32
 80045ce:	4a87      	ldr	r2, [pc, #540]	; (80047ec <UART_SetConfig+0x38c>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045dc:	441e      	add	r6, r3
 80045de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e0:	4618      	mov	r0, r3
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	1894      	adds	r4, r2, r2
 80045ec:	623c      	str	r4, [r7, #32]
 80045ee:	415b      	adcs	r3, r3
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045f6:	1812      	adds	r2, r2, r0
 80045f8:	eb41 0303 	adc.w	r3, r1, r3
 80045fc:	f04f 0400 	mov.w	r4, #0
 8004600:	f04f 0500 	mov.w	r5, #0
 8004604:	00dd      	lsls	r5, r3, #3
 8004606:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800460a:	00d4      	lsls	r4, r2, #3
 800460c:	4622      	mov	r2, r4
 800460e:	462b      	mov	r3, r5
 8004610:	1814      	adds	r4, r2, r0
 8004612:	653c      	str	r4, [r7, #80]	; 0x50
 8004614:	414b      	adcs	r3, r1
 8004616:	657b      	str	r3, [r7, #84]	; 0x54
 8004618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	461a      	mov	r2, r3
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	1891      	adds	r1, r2, r2
 8004624:	61b9      	str	r1, [r7, #24]
 8004626:	415b      	adcs	r3, r3
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800462e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004632:	f7fc fad9 	bl	8000be8 <__aeabi_uldivmod>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4b6c      	ldr	r3, [pc, #432]	; (80047ec <UART_SetConfig+0x38c>)
 800463c:	fba3 1302 	umull	r1, r3, r3, r2
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	2164      	movs	r1, #100	; 0x64
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	3332      	adds	r3, #50	; 0x32
 800464e:	4a67      	ldr	r2, [pc, #412]	; (80047ec <UART_SetConfig+0x38c>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	f003 0207 	and.w	r2, r3, #7
 800465a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4432      	add	r2, r6
 8004660:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004662:	e0b9      	b.n	80047d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004666:	461c      	mov	r4, r3
 8004668:	f04f 0500 	mov.w	r5, #0
 800466c:	4622      	mov	r2, r4
 800466e:	462b      	mov	r3, r5
 8004670:	1891      	adds	r1, r2, r2
 8004672:	6139      	str	r1, [r7, #16]
 8004674:	415b      	adcs	r3, r3
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800467c:	1912      	adds	r2, r2, r4
 800467e:	eb45 0303 	adc.w	r3, r5, r3
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	00d9      	lsls	r1, r3, #3
 800468c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004690:	00d0      	lsls	r0, r2, #3
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	eb12 0804 	adds.w	r8, r2, r4
 800469a:	eb43 0905 	adc.w	r9, r3, r5
 800469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	008b      	lsls	r3, r1, #2
 80046b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046b6:	0082      	lsls	r2, r0, #2
 80046b8:	4640      	mov	r0, r8
 80046ba:	4649      	mov	r1, r9
 80046bc:	f7fc fa94 	bl	8000be8 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4b49      	ldr	r3, [pc, #292]	; (80047ec <UART_SetConfig+0x38c>)
 80046c6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	011e      	lsls	r6, r3, #4
 80046ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d0:	4618      	mov	r0, r3
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	1894      	adds	r4, r2, r2
 80046dc:	60bc      	str	r4, [r7, #8]
 80046de:	415b      	adcs	r3, r3
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e6:	1812      	adds	r2, r2, r0
 80046e8:	eb41 0303 	adc.w	r3, r1, r3
 80046ec:	f04f 0400 	mov.w	r4, #0
 80046f0:	f04f 0500 	mov.w	r5, #0
 80046f4:	00dd      	lsls	r5, r3, #3
 80046f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046fa:	00d4      	lsls	r4, r2, #3
 80046fc:	4622      	mov	r2, r4
 80046fe:	462b      	mov	r3, r5
 8004700:	1814      	adds	r4, r2, r0
 8004702:	64bc      	str	r4, [r7, #72]	; 0x48
 8004704:	414b      	adcs	r3, r1
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4618      	mov	r0, r3
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	008b      	lsls	r3, r1, #2
 800471c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004720:	0082      	lsls	r2, r0, #2
 8004722:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004726:	f7fc fa5f 	bl	8000be8 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <UART_SetConfig+0x38c>)
 8004730:	fba3 1302 	umull	r1, r3, r3, r2
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	2164      	movs	r1, #100	; 0x64
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	3332      	adds	r3, #50	; 0x32
 8004742:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <UART_SetConfig+0x38c>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474e:	441e      	add	r6, r3
 8004750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004752:	4618      	mov	r0, r3
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	1894      	adds	r4, r2, r2
 800475e:	603c      	str	r4, [r7, #0]
 8004760:	415b      	adcs	r3, r3
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004768:	1812      	adds	r2, r2, r0
 800476a:	eb41 0303 	adc.w	r3, r1, r3
 800476e:	f04f 0400 	mov.w	r4, #0
 8004772:	f04f 0500 	mov.w	r5, #0
 8004776:	00dd      	lsls	r5, r3, #3
 8004778:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800477c:	00d4      	lsls	r4, r2, #3
 800477e:	4622      	mov	r2, r4
 8004780:	462b      	mov	r3, r5
 8004782:	eb12 0a00 	adds.w	sl, r2, r0
 8004786:	eb43 0b01 	adc.w	fp, r3, r1
 800478a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4618      	mov	r0, r3
 8004790:	f04f 0100 	mov.w	r1, #0
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	008b      	lsls	r3, r1, #2
 800479e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047a2:	0082      	lsls	r2, r0, #2
 80047a4:	4650      	mov	r0, sl
 80047a6:	4659      	mov	r1, fp
 80047a8:	f7fc fa1e 	bl	8000be8 <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <UART_SetConfig+0x38c>)
 80047b2:	fba3 1302 	umull	r1, r3, r3, r2
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	2164      	movs	r1, #100	; 0x64
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	3332      	adds	r3, #50	; 0x32
 80047c4:	4a09      	ldr	r2, [pc, #36]	; (80047ec <UART_SetConfig+0x38c>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4432      	add	r2, r6
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	377c      	adds	r7, #124	; 0x7c
 80047dc:	46bd      	mov	sp, r7
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e2:	bf00      	nop
 80047e4:	40011000 	.word	0x40011000
 80047e8:	40011400 	.word	0x40011400
 80047ec:	51eb851f 	.word	0x51eb851f

080047f0 <__errno>:
 80047f0:	4b01      	ldr	r3, [pc, #4]	; (80047f8 <__errno+0x8>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	200000a4 	.word	0x200000a4

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4d0d      	ldr	r5, [pc, #52]	; (8004834 <__libc_init_array+0x38>)
 8004800:	4c0d      	ldr	r4, [pc, #52]	; (8004838 <__libc_init_array+0x3c>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	2600      	movs	r6, #0
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	4d0b      	ldr	r5, [pc, #44]	; (800483c <__libc_init_array+0x40>)
 800480e:	4c0c      	ldr	r4, [pc, #48]	; (8004840 <__libc_init_array+0x44>)
 8004810:	f003 f89e 	bl	8007950 <_init>
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	2600      	movs	r6, #0
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	08007eac 	.word	0x08007eac
 8004838:	08007eac 	.word	0x08007eac
 800483c:	08007eac 	.word	0x08007eac
 8004840:	08007eb0 	.word	0x08007eb0

08004844 <memset>:
 8004844:	4402      	add	r2, r0
 8004846:	4603      	mov	r3, r0
 8004848:	4293      	cmp	r3, r2
 800484a:	d100      	bne.n	800484e <memset+0xa>
 800484c:	4770      	bx	lr
 800484e:	f803 1b01 	strb.w	r1, [r3], #1
 8004852:	e7f9      	b.n	8004848 <memset+0x4>

08004854 <__cvt>:
 8004854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	ec55 4b10 	vmov	r4, r5, d0
 800485c:	2d00      	cmp	r5, #0
 800485e:	460e      	mov	r6, r1
 8004860:	4619      	mov	r1, r3
 8004862:	462b      	mov	r3, r5
 8004864:	bfbb      	ittet	lt
 8004866:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800486a:	461d      	movlt	r5, r3
 800486c:	2300      	movge	r3, #0
 800486e:	232d      	movlt	r3, #45	; 0x2d
 8004870:	700b      	strb	r3, [r1, #0]
 8004872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004874:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004878:	4691      	mov	r9, r2
 800487a:	f023 0820 	bic.w	r8, r3, #32
 800487e:	bfbc      	itt	lt
 8004880:	4622      	movlt	r2, r4
 8004882:	4614      	movlt	r4, r2
 8004884:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004888:	d005      	beq.n	8004896 <__cvt+0x42>
 800488a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800488e:	d100      	bne.n	8004892 <__cvt+0x3e>
 8004890:	3601      	adds	r6, #1
 8004892:	2102      	movs	r1, #2
 8004894:	e000      	b.n	8004898 <__cvt+0x44>
 8004896:	2103      	movs	r1, #3
 8004898:	ab03      	add	r3, sp, #12
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	ab02      	add	r3, sp, #8
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	ec45 4b10 	vmov	d0, r4, r5
 80048a4:	4653      	mov	r3, sl
 80048a6:	4632      	mov	r2, r6
 80048a8:	f000 fce2 	bl	8005270 <_dtoa_r>
 80048ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048b0:	4607      	mov	r7, r0
 80048b2:	d102      	bne.n	80048ba <__cvt+0x66>
 80048b4:	f019 0f01 	tst.w	r9, #1
 80048b8:	d022      	beq.n	8004900 <__cvt+0xac>
 80048ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048be:	eb07 0906 	add.w	r9, r7, r6
 80048c2:	d110      	bne.n	80048e6 <__cvt+0x92>
 80048c4:	783b      	ldrb	r3, [r7, #0]
 80048c6:	2b30      	cmp	r3, #48	; 0x30
 80048c8:	d10a      	bne.n	80048e0 <__cvt+0x8c>
 80048ca:	2200      	movs	r2, #0
 80048cc:	2300      	movs	r3, #0
 80048ce:	4620      	mov	r0, r4
 80048d0:	4629      	mov	r1, r5
 80048d2:	f7fc f919 	bl	8000b08 <__aeabi_dcmpeq>
 80048d6:	b918      	cbnz	r0, 80048e0 <__cvt+0x8c>
 80048d8:	f1c6 0601 	rsb	r6, r6, #1
 80048dc:	f8ca 6000 	str.w	r6, [sl]
 80048e0:	f8da 3000 	ldr.w	r3, [sl]
 80048e4:	4499      	add	r9, r3
 80048e6:	2200      	movs	r2, #0
 80048e8:	2300      	movs	r3, #0
 80048ea:	4620      	mov	r0, r4
 80048ec:	4629      	mov	r1, r5
 80048ee:	f7fc f90b 	bl	8000b08 <__aeabi_dcmpeq>
 80048f2:	b108      	cbz	r0, 80048f8 <__cvt+0xa4>
 80048f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80048f8:	2230      	movs	r2, #48	; 0x30
 80048fa:	9b03      	ldr	r3, [sp, #12]
 80048fc:	454b      	cmp	r3, r9
 80048fe:	d307      	bcc.n	8004910 <__cvt+0xbc>
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004904:	1bdb      	subs	r3, r3, r7
 8004906:	4638      	mov	r0, r7
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	b004      	add	sp, #16
 800490c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004910:	1c59      	adds	r1, r3, #1
 8004912:	9103      	str	r1, [sp, #12]
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e7f0      	b.n	80048fa <__cvt+0xa6>

08004918 <__exponent>:
 8004918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800491a:	4603      	mov	r3, r0
 800491c:	2900      	cmp	r1, #0
 800491e:	bfb8      	it	lt
 8004920:	4249      	neglt	r1, r1
 8004922:	f803 2b02 	strb.w	r2, [r3], #2
 8004926:	bfb4      	ite	lt
 8004928:	222d      	movlt	r2, #45	; 0x2d
 800492a:	222b      	movge	r2, #43	; 0x2b
 800492c:	2909      	cmp	r1, #9
 800492e:	7042      	strb	r2, [r0, #1]
 8004930:	dd2a      	ble.n	8004988 <__exponent+0x70>
 8004932:	f10d 0407 	add.w	r4, sp, #7
 8004936:	46a4      	mov	ip, r4
 8004938:	270a      	movs	r7, #10
 800493a:	46a6      	mov	lr, r4
 800493c:	460a      	mov	r2, r1
 800493e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004942:	fb07 1516 	mls	r5, r7, r6, r1
 8004946:	3530      	adds	r5, #48	; 0x30
 8004948:	2a63      	cmp	r2, #99	; 0x63
 800494a:	f104 34ff 	add.w	r4, r4, #4294967295
 800494e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004952:	4631      	mov	r1, r6
 8004954:	dcf1      	bgt.n	800493a <__exponent+0x22>
 8004956:	3130      	adds	r1, #48	; 0x30
 8004958:	f1ae 0502 	sub.w	r5, lr, #2
 800495c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004960:	1c44      	adds	r4, r0, #1
 8004962:	4629      	mov	r1, r5
 8004964:	4561      	cmp	r1, ip
 8004966:	d30a      	bcc.n	800497e <__exponent+0x66>
 8004968:	f10d 0209 	add.w	r2, sp, #9
 800496c:	eba2 020e 	sub.w	r2, r2, lr
 8004970:	4565      	cmp	r5, ip
 8004972:	bf88      	it	hi
 8004974:	2200      	movhi	r2, #0
 8004976:	4413      	add	r3, r2
 8004978:	1a18      	subs	r0, r3, r0
 800497a:	b003      	add	sp, #12
 800497c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800497e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004982:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004986:	e7ed      	b.n	8004964 <__exponent+0x4c>
 8004988:	2330      	movs	r3, #48	; 0x30
 800498a:	3130      	adds	r1, #48	; 0x30
 800498c:	7083      	strb	r3, [r0, #2]
 800498e:	70c1      	strb	r1, [r0, #3]
 8004990:	1d03      	adds	r3, r0, #4
 8004992:	e7f1      	b.n	8004978 <__exponent+0x60>

08004994 <_printf_float>:
 8004994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004998:	ed2d 8b02 	vpush	{d8}
 800499c:	b08d      	sub	sp, #52	; 0x34
 800499e:	460c      	mov	r4, r1
 80049a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80049a4:	4616      	mov	r6, r2
 80049a6:	461f      	mov	r7, r3
 80049a8:	4605      	mov	r5, r0
 80049aa:	f001 fb43 	bl	8006034 <_localeconv_r>
 80049ae:	f8d0 a000 	ldr.w	sl, [r0]
 80049b2:	4650      	mov	r0, sl
 80049b4:	f7fb fc2c 	bl	8000210 <strlen>
 80049b8:	2300      	movs	r3, #0
 80049ba:	930a      	str	r3, [sp, #40]	; 0x28
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	9305      	str	r3, [sp, #20]
 80049c0:	f8d8 3000 	ldr.w	r3, [r8]
 80049c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80049c8:	3307      	adds	r3, #7
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	f103 0208 	add.w	r2, r3, #8
 80049d2:	f8c8 2000 	str.w	r2, [r8]
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80049e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049e6:	9307      	str	r3, [sp, #28]
 80049e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80049ec:	ee08 0a10 	vmov	s16, r0
 80049f0:	4b9f      	ldr	r3, [pc, #636]	; (8004c70 <_printf_float+0x2dc>)
 80049f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049f6:	f04f 32ff 	mov.w	r2, #4294967295
 80049fa:	f7fc f8b7 	bl	8000b6c <__aeabi_dcmpun>
 80049fe:	bb88      	cbnz	r0, 8004a64 <_printf_float+0xd0>
 8004a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a04:	4b9a      	ldr	r3, [pc, #616]	; (8004c70 <_printf_float+0x2dc>)
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	f7fc f891 	bl	8000b30 <__aeabi_dcmple>
 8004a0e:	bb48      	cbnz	r0, 8004a64 <_printf_float+0xd0>
 8004a10:	2200      	movs	r2, #0
 8004a12:	2300      	movs	r3, #0
 8004a14:	4640      	mov	r0, r8
 8004a16:	4649      	mov	r1, r9
 8004a18:	f7fc f880 	bl	8000b1c <__aeabi_dcmplt>
 8004a1c:	b110      	cbz	r0, 8004a24 <_printf_float+0x90>
 8004a1e:	232d      	movs	r3, #45	; 0x2d
 8004a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a24:	4b93      	ldr	r3, [pc, #588]	; (8004c74 <_printf_float+0x2e0>)
 8004a26:	4894      	ldr	r0, [pc, #592]	; (8004c78 <_printf_float+0x2e4>)
 8004a28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a2c:	bf94      	ite	ls
 8004a2e:	4698      	movls	r8, r3
 8004a30:	4680      	movhi	r8, r0
 8004a32:	2303      	movs	r3, #3
 8004a34:	6123      	str	r3, [r4, #16]
 8004a36:	9b05      	ldr	r3, [sp, #20]
 8004a38:	f023 0204 	bic.w	r2, r3, #4
 8004a3c:	6022      	str	r2, [r4, #0]
 8004a3e:	f04f 0900 	mov.w	r9, #0
 8004a42:	9700      	str	r7, [sp, #0]
 8004a44:	4633      	mov	r3, r6
 8004a46:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f000 f9d8 	bl	8004e00 <_printf_common>
 8004a50:	3001      	adds	r0, #1
 8004a52:	f040 8090 	bne.w	8004b76 <_printf_float+0x1e2>
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5a:	b00d      	add	sp, #52	; 0x34
 8004a5c:	ecbd 8b02 	vpop	{d8}
 8004a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a64:	4642      	mov	r2, r8
 8004a66:	464b      	mov	r3, r9
 8004a68:	4640      	mov	r0, r8
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	f7fc f87e 	bl	8000b6c <__aeabi_dcmpun>
 8004a70:	b140      	cbz	r0, 8004a84 <_printf_float+0xf0>
 8004a72:	464b      	mov	r3, r9
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bfbc      	itt	lt
 8004a78:	232d      	movlt	r3, #45	; 0x2d
 8004a7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a7e:	487f      	ldr	r0, [pc, #508]	; (8004c7c <_printf_float+0x2e8>)
 8004a80:	4b7f      	ldr	r3, [pc, #508]	; (8004c80 <_printf_float+0x2ec>)
 8004a82:	e7d1      	b.n	8004a28 <_printf_float+0x94>
 8004a84:	6863      	ldr	r3, [r4, #4]
 8004a86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a8a:	9206      	str	r2, [sp, #24]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	d13f      	bne.n	8004b10 <_printf_float+0x17c>
 8004a90:	2306      	movs	r3, #6
 8004a92:	6063      	str	r3, [r4, #4]
 8004a94:	9b05      	ldr	r3, [sp, #20]
 8004a96:	6861      	ldr	r1, [r4, #4]
 8004a98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9303      	str	r3, [sp, #12]
 8004aa0:	ab0a      	add	r3, sp, #40	; 0x28
 8004aa2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004aa6:	ab09      	add	r3, sp, #36	; 0x24
 8004aa8:	ec49 8b10 	vmov	d0, r8, r9
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	6022      	str	r2, [r4, #0]
 8004ab0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f7ff fecd 	bl	8004854 <__cvt>
 8004aba:	9b06      	ldr	r3, [sp, #24]
 8004abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004abe:	2b47      	cmp	r3, #71	; 0x47
 8004ac0:	4680      	mov	r8, r0
 8004ac2:	d108      	bne.n	8004ad6 <_printf_float+0x142>
 8004ac4:	1cc8      	adds	r0, r1, #3
 8004ac6:	db02      	blt.n	8004ace <_printf_float+0x13a>
 8004ac8:	6863      	ldr	r3, [r4, #4]
 8004aca:	4299      	cmp	r1, r3
 8004acc:	dd41      	ble.n	8004b52 <_printf_float+0x1be>
 8004ace:	f1ab 0b02 	sub.w	fp, fp, #2
 8004ad2:	fa5f fb8b 	uxtb.w	fp, fp
 8004ad6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ada:	d820      	bhi.n	8004b1e <_printf_float+0x18a>
 8004adc:	3901      	subs	r1, #1
 8004ade:	465a      	mov	r2, fp
 8004ae0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ae4:	9109      	str	r1, [sp, #36]	; 0x24
 8004ae6:	f7ff ff17 	bl	8004918 <__exponent>
 8004aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aec:	1813      	adds	r3, r2, r0
 8004aee:	2a01      	cmp	r2, #1
 8004af0:	4681      	mov	r9, r0
 8004af2:	6123      	str	r3, [r4, #16]
 8004af4:	dc02      	bgt.n	8004afc <_printf_float+0x168>
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	07d2      	lsls	r2, r2, #31
 8004afa:	d501      	bpl.n	8004b00 <_printf_float+0x16c>
 8004afc:	3301      	adds	r3, #1
 8004afe:	6123      	str	r3, [r4, #16]
 8004b00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d09c      	beq.n	8004a42 <_printf_float+0xae>
 8004b08:	232d      	movs	r3, #45	; 0x2d
 8004b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b0e:	e798      	b.n	8004a42 <_printf_float+0xae>
 8004b10:	9a06      	ldr	r2, [sp, #24]
 8004b12:	2a47      	cmp	r2, #71	; 0x47
 8004b14:	d1be      	bne.n	8004a94 <_printf_float+0x100>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1bc      	bne.n	8004a94 <_printf_float+0x100>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e7b9      	b.n	8004a92 <_printf_float+0xfe>
 8004b1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b22:	d118      	bne.n	8004b56 <_printf_float+0x1c2>
 8004b24:	2900      	cmp	r1, #0
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	dd0b      	ble.n	8004b42 <_printf_float+0x1ae>
 8004b2a:	6121      	str	r1, [r4, #16]
 8004b2c:	b913      	cbnz	r3, 8004b34 <_printf_float+0x1a0>
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	07d0      	lsls	r0, r2, #31
 8004b32:	d502      	bpl.n	8004b3a <_printf_float+0x1a6>
 8004b34:	3301      	adds	r3, #1
 8004b36:	440b      	add	r3, r1
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b3c:	f04f 0900 	mov.w	r9, #0
 8004b40:	e7de      	b.n	8004b00 <_printf_float+0x16c>
 8004b42:	b913      	cbnz	r3, 8004b4a <_printf_float+0x1b6>
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	07d2      	lsls	r2, r2, #31
 8004b48:	d501      	bpl.n	8004b4e <_printf_float+0x1ba>
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	e7f4      	b.n	8004b38 <_printf_float+0x1a4>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e7f2      	b.n	8004b38 <_printf_float+0x1a4>
 8004b52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b58:	4299      	cmp	r1, r3
 8004b5a:	db05      	blt.n	8004b68 <_printf_float+0x1d4>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	6121      	str	r1, [r4, #16]
 8004b60:	07d8      	lsls	r0, r3, #31
 8004b62:	d5ea      	bpl.n	8004b3a <_printf_float+0x1a6>
 8004b64:	1c4b      	adds	r3, r1, #1
 8004b66:	e7e7      	b.n	8004b38 <_printf_float+0x1a4>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	bfd4      	ite	le
 8004b6c:	f1c1 0202 	rsble	r2, r1, #2
 8004b70:	2201      	movgt	r2, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	e7e0      	b.n	8004b38 <_printf_float+0x1a4>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	055a      	lsls	r2, r3, #21
 8004b7a:	d407      	bmi.n	8004b8c <_printf_float+0x1f8>
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	4642      	mov	r2, r8
 8004b80:	4631      	mov	r1, r6
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b8      	blx	r7
 8004b86:	3001      	adds	r0, #1
 8004b88:	d12c      	bne.n	8004be4 <_printf_float+0x250>
 8004b8a:	e764      	b.n	8004a56 <_printf_float+0xc2>
 8004b8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b90:	f240 80e0 	bls.w	8004d54 <_printf_float+0x3c0>
 8004b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f7fb ffb4 	bl	8000b08 <__aeabi_dcmpeq>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d034      	beq.n	8004c0e <_printf_float+0x27a>
 8004ba4:	4a37      	ldr	r2, [pc, #220]	; (8004c84 <_printf_float+0x2f0>)
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f43f af51 	beq.w	8004a56 <_printf_float+0xc2>
 8004bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	db02      	blt.n	8004bc2 <_printf_float+0x22e>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	07d8      	lsls	r0, r3, #31
 8004bc0:	d510      	bpl.n	8004be4 <_printf_float+0x250>
 8004bc2:	ee18 3a10 	vmov	r3, s16
 8004bc6:	4652      	mov	r2, sl
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4628      	mov	r0, r5
 8004bcc:	47b8      	blx	r7
 8004bce:	3001      	adds	r0, #1
 8004bd0:	f43f af41 	beq.w	8004a56 <_printf_float+0xc2>
 8004bd4:	f04f 0800 	mov.w	r8, #0
 8004bd8:	f104 091a 	add.w	r9, r4, #26
 8004bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bde:	3b01      	subs	r3, #1
 8004be0:	4543      	cmp	r3, r8
 8004be2:	dc09      	bgt.n	8004bf8 <_printf_float+0x264>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	079b      	lsls	r3, r3, #30
 8004be8:	f100 8105 	bmi.w	8004df6 <_printf_float+0x462>
 8004bec:	68e0      	ldr	r0, [r4, #12]
 8004bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bf0:	4298      	cmp	r0, r3
 8004bf2:	bfb8      	it	lt
 8004bf4:	4618      	movlt	r0, r3
 8004bf6:	e730      	b.n	8004a5a <_printf_float+0xc6>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	464a      	mov	r2, r9
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f af27 	beq.w	8004a56 <_printf_float+0xc2>
 8004c08:	f108 0801 	add.w	r8, r8, #1
 8004c0c:	e7e6      	b.n	8004bdc <_printf_float+0x248>
 8004c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	dc39      	bgt.n	8004c88 <_printf_float+0x2f4>
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <_printf_float+0x2f0>)
 8004c16:	2301      	movs	r3, #1
 8004c18:	4631      	mov	r1, r6
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	47b8      	blx	r7
 8004c1e:	3001      	adds	r0, #1
 8004c20:	f43f af19 	beq.w	8004a56 <_printf_float+0xc2>
 8004c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d102      	bne.n	8004c32 <_printf_float+0x29e>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	07d9      	lsls	r1, r3, #31
 8004c30:	d5d8      	bpl.n	8004be4 <_printf_float+0x250>
 8004c32:	ee18 3a10 	vmov	r3, s16
 8004c36:	4652      	mov	r2, sl
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f43f af09 	beq.w	8004a56 <_printf_float+0xc2>
 8004c44:	f04f 0900 	mov.w	r9, #0
 8004c48:	f104 0a1a 	add.w	sl, r4, #26
 8004c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4e:	425b      	negs	r3, r3
 8004c50:	454b      	cmp	r3, r9
 8004c52:	dc01      	bgt.n	8004c58 <_printf_float+0x2c4>
 8004c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c56:	e792      	b.n	8004b7e <_printf_float+0x1ea>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4652      	mov	r2, sl
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	47b8      	blx	r7
 8004c62:	3001      	adds	r0, #1
 8004c64:	f43f aef7 	beq.w	8004a56 <_printf_float+0xc2>
 8004c68:	f109 0901 	add.w	r9, r9, #1
 8004c6c:	e7ee      	b.n	8004c4c <_printf_float+0x2b8>
 8004c6e:	bf00      	nop
 8004c70:	7fefffff 	.word	0x7fefffff
 8004c74:	08007ac4 	.word	0x08007ac4
 8004c78:	08007ac8 	.word	0x08007ac8
 8004c7c:	08007ad0 	.word	0x08007ad0
 8004c80:	08007acc 	.word	0x08007acc
 8004c84:	08007ad4 	.word	0x08007ad4
 8004c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	bfa8      	it	ge
 8004c90:	461a      	movge	r2, r3
 8004c92:	2a00      	cmp	r2, #0
 8004c94:	4691      	mov	r9, r2
 8004c96:	dc37      	bgt.n	8004d08 <_printf_float+0x374>
 8004c98:	f04f 0b00 	mov.w	fp, #0
 8004c9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ca0:	f104 021a 	add.w	r2, r4, #26
 8004ca4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ca6:	9305      	str	r3, [sp, #20]
 8004ca8:	eba3 0309 	sub.w	r3, r3, r9
 8004cac:	455b      	cmp	r3, fp
 8004cae:	dc33      	bgt.n	8004d18 <_printf_float+0x384>
 8004cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	db3b      	blt.n	8004d30 <_printf_float+0x39c>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	07da      	lsls	r2, r3, #31
 8004cbc:	d438      	bmi.n	8004d30 <_printf_float+0x39c>
 8004cbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cc0:	9b05      	ldr	r3, [sp, #20]
 8004cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	eba2 0901 	sub.w	r9, r2, r1
 8004cca:	4599      	cmp	r9, r3
 8004ccc:	bfa8      	it	ge
 8004cce:	4699      	movge	r9, r3
 8004cd0:	f1b9 0f00 	cmp.w	r9, #0
 8004cd4:	dc35      	bgt.n	8004d42 <_printf_float+0x3ae>
 8004cd6:	f04f 0800 	mov.w	r8, #0
 8004cda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cde:	f104 0a1a 	add.w	sl, r4, #26
 8004ce2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	eba3 0309 	sub.w	r3, r3, r9
 8004cec:	4543      	cmp	r3, r8
 8004cee:	f77f af79 	ble.w	8004be4 <_printf_float+0x250>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	47b8      	blx	r7
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	f43f aeaa 	beq.w	8004a56 <_printf_float+0xc2>
 8004d02:	f108 0801 	add.w	r8, r8, #1
 8004d06:	e7ec      	b.n	8004ce2 <_printf_float+0x34e>
 8004d08:	4613      	mov	r3, r2
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	d1c0      	bne.n	8004c98 <_printf_float+0x304>
 8004d16:	e69e      	b.n	8004a56 <_printf_float+0xc2>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	9205      	str	r2, [sp, #20]
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f ae97 	beq.w	8004a56 <_printf_float+0xc2>
 8004d28:	9a05      	ldr	r2, [sp, #20]
 8004d2a:	f10b 0b01 	add.w	fp, fp, #1
 8004d2e:	e7b9      	b.n	8004ca4 <_printf_float+0x310>
 8004d30:	ee18 3a10 	vmov	r3, s16
 8004d34:	4652      	mov	r2, sl
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d1be      	bne.n	8004cbe <_printf_float+0x32a>
 8004d40:	e689      	b.n	8004a56 <_printf_float+0xc2>
 8004d42:	9a05      	ldr	r2, [sp, #20]
 8004d44:	464b      	mov	r3, r9
 8004d46:	4442      	add	r2, r8
 8004d48:	4631      	mov	r1, r6
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	47b8      	blx	r7
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d1c1      	bne.n	8004cd6 <_printf_float+0x342>
 8004d52:	e680      	b.n	8004a56 <_printf_float+0xc2>
 8004d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d56:	2a01      	cmp	r2, #1
 8004d58:	dc01      	bgt.n	8004d5e <_printf_float+0x3ca>
 8004d5a:	07db      	lsls	r3, r3, #31
 8004d5c:	d538      	bpl.n	8004dd0 <_printf_float+0x43c>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4642      	mov	r2, r8
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b8      	blx	r7
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f43f ae74 	beq.w	8004a56 <_printf_float+0xc2>
 8004d6e:	ee18 3a10 	vmov	r3, s16
 8004d72:	4652      	mov	r2, sl
 8004d74:	4631      	mov	r1, r6
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f43f ae6b 	beq.w	8004a56 <_printf_float+0xc2>
 8004d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d84:	2200      	movs	r2, #0
 8004d86:	2300      	movs	r3, #0
 8004d88:	f7fb febe 	bl	8000b08 <__aeabi_dcmpeq>
 8004d8c:	b9d8      	cbnz	r0, 8004dc6 <_printf_float+0x432>
 8004d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d90:	f108 0201 	add.w	r2, r8, #1
 8004d94:	3b01      	subs	r3, #1
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d10e      	bne.n	8004dbe <_printf_float+0x42a>
 8004da0:	e659      	b.n	8004a56 <_printf_float+0xc2>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4652      	mov	r2, sl
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	f43f ae52 	beq.w	8004a56 <_printf_float+0xc2>
 8004db2:	f108 0801 	add.w	r8, r8, #1
 8004db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	4543      	cmp	r3, r8
 8004dbc:	dcf1      	bgt.n	8004da2 <_printf_float+0x40e>
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004dc4:	e6dc      	b.n	8004b80 <_printf_float+0x1ec>
 8004dc6:	f04f 0800 	mov.w	r8, #0
 8004dca:	f104 0a1a 	add.w	sl, r4, #26
 8004dce:	e7f2      	b.n	8004db6 <_printf_float+0x422>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	e7df      	b.n	8004d96 <_printf_float+0x402>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	464a      	mov	r2, r9
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f ae38 	beq.w	8004a56 <_printf_float+0xc2>
 8004de6:	f108 0801 	add.w	r8, r8, #1
 8004dea:	68e3      	ldr	r3, [r4, #12]
 8004dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dee:	1a5b      	subs	r3, r3, r1
 8004df0:	4543      	cmp	r3, r8
 8004df2:	dcf0      	bgt.n	8004dd6 <_printf_float+0x442>
 8004df4:	e6fa      	b.n	8004bec <_printf_float+0x258>
 8004df6:	f04f 0800 	mov.w	r8, #0
 8004dfa:	f104 0919 	add.w	r9, r4, #25
 8004dfe:	e7f4      	b.n	8004dea <_printf_float+0x456>

08004e00 <_printf_common>:
 8004e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	4616      	mov	r6, r2
 8004e06:	4699      	mov	r9, r3
 8004e08:	688a      	ldr	r2, [r1, #8]
 8004e0a:	690b      	ldr	r3, [r1, #16]
 8004e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	bfb8      	it	lt
 8004e14:	4613      	movlt	r3, r2
 8004e16:	6033      	str	r3, [r6, #0]
 8004e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	b10a      	cbz	r2, 8004e26 <_printf_common+0x26>
 8004e22:	3301      	adds	r3, #1
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	0699      	lsls	r1, r3, #26
 8004e2a:	bf42      	ittt	mi
 8004e2c:	6833      	ldrmi	r3, [r6, #0]
 8004e2e:	3302      	addmi	r3, #2
 8004e30:	6033      	strmi	r3, [r6, #0]
 8004e32:	6825      	ldr	r5, [r4, #0]
 8004e34:	f015 0506 	ands.w	r5, r5, #6
 8004e38:	d106      	bne.n	8004e48 <_printf_common+0x48>
 8004e3a:	f104 0a19 	add.w	sl, r4, #25
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	6832      	ldr	r2, [r6, #0]
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	dc26      	bgt.n	8004e96 <_printf_common+0x96>
 8004e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e4c:	1e13      	subs	r3, r2, #0
 8004e4e:	6822      	ldr	r2, [r4, #0]
 8004e50:	bf18      	it	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	0692      	lsls	r2, r2, #26
 8004e56:	d42b      	bmi.n	8004eb0 <_printf_common+0xb0>
 8004e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	4638      	mov	r0, r7
 8004e60:	47c0      	blx	r8
 8004e62:	3001      	adds	r0, #1
 8004e64:	d01e      	beq.n	8004ea4 <_printf_common+0xa4>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	68e5      	ldr	r5, [r4, #12]
 8004e6a:	6832      	ldr	r2, [r6, #0]
 8004e6c:	f003 0306 	and.w	r3, r3, #6
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	bf08      	it	eq
 8004e74:	1aad      	subeq	r5, r5, r2
 8004e76:	68a3      	ldr	r3, [r4, #8]
 8004e78:	6922      	ldr	r2, [r4, #16]
 8004e7a:	bf0c      	ite	eq
 8004e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e80:	2500      	movne	r5, #0
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bfc4      	itt	gt
 8004e86:	1a9b      	subgt	r3, r3, r2
 8004e88:	18ed      	addgt	r5, r5, r3
 8004e8a:	2600      	movs	r6, #0
 8004e8c:	341a      	adds	r4, #26
 8004e8e:	42b5      	cmp	r5, r6
 8004e90:	d11a      	bne.n	8004ec8 <_printf_common+0xc8>
 8004e92:	2000      	movs	r0, #0
 8004e94:	e008      	b.n	8004ea8 <_printf_common+0xa8>
 8004e96:	2301      	movs	r3, #1
 8004e98:	4652      	mov	r2, sl
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	47c0      	blx	r8
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d103      	bne.n	8004eac <_printf_common+0xac>
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eac:	3501      	adds	r5, #1
 8004eae:	e7c6      	b.n	8004e3e <_printf_common+0x3e>
 8004eb0:	18e1      	adds	r1, r4, r3
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	2030      	movs	r0, #48	; 0x30
 8004eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eba:	4422      	add	r2, r4
 8004ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	e7c7      	b.n	8004e58 <_printf_common+0x58>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4622      	mov	r2, r4
 8004ecc:	4649      	mov	r1, r9
 8004ece:	4638      	mov	r0, r7
 8004ed0:	47c0      	blx	r8
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d0e6      	beq.n	8004ea4 <_printf_common+0xa4>
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7d9      	b.n	8004e8e <_printf_common+0x8e>
	...

08004edc <_printf_i>:
 8004edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	4691      	mov	r9, r2
 8004ee4:	7e27      	ldrb	r7, [r4, #24]
 8004ee6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ee8:	2f78      	cmp	r7, #120	; 0x78
 8004eea:	4680      	mov	r8, r0
 8004eec:	469a      	mov	sl, r3
 8004eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef2:	d807      	bhi.n	8004f04 <_printf_i+0x28>
 8004ef4:	2f62      	cmp	r7, #98	; 0x62
 8004ef6:	d80a      	bhi.n	8004f0e <_printf_i+0x32>
 8004ef8:	2f00      	cmp	r7, #0
 8004efa:	f000 80d8 	beq.w	80050ae <_printf_i+0x1d2>
 8004efe:	2f58      	cmp	r7, #88	; 0x58
 8004f00:	f000 80a3 	beq.w	800504a <_printf_i+0x16e>
 8004f04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f0c:	e03a      	b.n	8004f84 <_printf_i+0xa8>
 8004f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f12:	2b15      	cmp	r3, #21
 8004f14:	d8f6      	bhi.n	8004f04 <_printf_i+0x28>
 8004f16:	a001      	add	r0, pc, #4	; (adr r0, 8004f1c <_printf_i+0x40>)
 8004f18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f1c:	08004f75 	.word	0x08004f75
 8004f20:	08004f89 	.word	0x08004f89
 8004f24:	08004f05 	.word	0x08004f05
 8004f28:	08004f05 	.word	0x08004f05
 8004f2c:	08004f05 	.word	0x08004f05
 8004f30:	08004f05 	.word	0x08004f05
 8004f34:	08004f89 	.word	0x08004f89
 8004f38:	08004f05 	.word	0x08004f05
 8004f3c:	08004f05 	.word	0x08004f05
 8004f40:	08004f05 	.word	0x08004f05
 8004f44:	08004f05 	.word	0x08004f05
 8004f48:	08005095 	.word	0x08005095
 8004f4c:	08004fb9 	.word	0x08004fb9
 8004f50:	08005077 	.word	0x08005077
 8004f54:	08004f05 	.word	0x08004f05
 8004f58:	08004f05 	.word	0x08004f05
 8004f5c:	080050b7 	.word	0x080050b7
 8004f60:	08004f05 	.word	0x08004f05
 8004f64:	08004fb9 	.word	0x08004fb9
 8004f68:	08004f05 	.word	0x08004f05
 8004f6c:	08004f05 	.word	0x08004f05
 8004f70:	0800507f 	.word	0x0800507f
 8004f74:	680b      	ldr	r3, [r1, #0]
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	600a      	str	r2, [r1, #0]
 8004f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0a3      	b.n	80050d0 <_printf_i+0x1f4>
 8004f88:	6825      	ldr	r5, [r4, #0]
 8004f8a:	6808      	ldr	r0, [r1, #0]
 8004f8c:	062e      	lsls	r6, r5, #24
 8004f8e:	f100 0304 	add.w	r3, r0, #4
 8004f92:	d50a      	bpl.n	8004faa <_printf_i+0xce>
 8004f94:	6805      	ldr	r5, [r0, #0]
 8004f96:	600b      	str	r3, [r1, #0]
 8004f98:	2d00      	cmp	r5, #0
 8004f9a:	da03      	bge.n	8004fa4 <_printf_i+0xc8>
 8004f9c:	232d      	movs	r3, #45	; 0x2d
 8004f9e:	426d      	negs	r5, r5
 8004fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa4:	485e      	ldr	r0, [pc, #376]	; (8005120 <_printf_i+0x244>)
 8004fa6:	230a      	movs	r3, #10
 8004fa8:	e019      	b.n	8004fde <_printf_i+0x102>
 8004faa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fae:	6805      	ldr	r5, [r0, #0]
 8004fb0:	600b      	str	r3, [r1, #0]
 8004fb2:	bf18      	it	ne
 8004fb4:	b22d      	sxthne	r5, r5
 8004fb6:	e7ef      	b.n	8004f98 <_printf_i+0xbc>
 8004fb8:	680b      	ldr	r3, [r1, #0]
 8004fba:	6825      	ldr	r5, [r4, #0]
 8004fbc:	1d18      	adds	r0, r3, #4
 8004fbe:	6008      	str	r0, [r1, #0]
 8004fc0:	0628      	lsls	r0, r5, #24
 8004fc2:	d501      	bpl.n	8004fc8 <_printf_i+0xec>
 8004fc4:	681d      	ldr	r5, [r3, #0]
 8004fc6:	e002      	b.n	8004fce <_printf_i+0xf2>
 8004fc8:	0669      	lsls	r1, r5, #25
 8004fca:	d5fb      	bpl.n	8004fc4 <_printf_i+0xe8>
 8004fcc:	881d      	ldrh	r5, [r3, #0]
 8004fce:	4854      	ldr	r0, [pc, #336]	; (8005120 <_printf_i+0x244>)
 8004fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2308      	moveq	r3, #8
 8004fd6:	230a      	movne	r3, #10
 8004fd8:	2100      	movs	r1, #0
 8004fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fde:	6866      	ldr	r6, [r4, #4]
 8004fe0:	60a6      	str	r6, [r4, #8]
 8004fe2:	2e00      	cmp	r6, #0
 8004fe4:	bfa2      	ittt	ge
 8004fe6:	6821      	ldrge	r1, [r4, #0]
 8004fe8:	f021 0104 	bicge.w	r1, r1, #4
 8004fec:	6021      	strge	r1, [r4, #0]
 8004fee:	b90d      	cbnz	r5, 8004ff4 <_printf_i+0x118>
 8004ff0:	2e00      	cmp	r6, #0
 8004ff2:	d04d      	beq.n	8005090 <_printf_i+0x1b4>
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8004ffe:	5dc7      	ldrb	r7, [r0, r7]
 8005000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005004:	462f      	mov	r7, r5
 8005006:	42bb      	cmp	r3, r7
 8005008:	460d      	mov	r5, r1
 800500a:	d9f4      	bls.n	8004ff6 <_printf_i+0x11a>
 800500c:	2b08      	cmp	r3, #8
 800500e:	d10b      	bne.n	8005028 <_printf_i+0x14c>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	07df      	lsls	r7, r3, #31
 8005014:	d508      	bpl.n	8005028 <_printf_i+0x14c>
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	6861      	ldr	r1, [r4, #4]
 800501a:	4299      	cmp	r1, r3
 800501c:	bfde      	ittt	le
 800501e:	2330      	movle	r3, #48	; 0x30
 8005020:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005024:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005028:	1b92      	subs	r2, r2, r6
 800502a:	6122      	str	r2, [r4, #16]
 800502c:	f8cd a000 	str.w	sl, [sp]
 8005030:	464b      	mov	r3, r9
 8005032:	aa03      	add	r2, sp, #12
 8005034:	4621      	mov	r1, r4
 8005036:	4640      	mov	r0, r8
 8005038:	f7ff fee2 	bl	8004e00 <_printf_common>
 800503c:	3001      	adds	r0, #1
 800503e:	d14c      	bne.n	80050da <_printf_i+0x1fe>
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	b004      	add	sp, #16
 8005046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504a:	4835      	ldr	r0, [pc, #212]	; (8005120 <_printf_i+0x244>)
 800504c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	680e      	ldr	r6, [r1, #0]
 8005054:	061f      	lsls	r7, r3, #24
 8005056:	f856 5b04 	ldr.w	r5, [r6], #4
 800505a:	600e      	str	r6, [r1, #0]
 800505c:	d514      	bpl.n	8005088 <_printf_i+0x1ac>
 800505e:	07d9      	lsls	r1, r3, #31
 8005060:	bf44      	itt	mi
 8005062:	f043 0320 	orrmi.w	r3, r3, #32
 8005066:	6023      	strmi	r3, [r4, #0]
 8005068:	b91d      	cbnz	r5, 8005072 <_printf_i+0x196>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f023 0320 	bic.w	r3, r3, #32
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	2310      	movs	r3, #16
 8005074:	e7b0      	b.n	8004fd8 <_printf_i+0xfc>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	f043 0320 	orr.w	r3, r3, #32
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	2378      	movs	r3, #120	; 0x78
 8005080:	4828      	ldr	r0, [pc, #160]	; (8005124 <_printf_i+0x248>)
 8005082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005086:	e7e3      	b.n	8005050 <_printf_i+0x174>
 8005088:	065e      	lsls	r6, r3, #25
 800508a:	bf48      	it	mi
 800508c:	b2ad      	uxthmi	r5, r5
 800508e:	e7e6      	b.n	800505e <_printf_i+0x182>
 8005090:	4616      	mov	r6, r2
 8005092:	e7bb      	b.n	800500c <_printf_i+0x130>
 8005094:	680b      	ldr	r3, [r1, #0]
 8005096:	6826      	ldr	r6, [r4, #0]
 8005098:	6960      	ldr	r0, [r4, #20]
 800509a:	1d1d      	adds	r5, r3, #4
 800509c:	600d      	str	r5, [r1, #0]
 800509e:	0635      	lsls	r5, r6, #24
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	d501      	bpl.n	80050a8 <_printf_i+0x1cc>
 80050a4:	6018      	str	r0, [r3, #0]
 80050a6:	e002      	b.n	80050ae <_printf_i+0x1d2>
 80050a8:	0671      	lsls	r1, r6, #25
 80050aa:	d5fb      	bpl.n	80050a4 <_printf_i+0x1c8>
 80050ac:	8018      	strh	r0, [r3, #0]
 80050ae:	2300      	movs	r3, #0
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	4616      	mov	r6, r2
 80050b4:	e7ba      	b.n	800502c <_printf_i+0x150>
 80050b6:	680b      	ldr	r3, [r1, #0]
 80050b8:	1d1a      	adds	r2, r3, #4
 80050ba:	600a      	str	r2, [r1, #0]
 80050bc:	681e      	ldr	r6, [r3, #0]
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	2100      	movs	r1, #0
 80050c2:	4630      	mov	r0, r6
 80050c4:	f7fb f8ac 	bl	8000220 <memchr>
 80050c8:	b108      	cbz	r0, 80050ce <_printf_i+0x1f2>
 80050ca:	1b80      	subs	r0, r0, r6
 80050cc:	6060      	str	r0, [r4, #4]
 80050ce:	6863      	ldr	r3, [r4, #4]
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	2300      	movs	r3, #0
 80050d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d8:	e7a8      	b.n	800502c <_printf_i+0x150>
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	4632      	mov	r2, r6
 80050de:	4649      	mov	r1, r9
 80050e0:	4640      	mov	r0, r8
 80050e2:	47d0      	blx	sl
 80050e4:	3001      	adds	r0, #1
 80050e6:	d0ab      	beq.n	8005040 <_printf_i+0x164>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	079b      	lsls	r3, r3, #30
 80050ec:	d413      	bmi.n	8005116 <_printf_i+0x23a>
 80050ee:	68e0      	ldr	r0, [r4, #12]
 80050f0:	9b03      	ldr	r3, [sp, #12]
 80050f2:	4298      	cmp	r0, r3
 80050f4:	bfb8      	it	lt
 80050f6:	4618      	movlt	r0, r3
 80050f8:	e7a4      	b.n	8005044 <_printf_i+0x168>
 80050fa:	2301      	movs	r3, #1
 80050fc:	4632      	mov	r2, r6
 80050fe:	4649      	mov	r1, r9
 8005100:	4640      	mov	r0, r8
 8005102:	47d0      	blx	sl
 8005104:	3001      	adds	r0, #1
 8005106:	d09b      	beq.n	8005040 <_printf_i+0x164>
 8005108:	3501      	adds	r5, #1
 800510a:	68e3      	ldr	r3, [r4, #12]
 800510c:	9903      	ldr	r1, [sp, #12]
 800510e:	1a5b      	subs	r3, r3, r1
 8005110:	42ab      	cmp	r3, r5
 8005112:	dcf2      	bgt.n	80050fa <_printf_i+0x21e>
 8005114:	e7eb      	b.n	80050ee <_printf_i+0x212>
 8005116:	2500      	movs	r5, #0
 8005118:	f104 0619 	add.w	r6, r4, #25
 800511c:	e7f5      	b.n	800510a <_printf_i+0x22e>
 800511e:	bf00      	nop
 8005120:	08007ad6 	.word	0x08007ad6
 8005124:	08007ae7 	.word	0x08007ae7

08005128 <iprintf>:
 8005128:	b40f      	push	{r0, r1, r2, r3}
 800512a:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <iprintf+0x2c>)
 800512c:	b513      	push	{r0, r1, r4, lr}
 800512e:	681c      	ldr	r4, [r3, #0]
 8005130:	b124      	cbz	r4, 800513c <iprintf+0x14>
 8005132:	69a3      	ldr	r3, [r4, #24]
 8005134:	b913      	cbnz	r3, 800513c <iprintf+0x14>
 8005136:	4620      	mov	r0, r4
 8005138:	f000 fede 	bl	8005ef8 <__sinit>
 800513c:	ab05      	add	r3, sp, #20
 800513e:	9a04      	ldr	r2, [sp, #16]
 8005140:	68a1      	ldr	r1, [r4, #8]
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	4620      	mov	r0, r4
 8005146:	f001 fbf5 	bl	8006934 <_vfiprintf_r>
 800514a:	b002      	add	sp, #8
 800514c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005150:	b004      	add	sp, #16
 8005152:	4770      	bx	lr
 8005154:	200000a4 	.word	0x200000a4

08005158 <quorem>:
 8005158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	6903      	ldr	r3, [r0, #16]
 800515e:	690c      	ldr	r4, [r1, #16]
 8005160:	42a3      	cmp	r3, r4
 8005162:	4607      	mov	r7, r0
 8005164:	f2c0 8081 	blt.w	800526a <quorem+0x112>
 8005168:	3c01      	subs	r4, #1
 800516a:	f101 0814 	add.w	r8, r1, #20
 800516e:	f100 0514 	add.w	r5, r0, #20
 8005172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800517c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005180:	3301      	adds	r3, #1
 8005182:	429a      	cmp	r2, r3
 8005184:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005188:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800518c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005190:	d331      	bcc.n	80051f6 <quorem+0x9e>
 8005192:	f04f 0e00 	mov.w	lr, #0
 8005196:	4640      	mov	r0, r8
 8005198:	46ac      	mov	ip, r5
 800519a:	46f2      	mov	sl, lr
 800519c:	f850 2b04 	ldr.w	r2, [r0], #4
 80051a0:	b293      	uxth	r3, r2
 80051a2:	fb06 e303 	mla	r3, r6, r3, lr
 80051a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	ebaa 0303 	sub.w	r3, sl, r3
 80051b0:	0c12      	lsrs	r2, r2, #16
 80051b2:	f8dc a000 	ldr.w	sl, [ip]
 80051b6:	fb06 e202 	mla	r2, r6, r2, lr
 80051ba:	fa13 f38a 	uxtah	r3, r3, sl
 80051be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051c2:	fa1f fa82 	uxth.w	sl, r2
 80051c6:	f8dc 2000 	ldr.w	r2, [ip]
 80051ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80051ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051d8:	4581      	cmp	r9, r0
 80051da:	f84c 3b04 	str.w	r3, [ip], #4
 80051de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051e2:	d2db      	bcs.n	800519c <quorem+0x44>
 80051e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80051e8:	b92b      	cbnz	r3, 80051f6 <quorem+0x9e>
 80051ea:	9b01      	ldr	r3, [sp, #4]
 80051ec:	3b04      	subs	r3, #4
 80051ee:	429d      	cmp	r5, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	d32e      	bcc.n	8005252 <quorem+0xfa>
 80051f4:	613c      	str	r4, [r7, #16]
 80051f6:	4638      	mov	r0, r7
 80051f8:	f001 f9b8 	bl	800656c <__mcmp>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	db24      	blt.n	800524a <quorem+0xf2>
 8005200:	3601      	adds	r6, #1
 8005202:	4628      	mov	r0, r5
 8005204:	f04f 0c00 	mov.w	ip, #0
 8005208:	f858 2b04 	ldr.w	r2, [r8], #4
 800520c:	f8d0 e000 	ldr.w	lr, [r0]
 8005210:	b293      	uxth	r3, r2
 8005212:	ebac 0303 	sub.w	r3, ip, r3
 8005216:	0c12      	lsrs	r2, r2, #16
 8005218:	fa13 f38e 	uxtah	r3, r3, lr
 800521c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005224:	b29b      	uxth	r3, r3
 8005226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800522a:	45c1      	cmp	r9, r8
 800522c:	f840 3b04 	str.w	r3, [r0], #4
 8005230:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005234:	d2e8      	bcs.n	8005208 <quorem+0xb0>
 8005236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800523a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800523e:	b922      	cbnz	r2, 800524a <quorem+0xf2>
 8005240:	3b04      	subs	r3, #4
 8005242:	429d      	cmp	r5, r3
 8005244:	461a      	mov	r2, r3
 8005246:	d30a      	bcc.n	800525e <quorem+0x106>
 8005248:	613c      	str	r4, [r7, #16]
 800524a:	4630      	mov	r0, r6
 800524c:	b003      	add	sp, #12
 800524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	3b04      	subs	r3, #4
 8005256:	2a00      	cmp	r2, #0
 8005258:	d1cc      	bne.n	80051f4 <quorem+0x9c>
 800525a:	3c01      	subs	r4, #1
 800525c:	e7c7      	b.n	80051ee <quorem+0x96>
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	3b04      	subs	r3, #4
 8005262:	2a00      	cmp	r2, #0
 8005264:	d1f0      	bne.n	8005248 <quorem+0xf0>
 8005266:	3c01      	subs	r4, #1
 8005268:	e7eb      	b.n	8005242 <quorem+0xea>
 800526a:	2000      	movs	r0, #0
 800526c:	e7ee      	b.n	800524c <quorem+0xf4>
	...

08005270 <_dtoa_r>:
 8005270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005274:	ed2d 8b02 	vpush	{d8}
 8005278:	ec57 6b10 	vmov	r6, r7, d0
 800527c:	b095      	sub	sp, #84	; 0x54
 800527e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005284:	9105      	str	r1, [sp, #20]
 8005286:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800528a:	4604      	mov	r4, r0
 800528c:	9209      	str	r2, [sp, #36]	; 0x24
 800528e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005290:	b975      	cbnz	r5, 80052b0 <_dtoa_r+0x40>
 8005292:	2010      	movs	r0, #16
 8005294:	f000 fed6 	bl	8006044 <malloc>
 8005298:	4602      	mov	r2, r0
 800529a:	6260      	str	r0, [r4, #36]	; 0x24
 800529c:	b920      	cbnz	r0, 80052a8 <_dtoa_r+0x38>
 800529e:	4bb2      	ldr	r3, [pc, #712]	; (8005568 <_dtoa_r+0x2f8>)
 80052a0:	21ea      	movs	r1, #234	; 0xea
 80052a2:	48b2      	ldr	r0, [pc, #712]	; (800556c <_dtoa_r+0x2fc>)
 80052a4:	f001 fd9c 	bl	8006de0 <__assert_func>
 80052a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052ac:	6005      	str	r5, [r0, #0]
 80052ae:	60c5      	str	r5, [r0, #12]
 80052b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	b151      	cbz	r1, 80052cc <_dtoa_r+0x5c>
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	604a      	str	r2, [r1, #4]
 80052ba:	2301      	movs	r3, #1
 80052bc:	4093      	lsls	r3, r2
 80052be:	608b      	str	r3, [r1, #8]
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 ff15 	bl	80060f0 <_Bfree>
 80052c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	1e3b      	subs	r3, r7, #0
 80052ce:	bfb9      	ittee	lt
 80052d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052d4:	9303      	strlt	r3, [sp, #12]
 80052d6:	2300      	movge	r3, #0
 80052d8:	f8c8 3000 	strge.w	r3, [r8]
 80052dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80052e0:	4ba3      	ldr	r3, [pc, #652]	; (8005570 <_dtoa_r+0x300>)
 80052e2:	bfbc      	itt	lt
 80052e4:	2201      	movlt	r2, #1
 80052e6:	f8c8 2000 	strlt.w	r2, [r8]
 80052ea:	ea33 0309 	bics.w	r3, r3, r9
 80052ee:	d11b      	bne.n	8005328 <_dtoa_r+0xb8>
 80052f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052fc:	4333      	orrs	r3, r6
 80052fe:	f000 857a 	beq.w	8005df6 <_dtoa_r+0xb86>
 8005302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005304:	b963      	cbnz	r3, 8005320 <_dtoa_r+0xb0>
 8005306:	4b9b      	ldr	r3, [pc, #620]	; (8005574 <_dtoa_r+0x304>)
 8005308:	e024      	b.n	8005354 <_dtoa_r+0xe4>
 800530a:	4b9b      	ldr	r3, [pc, #620]	; (8005578 <_dtoa_r+0x308>)
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	3308      	adds	r3, #8
 8005310:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	9800      	ldr	r0, [sp, #0]
 8005316:	b015      	add	sp, #84	; 0x54
 8005318:	ecbd 8b02 	vpop	{d8}
 800531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005320:	4b94      	ldr	r3, [pc, #592]	; (8005574 <_dtoa_r+0x304>)
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	3303      	adds	r3, #3
 8005326:	e7f3      	b.n	8005310 <_dtoa_r+0xa0>
 8005328:	ed9d 7b02 	vldr	d7, [sp, #8]
 800532c:	2200      	movs	r2, #0
 800532e:	ec51 0b17 	vmov	r0, r1, d7
 8005332:	2300      	movs	r3, #0
 8005334:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005338:	f7fb fbe6 	bl	8000b08 <__aeabi_dcmpeq>
 800533c:	4680      	mov	r8, r0
 800533e:	b158      	cbz	r0, 8005358 <_dtoa_r+0xe8>
 8005340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005342:	2301      	movs	r3, #1
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8551 	beq.w	8005df0 <_dtoa_r+0xb80>
 800534e:	488b      	ldr	r0, [pc, #556]	; (800557c <_dtoa_r+0x30c>)
 8005350:	6018      	str	r0, [r3, #0]
 8005352:	1e43      	subs	r3, r0, #1
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	e7dd      	b.n	8005314 <_dtoa_r+0xa4>
 8005358:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800535c:	aa12      	add	r2, sp, #72	; 0x48
 800535e:	a913      	add	r1, sp, #76	; 0x4c
 8005360:	4620      	mov	r0, r4
 8005362:	f001 f9a7 	bl	80066b4 <__d2b>
 8005366:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800536a:	4683      	mov	fp, r0
 800536c:	2d00      	cmp	r5, #0
 800536e:	d07c      	beq.n	800546a <_dtoa_r+0x1fa>
 8005370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005372:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800537a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800537e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800538a:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <_dtoa_r+0x310>)
 800538c:	2200      	movs	r2, #0
 800538e:	4630      	mov	r0, r6
 8005390:	4639      	mov	r1, r7
 8005392:	f7fa ff99 	bl	80002c8 <__aeabi_dsub>
 8005396:	a36e      	add	r3, pc, #440	; (adr r3, 8005550 <_dtoa_r+0x2e0>)
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f7fb f94c 	bl	8000638 <__aeabi_dmul>
 80053a0:	a36d      	add	r3, pc, #436	; (adr r3, 8005558 <_dtoa_r+0x2e8>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fa ff91 	bl	80002cc <__adddf3>
 80053aa:	4606      	mov	r6, r0
 80053ac:	4628      	mov	r0, r5
 80053ae:	460f      	mov	r7, r1
 80053b0:	f7fb f8d8 	bl	8000564 <__aeabi_i2d>
 80053b4:	a36a      	add	r3, pc, #424	; (adr r3, 8005560 <_dtoa_r+0x2f0>)
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f7fb f93d 	bl	8000638 <__aeabi_dmul>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4630      	mov	r0, r6
 80053c4:	4639      	mov	r1, r7
 80053c6:	f7fa ff81 	bl	80002cc <__adddf3>
 80053ca:	4606      	mov	r6, r0
 80053cc:	460f      	mov	r7, r1
 80053ce:	f7fb fbe3 	bl	8000b98 <__aeabi_d2iz>
 80053d2:	2200      	movs	r2, #0
 80053d4:	4682      	mov	sl, r0
 80053d6:	2300      	movs	r3, #0
 80053d8:	4630      	mov	r0, r6
 80053da:	4639      	mov	r1, r7
 80053dc:	f7fb fb9e 	bl	8000b1c <__aeabi_dcmplt>
 80053e0:	b148      	cbz	r0, 80053f6 <_dtoa_r+0x186>
 80053e2:	4650      	mov	r0, sl
 80053e4:	f7fb f8be 	bl	8000564 <__aeabi_i2d>
 80053e8:	4632      	mov	r2, r6
 80053ea:	463b      	mov	r3, r7
 80053ec:	f7fb fb8c 	bl	8000b08 <__aeabi_dcmpeq>
 80053f0:	b908      	cbnz	r0, 80053f6 <_dtoa_r+0x186>
 80053f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053f6:	f1ba 0f16 	cmp.w	sl, #22
 80053fa:	d854      	bhi.n	80054a6 <_dtoa_r+0x236>
 80053fc:	4b61      	ldr	r3, [pc, #388]	; (8005584 <_dtoa_r+0x314>)
 80053fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800540a:	f7fb fb87 	bl	8000b1c <__aeabi_dcmplt>
 800540e:	2800      	cmp	r0, #0
 8005410:	d04b      	beq.n	80054aa <_dtoa_r+0x23a>
 8005412:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005416:	2300      	movs	r3, #0
 8005418:	930e      	str	r3, [sp, #56]	; 0x38
 800541a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800541c:	1b5d      	subs	r5, r3, r5
 800541e:	1e6b      	subs	r3, r5, #1
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	bf43      	ittte	mi
 8005424:	2300      	movmi	r3, #0
 8005426:	f1c5 0801 	rsbmi	r8, r5, #1
 800542a:	9304      	strmi	r3, [sp, #16]
 800542c:	f04f 0800 	movpl.w	r8, #0
 8005430:	f1ba 0f00 	cmp.w	sl, #0
 8005434:	db3b      	blt.n	80054ae <_dtoa_r+0x23e>
 8005436:	9b04      	ldr	r3, [sp, #16]
 8005438:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800543c:	4453      	add	r3, sl
 800543e:	9304      	str	r3, [sp, #16]
 8005440:	2300      	movs	r3, #0
 8005442:	9306      	str	r3, [sp, #24]
 8005444:	9b05      	ldr	r3, [sp, #20]
 8005446:	2b09      	cmp	r3, #9
 8005448:	d869      	bhi.n	800551e <_dtoa_r+0x2ae>
 800544a:	2b05      	cmp	r3, #5
 800544c:	bfc4      	itt	gt
 800544e:	3b04      	subgt	r3, #4
 8005450:	9305      	strgt	r3, [sp, #20]
 8005452:	9b05      	ldr	r3, [sp, #20]
 8005454:	f1a3 0302 	sub.w	r3, r3, #2
 8005458:	bfcc      	ite	gt
 800545a:	2500      	movgt	r5, #0
 800545c:	2501      	movle	r5, #1
 800545e:	2b03      	cmp	r3, #3
 8005460:	d869      	bhi.n	8005536 <_dtoa_r+0x2c6>
 8005462:	e8df f003 	tbb	[pc, r3]
 8005466:	4e2c      	.short	0x4e2c
 8005468:	5a4c      	.short	0x5a4c
 800546a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800546e:	441d      	add	r5, r3
 8005470:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005474:	2b20      	cmp	r3, #32
 8005476:	bfc1      	itttt	gt
 8005478:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800547c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005480:	fa09 f303 	lslgt.w	r3, r9, r3
 8005484:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005488:	bfda      	itte	le
 800548a:	f1c3 0320 	rsble	r3, r3, #32
 800548e:	fa06 f003 	lslle.w	r0, r6, r3
 8005492:	4318      	orrgt	r0, r3
 8005494:	f7fb f856 	bl	8000544 <__aeabi_ui2d>
 8005498:	2301      	movs	r3, #1
 800549a:	4606      	mov	r6, r0
 800549c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80054a0:	3d01      	subs	r5, #1
 80054a2:	9310      	str	r3, [sp, #64]	; 0x40
 80054a4:	e771      	b.n	800538a <_dtoa_r+0x11a>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e7b6      	b.n	8005418 <_dtoa_r+0x1a8>
 80054aa:	900e      	str	r0, [sp, #56]	; 0x38
 80054ac:	e7b5      	b.n	800541a <_dtoa_r+0x1aa>
 80054ae:	f1ca 0300 	rsb	r3, sl, #0
 80054b2:	9306      	str	r3, [sp, #24]
 80054b4:	2300      	movs	r3, #0
 80054b6:	eba8 080a 	sub.w	r8, r8, sl
 80054ba:	930d      	str	r3, [sp, #52]	; 0x34
 80054bc:	e7c2      	b.n	8005444 <_dtoa_r+0x1d4>
 80054be:	2300      	movs	r3, #0
 80054c0:	9308      	str	r3, [sp, #32]
 80054c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	dc39      	bgt.n	800553c <_dtoa_r+0x2cc>
 80054c8:	f04f 0901 	mov.w	r9, #1
 80054cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80054d0:	464b      	mov	r3, r9
 80054d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80054d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80054d8:	2200      	movs	r2, #0
 80054da:	6042      	str	r2, [r0, #4]
 80054dc:	2204      	movs	r2, #4
 80054de:	f102 0614 	add.w	r6, r2, #20
 80054e2:	429e      	cmp	r6, r3
 80054e4:	6841      	ldr	r1, [r0, #4]
 80054e6:	d92f      	bls.n	8005548 <_dtoa_r+0x2d8>
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 fdc1 	bl	8006070 <_Balloc>
 80054ee:	9000      	str	r0, [sp, #0]
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d14b      	bne.n	800558c <_dtoa_r+0x31c>
 80054f4:	4b24      	ldr	r3, [pc, #144]	; (8005588 <_dtoa_r+0x318>)
 80054f6:	4602      	mov	r2, r0
 80054f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054fc:	e6d1      	b.n	80052a2 <_dtoa_r+0x32>
 80054fe:	2301      	movs	r3, #1
 8005500:	e7de      	b.n	80054c0 <_dtoa_r+0x250>
 8005502:	2300      	movs	r3, #0
 8005504:	9308      	str	r3, [sp, #32]
 8005506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005508:	eb0a 0903 	add.w	r9, sl, r3
 800550c:	f109 0301 	add.w	r3, r9, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	bfb8      	it	lt
 8005516:	2301      	movlt	r3, #1
 8005518:	e7dd      	b.n	80054d6 <_dtoa_r+0x266>
 800551a:	2301      	movs	r3, #1
 800551c:	e7f2      	b.n	8005504 <_dtoa_r+0x294>
 800551e:	2501      	movs	r5, #1
 8005520:	2300      	movs	r3, #0
 8005522:	9305      	str	r3, [sp, #20]
 8005524:	9508      	str	r5, [sp, #32]
 8005526:	f04f 39ff 	mov.w	r9, #4294967295
 800552a:	2200      	movs	r2, #0
 800552c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005530:	2312      	movs	r3, #18
 8005532:	9209      	str	r2, [sp, #36]	; 0x24
 8005534:	e7cf      	b.n	80054d6 <_dtoa_r+0x266>
 8005536:	2301      	movs	r3, #1
 8005538:	9308      	str	r3, [sp, #32]
 800553a:	e7f4      	b.n	8005526 <_dtoa_r+0x2b6>
 800553c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005540:	f8cd 9004 	str.w	r9, [sp, #4]
 8005544:	464b      	mov	r3, r9
 8005546:	e7c6      	b.n	80054d6 <_dtoa_r+0x266>
 8005548:	3101      	adds	r1, #1
 800554a:	6041      	str	r1, [r0, #4]
 800554c:	0052      	lsls	r2, r2, #1
 800554e:	e7c6      	b.n	80054de <_dtoa_r+0x26e>
 8005550:	636f4361 	.word	0x636f4361
 8005554:	3fd287a7 	.word	0x3fd287a7
 8005558:	8b60c8b3 	.word	0x8b60c8b3
 800555c:	3fc68a28 	.word	0x3fc68a28
 8005560:	509f79fb 	.word	0x509f79fb
 8005564:	3fd34413 	.word	0x3fd34413
 8005568:	08007b05 	.word	0x08007b05
 800556c:	08007b1c 	.word	0x08007b1c
 8005570:	7ff00000 	.word	0x7ff00000
 8005574:	08007b01 	.word	0x08007b01
 8005578:	08007af8 	.word	0x08007af8
 800557c:	08007ad5 	.word	0x08007ad5
 8005580:	3ff80000 	.word	0x3ff80000
 8005584:	08007c78 	.word	0x08007c78
 8005588:	08007b7b 	.word	0x08007b7b
 800558c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800558e:	9a00      	ldr	r2, [sp, #0]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	9b01      	ldr	r3, [sp, #4]
 8005594:	2b0e      	cmp	r3, #14
 8005596:	f200 80ad 	bhi.w	80056f4 <_dtoa_r+0x484>
 800559a:	2d00      	cmp	r5, #0
 800559c:	f000 80aa 	beq.w	80056f4 <_dtoa_r+0x484>
 80055a0:	f1ba 0f00 	cmp.w	sl, #0
 80055a4:	dd36      	ble.n	8005614 <_dtoa_r+0x3a4>
 80055a6:	4ac3      	ldr	r2, [pc, #780]	; (80058b4 <_dtoa_r+0x644>)
 80055a8:	f00a 030f 	and.w	r3, sl, #15
 80055ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055b0:	ed93 7b00 	vldr	d7, [r3]
 80055b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80055b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80055bc:	eeb0 8a47 	vmov.f32	s16, s14
 80055c0:	eef0 8a67 	vmov.f32	s17, s15
 80055c4:	d016      	beq.n	80055f4 <_dtoa_r+0x384>
 80055c6:	4bbc      	ldr	r3, [pc, #752]	; (80058b8 <_dtoa_r+0x648>)
 80055c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055d0:	f7fb f95c 	bl	800088c <__aeabi_ddiv>
 80055d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055d8:	f007 070f 	and.w	r7, r7, #15
 80055dc:	2503      	movs	r5, #3
 80055de:	4eb6      	ldr	r6, [pc, #728]	; (80058b8 <_dtoa_r+0x648>)
 80055e0:	b957      	cbnz	r7, 80055f8 <_dtoa_r+0x388>
 80055e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055e6:	ec53 2b18 	vmov	r2, r3, d8
 80055ea:	f7fb f94f 	bl	800088c <__aeabi_ddiv>
 80055ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055f2:	e029      	b.n	8005648 <_dtoa_r+0x3d8>
 80055f4:	2502      	movs	r5, #2
 80055f6:	e7f2      	b.n	80055de <_dtoa_r+0x36e>
 80055f8:	07f9      	lsls	r1, r7, #31
 80055fa:	d508      	bpl.n	800560e <_dtoa_r+0x39e>
 80055fc:	ec51 0b18 	vmov	r0, r1, d8
 8005600:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005604:	f7fb f818 	bl	8000638 <__aeabi_dmul>
 8005608:	ec41 0b18 	vmov	d8, r0, r1
 800560c:	3501      	adds	r5, #1
 800560e:	107f      	asrs	r7, r7, #1
 8005610:	3608      	adds	r6, #8
 8005612:	e7e5      	b.n	80055e0 <_dtoa_r+0x370>
 8005614:	f000 80a6 	beq.w	8005764 <_dtoa_r+0x4f4>
 8005618:	f1ca 0600 	rsb	r6, sl, #0
 800561c:	4ba5      	ldr	r3, [pc, #660]	; (80058b4 <_dtoa_r+0x644>)
 800561e:	4fa6      	ldr	r7, [pc, #664]	; (80058b8 <_dtoa_r+0x648>)
 8005620:	f006 020f 	and.w	r2, r6, #15
 8005624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005630:	f7fb f802 	bl	8000638 <__aeabi_dmul>
 8005634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005638:	1136      	asrs	r6, r6, #4
 800563a:	2300      	movs	r3, #0
 800563c:	2502      	movs	r5, #2
 800563e:	2e00      	cmp	r6, #0
 8005640:	f040 8085 	bne.w	800574e <_dtoa_r+0x4de>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1d2      	bne.n	80055ee <_dtoa_r+0x37e>
 8005648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 808c 	beq.w	8005768 <_dtoa_r+0x4f8>
 8005650:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005654:	4b99      	ldr	r3, [pc, #612]	; (80058bc <_dtoa_r+0x64c>)
 8005656:	2200      	movs	r2, #0
 8005658:	4630      	mov	r0, r6
 800565a:	4639      	mov	r1, r7
 800565c:	f7fb fa5e 	bl	8000b1c <__aeabi_dcmplt>
 8005660:	2800      	cmp	r0, #0
 8005662:	f000 8081 	beq.w	8005768 <_dtoa_r+0x4f8>
 8005666:	9b01      	ldr	r3, [sp, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d07d      	beq.n	8005768 <_dtoa_r+0x4f8>
 800566c:	f1b9 0f00 	cmp.w	r9, #0
 8005670:	dd3c      	ble.n	80056ec <_dtoa_r+0x47c>
 8005672:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005676:	9307      	str	r3, [sp, #28]
 8005678:	2200      	movs	r2, #0
 800567a:	4b91      	ldr	r3, [pc, #580]	; (80058c0 <_dtoa_r+0x650>)
 800567c:	4630      	mov	r0, r6
 800567e:	4639      	mov	r1, r7
 8005680:	f7fa ffda 	bl	8000638 <__aeabi_dmul>
 8005684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005688:	3501      	adds	r5, #1
 800568a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800568e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005692:	4628      	mov	r0, r5
 8005694:	f7fa ff66 	bl	8000564 <__aeabi_i2d>
 8005698:	4632      	mov	r2, r6
 800569a:	463b      	mov	r3, r7
 800569c:	f7fa ffcc 	bl	8000638 <__aeabi_dmul>
 80056a0:	4b88      	ldr	r3, [pc, #544]	; (80058c4 <_dtoa_r+0x654>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	f7fa fe12 	bl	80002cc <__adddf3>
 80056a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80056ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b0:	9303      	str	r3, [sp, #12]
 80056b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d15c      	bne.n	8005772 <_dtoa_r+0x502>
 80056b8:	4b83      	ldr	r3, [pc, #524]	; (80058c8 <_dtoa_r+0x658>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	4630      	mov	r0, r6
 80056be:	4639      	mov	r1, r7
 80056c0:	f7fa fe02 	bl	80002c8 <__aeabi_dsub>
 80056c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056c8:	4606      	mov	r6, r0
 80056ca:	460f      	mov	r7, r1
 80056cc:	f7fb fa44 	bl	8000b58 <__aeabi_dcmpgt>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	f040 8296 	bne.w	8005c02 <_dtoa_r+0x992>
 80056d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80056da:	4630      	mov	r0, r6
 80056dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056e0:	4639      	mov	r1, r7
 80056e2:	f7fb fa1b 	bl	8000b1c <__aeabi_dcmplt>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	f040 8288 	bne.w	8005bfc <_dtoa_r+0x98c>
 80056ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f2c0 8158 	blt.w	80059ac <_dtoa_r+0x73c>
 80056fc:	f1ba 0f0e 	cmp.w	sl, #14
 8005700:	f300 8154 	bgt.w	80059ac <_dtoa_r+0x73c>
 8005704:	4b6b      	ldr	r3, [pc, #428]	; (80058b4 <_dtoa_r+0x644>)
 8005706:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800570a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800570e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005710:	2b00      	cmp	r3, #0
 8005712:	f280 80e3 	bge.w	80058dc <_dtoa_r+0x66c>
 8005716:	9b01      	ldr	r3, [sp, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f300 80df 	bgt.w	80058dc <_dtoa_r+0x66c>
 800571e:	f040 826d 	bne.w	8005bfc <_dtoa_r+0x98c>
 8005722:	4b69      	ldr	r3, [pc, #420]	; (80058c8 <_dtoa_r+0x658>)
 8005724:	2200      	movs	r2, #0
 8005726:	4640      	mov	r0, r8
 8005728:	4649      	mov	r1, r9
 800572a:	f7fa ff85 	bl	8000638 <__aeabi_dmul>
 800572e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005732:	f7fb fa07 	bl	8000b44 <__aeabi_dcmpge>
 8005736:	9e01      	ldr	r6, [sp, #4]
 8005738:	4637      	mov	r7, r6
 800573a:	2800      	cmp	r0, #0
 800573c:	f040 8243 	bne.w	8005bc6 <_dtoa_r+0x956>
 8005740:	9d00      	ldr	r5, [sp, #0]
 8005742:	2331      	movs	r3, #49	; 0x31
 8005744:	f805 3b01 	strb.w	r3, [r5], #1
 8005748:	f10a 0a01 	add.w	sl, sl, #1
 800574c:	e23f      	b.n	8005bce <_dtoa_r+0x95e>
 800574e:	07f2      	lsls	r2, r6, #31
 8005750:	d505      	bpl.n	800575e <_dtoa_r+0x4ee>
 8005752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005756:	f7fa ff6f 	bl	8000638 <__aeabi_dmul>
 800575a:	3501      	adds	r5, #1
 800575c:	2301      	movs	r3, #1
 800575e:	1076      	asrs	r6, r6, #1
 8005760:	3708      	adds	r7, #8
 8005762:	e76c      	b.n	800563e <_dtoa_r+0x3ce>
 8005764:	2502      	movs	r5, #2
 8005766:	e76f      	b.n	8005648 <_dtoa_r+0x3d8>
 8005768:	9b01      	ldr	r3, [sp, #4]
 800576a:	f8cd a01c 	str.w	sl, [sp, #28]
 800576e:	930c      	str	r3, [sp, #48]	; 0x30
 8005770:	e78d      	b.n	800568e <_dtoa_r+0x41e>
 8005772:	9900      	ldr	r1, [sp, #0]
 8005774:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005778:	4b4e      	ldr	r3, [pc, #312]	; (80058b4 <_dtoa_r+0x644>)
 800577a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800577e:	4401      	add	r1, r0
 8005780:	9102      	str	r1, [sp, #8]
 8005782:	9908      	ldr	r1, [sp, #32]
 8005784:	eeb0 8a47 	vmov.f32	s16, s14
 8005788:	eef0 8a67 	vmov.f32	s17, s15
 800578c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005790:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005794:	2900      	cmp	r1, #0
 8005796:	d045      	beq.n	8005824 <_dtoa_r+0x5b4>
 8005798:	494c      	ldr	r1, [pc, #304]	; (80058cc <_dtoa_r+0x65c>)
 800579a:	2000      	movs	r0, #0
 800579c:	f7fb f876 	bl	800088c <__aeabi_ddiv>
 80057a0:	ec53 2b18 	vmov	r2, r3, d8
 80057a4:	f7fa fd90 	bl	80002c8 <__aeabi_dsub>
 80057a8:	9d00      	ldr	r5, [sp, #0]
 80057aa:	ec41 0b18 	vmov	d8, r0, r1
 80057ae:	4639      	mov	r1, r7
 80057b0:	4630      	mov	r0, r6
 80057b2:	f7fb f9f1 	bl	8000b98 <__aeabi_d2iz>
 80057b6:	900c      	str	r0, [sp, #48]	; 0x30
 80057b8:	f7fa fed4 	bl	8000564 <__aeabi_i2d>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4630      	mov	r0, r6
 80057c2:	4639      	mov	r1, r7
 80057c4:	f7fa fd80 	bl	80002c8 <__aeabi_dsub>
 80057c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057ca:	3330      	adds	r3, #48	; 0x30
 80057cc:	f805 3b01 	strb.w	r3, [r5], #1
 80057d0:	ec53 2b18 	vmov	r2, r3, d8
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	f7fb f9a0 	bl	8000b1c <__aeabi_dcmplt>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d165      	bne.n	80058ac <_dtoa_r+0x63c>
 80057e0:	4632      	mov	r2, r6
 80057e2:	463b      	mov	r3, r7
 80057e4:	4935      	ldr	r1, [pc, #212]	; (80058bc <_dtoa_r+0x64c>)
 80057e6:	2000      	movs	r0, #0
 80057e8:	f7fa fd6e 	bl	80002c8 <__aeabi_dsub>
 80057ec:	ec53 2b18 	vmov	r2, r3, d8
 80057f0:	f7fb f994 	bl	8000b1c <__aeabi_dcmplt>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	f040 80b9 	bne.w	800596c <_dtoa_r+0x6fc>
 80057fa:	9b02      	ldr	r3, [sp, #8]
 80057fc:	429d      	cmp	r5, r3
 80057fe:	f43f af75 	beq.w	80056ec <_dtoa_r+0x47c>
 8005802:	4b2f      	ldr	r3, [pc, #188]	; (80058c0 <_dtoa_r+0x650>)
 8005804:	ec51 0b18 	vmov	r0, r1, d8
 8005808:	2200      	movs	r2, #0
 800580a:	f7fa ff15 	bl	8000638 <__aeabi_dmul>
 800580e:	4b2c      	ldr	r3, [pc, #176]	; (80058c0 <_dtoa_r+0x650>)
 8005810:	ec41 0b18 	vmov	d8, r0, r1
 8005814:	2200      	movs	r2, #0
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	f7fa ff0d 	bl	8000638 <__aeabi_dmul>
 800581e:	4606      	mov	r6, r0
 8005820:	460f      	mov	r7, r1
 8005822:	e7c4      	b.n	80057ae <_dtoa_r+0x53e>
 8005824:	ec51 0b17 	vmov	r0, r1, d7
 8005828:	f7fa ff06 	bl	8000638 <__aeabi_dmul>
 800582c:	9b02      	ldr	r3, [sp, #8]
 800582e:	9d00      	ldr	r5, [sp, #0]
 8005830:	930c      	str	r3, [sp, #48]	; 0x30
 8005832:	ec41 0b18 	vmov	d8, r0, r1
 8005836:	4639      	mov	r1, r7
 8005838:	4630      	mov	r0, r6
 800583a:	f7fb f9ad 	bl	8000b98 <__aeabi_d2iz>
 800583e:	9011      	str	r0, [sp, #68]	; 0x44
 8005840:	f7fa fe90 	bl	8000564 <__aeabi_i2d>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4630      	mov	r0, r6
 800584a:	4639      	mov	r1, r7
 800584c:	f7fa fd3c 	bl	80002c8 <__aeabi_dsub>
 8005850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005852:	3330      	adds	r3, #48	; 0x30
 8005854:	f805 3b01 	strb.w	r3, [r5], #1
 8005858:	9b02      	ldr	r3, [sp, #8]
 800585a:	429d      	cmp	r5, r3
 800585c:	4606      	mov	r6, r0
 800585e:	460f      	mov	r7, r1
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	d134      	bne.n	80058d0 <_dtoa_r+0x660>
 8005866:	4b19      	ldr	r3, [pc, #100]	; (80058cc <_dtoa_r+0x65c>)
 8005868:	ec51 0b18 	vmov	r0, r1, d8
 800586c:	f7fa fd2e 	bl	80002cc <__adddf3>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4630      	mov	r0, r6
 8005876:	4639      	mov	r1, r7
 8005878:	f7fb f96e 	bl	8000b58 <__aeabi_dcmpgt>
 800587c:	2800      	cmp	r0, #0
 800587e:	d175      	bne.n	800596c <_dtoa_r+0x6fc>
 8005880:	ec53 2b18 	vmov	r2, r3, d8
 8005884:	4911      	ldr	r1, [pc, #68]	; (80058cc <_dtoa_r+0x65c>)
 8005886:	2000      	movs	r0, #0
 8005888:	f7fa fd1e 	bl	80002c8 <__aeabi_dsub>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4630      	mov	r0, r6
 8005892:	4639      	mov	r1, r7
 8005894:	f7fb f942 	bl	8000b1c <__aeabi_dcmplt>
 8005898:	2800      	cmp	r0, #0
 800589a:	f43f af27 	beq.w	80056ec <_dtoa_r+0x47c>
 800589e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058a0:	1e6b      	subs	r3, r5, #1
 80058a2:	930c      	str	r3, [sp, #48]	; 0x30
 80058a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058a8:	2b30      	cmp	r3, #48	; 0x30
 80058aa:	d0f8      	beq.n	800589e <_dtoa_r+0x62e>
 80058ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80058b0:	e04a      	b.n	8005948 <_dtoa_r+0x6d8>
 80058b2:	bf00      	nop
 80058b4:	08007c78 	.word	0x08007c78
 80058b8:	08007c50 	.word	0x08007c50
 80058bc:	3ff00000 	.word	0x3ff00000
 80058c0:	40240000 	.word	0x40240000
 80058c4:	401c0000 	.word	0x401c0000
 80058c8:	40140000 	.word	0x40140000
 80058cc:	3fe00000 	.word	0x3fe00000
 80058d0:	4baf      	ldr	r3, [pc, #700]	; (8005b90 <_dtoa_r+0x920>)
 80058d2:	f7fa feb1 	bl	8000638 <__aeabi_dmul>
 80058d6:	4606      	mov	r6, r0
 80058d8:	460f      	mov	r7, r1
 80058da:	e7ac      	b.n	8005836 <_dtoa_r+0x5c6>
 80058dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058e0:	9d00      	ldr	r5, [sp, #0]
 80058e2:	4642      	mov	r2, r8
 80058e4:	464b      	mov	r3, r9
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fa ffcf 	bl	800088c <__aeabi_ddiv>
 80058ee:	f7fb f953 	bl	8000b98 <__aeabi_d2iz>
 80058f2:	9002      	str	r0, [sp, #8]
 80058f4:	f7fa fe36 	bl	8000564 <__aeabi_i2d>
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	f7fa fe9c 	bl	8000638 <__aeabi_dmul>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4630      	mov	r0, r6
 8005906:	4639      	mov	r1, r7
 8005908:	f7fa fcde 	bl	80002c8 <__aeabi_dsub>
 800590c:	9e02      	ldr	r6, [sp, #8]
 800590e:	9f01      	ldr	r7, [sp, #4]
 8005910:	3630      	adds	r6, #48	; 0x30
 8005912:	f805 6b01 	strb.w	r6, [r5], #1
 8005916:	9e00      	ldr	r6, [sp, #0]
 8005918:	1bae      	subs	r6, r5, r6
 800591a:	42b7      	cmp	r7, r6
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	d137      	bne.n	8005992 <_dtoa_r+0x722>
 8005922:	f7fa fcd3 	bl	80002cc <__adddf3>
 8005926:	4642      	mov	r2, r8
 8005928:	464b      	mov	r3, r9
 800592a:	4606      	mov	r6, r0
 800592c:	460f      	mov	r7, r1
 800592e:	f7fb f913 	bl	8000b58 <__aeabi_dcmpgt>
 8005932:	b9c8      	cbnz	r0, 8005968 <_dtoa_r+0x6f8>
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	4630      	mov	r0, r6
 800593a:	4639      	mov	r1, r7
 800593c:	f7fb f8e4 	bl	8000b08 <__aeabi_dcmpeq>
 8005940:	b110      	cbz	r0, 8005948 <_dtoa_r+0x6d8>
 8005942:	9b02      	ldr	r3, [sp, #8]
 8005944:	07d9      	lsls	r1, r3, #31
 8005946:	d40f      	bmi.n	8005968 <_dtoa_r+0x6f8>
 8005948:	4620      	mov	r0, r4
 800594a:	4659      	mov	r1, fp
 800594c:	f000 fbd0 	bl	80060f0 <_Bfree>
 8005950:	2300      	movs	r3, #0
 8005952:	702b      	strb	r3, [r5, #0]
 8005954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005956:	f10a 0001 	add.w	r0, sl, #1
 800595a:	6018      	str	r0, [r3, #0]
 800595c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800595e:	2b00      	cmp	r3, #0
 8005960:	f43f acd8 	beq.w	8005314 <_dtoa_r+0xa4>
 8005964:	601d      	str	r5, [r3, #0]
 8005966:	e4d5      	b.n	8005314 <_dtoa_r+0xa4>
 8005968:	f8cd a01c 	str.w	sl, [sp, #28]
 800596c:	462b      	mov	r3, r5
 800596e:	461d      	mov	r5, r3
 8005970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005974:	2a39      	cmp	r2, #57	; 0x39
 8005976:	d108      	bne.n	800598a <_dtoa_r+0x71a>
 8005978:	9a00      	ldr	r2, [sp, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d1f7      	bne.n	800596e <_dtoa_r+0x6fe>
 800597e:	9a07      	ldr	r2, [sp, #28]
 8005980:	9900      	ldr	r1, [sp, #0]
 8005982:	3201      	adds	r2, #1
 8005984:	9207      	str	r2, [sp, #28]
 8005986:	2230      	movs	r2, #48	; 0x30
 8005988:	700a      	strb	r2, [r1, #0]
 800598a:	781a      	ldrb	r2, [r3, #0]
 800598c:	3201      	adds	r2, #1
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	e78c      	b.n	80058ac <_dtoa_r+0x63c>
 8005992:	4b7f      	ldr	r3, [pc, #508]	; (8005b90 <_dtoa_r+0x920>)
 8005994:	2200      	movs	r2, #0
 8005996:	f7fa fe4f 	bl	8000638 <__aeabi_dmul>
 800599a:	2200      	movs	r2, #0
 800599c:	2300      	movs	r3, #0
 800599e:	4606      	mov	r6, r0
 80059a0:	460f      	mov	r7, r1
 80059a2:	f7fb f8b1 	bl	8000b08 <__aeabi_dcmpeq>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d09b      	beq.n	80058e2 <_dtoa_r+0x672>
 80059aa:	e7cd      	b.n	8005948 <_dtoa_r+0x6d8>
 80059ac:	9a08      	ldr	r2, [sp, #32]
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	f000 80c4 	beq.w	8005b3c <_dtoa_r+0x8cc>
 80059b4:	9a05      	ldr	r2, [sp, #20]
 80059b6:	2a01      	cmp	r2, #1
 80059b8:	f300 80a8 	bgt.w	8005b0c <_dtoa_r+0x89c>
 80059bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059be:	2a00      	cmp	r2, #0
 80059c0:	f000 80a0 	beq.w	8005b04 <_dtoa_r+0x894>
 80059c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059c8:	9e06      	ldr	r6, [sp, #24]
 80059ca:	4645      	mov	r5, r8
 80059cc:	9a04      	ldr	r2, [sp, #16]
 80059ce:	2101      	movs	r1, #1
 80059d0:	441a      	add	r2, r3
 80059d2:	4620      	mov	r0, r4
 80059d4:	4498      	add	r8, r3
 80059d6:	9204      	str	r2, [sp, #16]
 80059d8:	f000 fc46 	bl	8006268 <__i2b>
 80059dc:	4607      	mov	r7, r0
 80059de:	2d00      	cmp	r5, #0
 80059e0:	dd0b      	ble.n	80059fa <_dtoa_r+0x78a>
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dd08      	ble.n	80059fa <_dtoa_r+0x78a>
 80059e8:	42ab      	cmp	r3, r5
 80059ea:	9a04      	ldr	r2, [sp, #16]
 80059ec:	bfa8      	it	ge
 80059ee:	462b      	movge	r3, r5
 80059f0:	eba8 0803 	sub.w	r8, r8, r3
 80059f4:	1aed      	subs	r5, r5, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	9304      	str	r3, [sp, #16]
 80059fa:	9b06      	ldr	r3, [sp, #24]
 80059fc:	b1fb      	cbz	r3, 8005a3e <_dtoa_r+0x7ce>
 80059fe:	9b08      	ldr	r3, [sp, #32]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 809f 	beq.w	8005b44 <_dtoa_r+0x8d4>
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	dd11      	ble.n	8005a2e <_dtoa_r+0x7be>
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 fce6 	bl	80063e0 <__pow5mult>
 8005a14:	465a      	mov	r2, fp
 8005a16:	4601      	mov	r1, r0
 8005a18:	4607      	mov	r7, r0
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 fc3a 	bl	8006294 <__multiply>
 8005a20:	4659      	mov	r1, fp
 8005a22:	9007      	str	r0, [sp, #28]
 8005a24:	4620      	mov	r0, r4
 8005a26:	f000 fb63 	bl	80060f0 <_Bfree>
 8005a2a:	9b07      	ldr	r3, [sp, #28]
 8005a2c:	469b      	mov	fp, r3
 8005a2e:	9b06      	ldr	r3, [sp, #24]
 8005a30:	1b9a      	subs	r2, r3, r6
 8005a32:	d004      	beq.n	8005a3e <_dtoa_r+0x7ce>
 8005a34:	4659      	mov	r1, fp
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 fcd2 	bl	80063e0 <__pow5mult>
 8005a3c:	4683      	mov	fp, r0
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 fc11 	bl	8006268 <__i2b>
 8005a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	dd7c      	ble.n	8005b48 <_dtoa_r+0x8d8>
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4601      	mov	r1, r0
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 fcc4 	bl	80063e0 <__pow5mult>
 8005a58:	9b05      	ldr	r3, [sp, #20]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	dd76      	ble.n	8005b4e <_dtoa_r+0x8de>
 8005a60:	2300      	movs	r3, #0
 8005a62:	9306      	str	r3, [sp, #24]
 8005a64:	6933      	ldr	r3, [r6, #16]
 8005a66:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a6a:	6918      	ldr	r0, [r3, #16]
 8005a6c:	f000 fbac 	bl	80061c8 <__hi0bits>
 8005a70:	f1c0 0020 	rsb	r0, r0, #32
 8005a74:	9b04      	ldr	r3, [sp, #16]
 8005a76:	4418      	add	r0, r3
 8005a78:	f010 001f 	ands.w	r0, r0, #31
 8005a7c:	f000 8086 	beq.w	8005b8c <_dtoa_r+0x91c>
 8005a80:	f1c0 0320 	rsb	r3, r0, #32
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	dd7f      	ble.n	8005b88 <_dtoa_r+0x918>
 8005a88:	f1c0 001c 	rsb	r0, r0, #28
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	4403      	add	r3, r0
 8005a90:	4480      	add	r8, r0
 8005a92:	4405      	add	r5, r0
 8005a94:	9304      	str	r3, [sp, #16]
 8005a96:	f1b8 0f00 	cmp.w	r8, #0
 8005a9a:	dd05      	ble.n	8005aa8 <_dtoa_r+0x838>
 8005a9c:	4659      	mov	r1, fp
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 fcf7 	bl	8006494 <__lshift>
 8005aa6:	4683      	mov	fp, r0
 8005aa8:	9b04      	ldr	r3, [sp, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dd05      	ble.n	8005aba <_dtoa_r+0x84a>
 8005aae:	4631      	mov	r1, r6
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 fcee 	bl	8006494 <__lshift>
 8005ab8:	4606      	mov	r6, r0
 8005aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d069      	beq.n	8005b94 <_dtoa_r+0x924>
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	4658      	mov	r0, fp
 8005ac4:	f000 fd52 	bl	800656c <__mcmp>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	da63      	bge.n	8005b94 <_dtoa_r+0x924>
 8005acc:	2300      	movs	r3, #0
 8005ace:	4659      	mov	r1, fp
 8005ad0:	220a      	movs	r2, #10
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fb2e 	bl	8006134 <__multadd>
 8005ad8:	9b08      	ldr	r3, [sp, #32]
 8005ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ade:	4683      	mov	fp, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 818f 	beq.w	8005e04 <_dtoa_r+0xb94>
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	2300      	movs	r3, #0
 8005aea:	220a      	movs	r2, #10
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 fb21 	bl	8006134 <__multadd>
 8005af2:	f1b9 0f00 	cmp.w	r9, #0
 8005af6:	4607      	mov	r7, r0
 8005af8:	f300 808e 	bgt.w	8005c18 <_dtoa_r+0x9a8>
 8005afc:	9b05      	ldr	r3, [sp, #20]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	dc50      	bgt.n	8005ba4 <_dtoa_r+0x934>
 8005b02:	e089      	b.n	8005c18 <_dtoa_r+0x9a8>
 8005b04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b0a:	e75d      	b.n	80059c8 <_dtoa_r+0x758>
 8005b0c:	9b01      	ldr	r3, [sp, #4]
 8005b0e:	1e5e      	subs	r6, r3, #1
 8005b10:	9b06      	ldr	r3, [sp, #24]
 8005b12:	42b3      	cmp	r3, r6
 8005b14:	bfbf      	itttt	lt
 8005b16:	9b06      	ldrlt	r3, [sp, #24]
 8005b18:	9606      	strlt	r6, [sp, #24]
 8005b1a:	1af2      	sublt	r2, r6, r3
 8005b1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005b1e:	bfb6      	itet	lt
 8005b20:	189b      	addlt	r3, r3, r2
 8005b22:	1b9e      	subge	r6, r3, r6
 8005b24:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005b26:	9b01      	ldr	r3, [sp, #4]
 8005b28:	bfb8      	it	lt
 8005b2a:	2600      	movlt	r6, #0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bfb5      	itete	lt
 8005b30:	eba8 0503 	sublt.w	r5, r8, r3
 8005b34:	9b01      	ldrge	r3, [sp, #4]
 8005b36:	2300      	movlt	r3, #0
 8005b38:	4645      	movge	r5, r8
 8005b3a:	e747      	b.n	80059cc <_dtoa_r+0x75c>
 8005b3c:	9e06      	ldr	r6, [sp, #24]
 8005b3e:	9f08      	ldr	r7, [sp, #32]
 8005b40:	4645      	mov	r5, r8
 8005b42:	e74c      	b.n	80059de <_dtoa_r+0x76e>
 8005b44:	9a06      	ldr	r2, [sp, #24]
 8005b46:	e775      	b.n	8005a34 <_dtoa_r+0x7c4>
 8005b48:	9b05      	ldr	r3, [sp, #20]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	dc18      	bgt.n	8005b80 <_dtoa_r+0x910>
 8005b4e:	9b02      	ldr	r3, [sp, #8]
 8005b50:	b9b3      	cbnz	r3, 8005b80 <_dtoa_r+0x910>
 8005b52:	9b03      	ldr	r3, [sp, #12]
 8005b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b58:	b9a3      	cbnz	r3, 8005b84 <_dtoa_r+0x914>
 8005b5a:	9b03      	ldr	r3, [sp, #12]
 8005b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b60:	0d1b      	lsrs	r3, r3, #20
 8005b62:	051b      	lsls	r3, r3, #20
 8005b64:	b12b      	cbz	r3, 8005b72 <_dtoa_r+0x902>
 8005b66:	9b04      	ldr	r3, [sp, #16]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	9304      	str	r3, [sp, #16]
 8005b6c:	f108 0801 	add.w	r8, r8, #1
 8005b70:	2301      	movs	r3, #1
 8005b72:	9306      	str	r3, [sp, #24]
 8005b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f47f af74 	bne.w	8005a64 <_dtoa_r+0x7f4>
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	e779      	b.n	8005a74 <_dtoa_r+0x804>
 8005b80:	2300      	movs	r3, #0
 8005b82:	e7f6      	b.n	8005b72 <_dtoa_r+0x902>
 8005b84:	9b02      	ldr	r3, [sp, #8]
 8005b86:	e7f4      	b.n	8005b72 <_dtoa_r+0x902>
 8005b88:	d085      	beq.n	8005a96 <_dtoa_r+0x826>
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	301c      	adds	r0, #28
 8005b8e:	e77d      	b.n	8005a8c <_dtoa_r+0x81c>
 8005b90:	40240000 	.word	0x40240000
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dc38      	bgt.n	8005c0c <_dtoa_r+0x99c>
 8005b9a:	9b05      	ldr	r3, [sp, #20]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	dd35      	ble.n	8005c0c <_dtoa_r+0x99c>
 8005ba0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005ba4:	f1b9 0f00 	cmp.w	r9, #0
 8005ba8:	d10d      	bne.n	8005bc6 <_dtoa_r+0x956>
 8005baa:	4631      	mov	r1, r6
 8005bac:	464b      	mov	r3, r9
 8005bae:	2205      	movs	r2, #5
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 fabf 	bl	8006134 <__multadd>
 8005bb6:	4601      	mov	r1, r0
 8005bb8:	4606      	mov	r6, r0
 8005bba:	4658      	mov	r0, fp
 8005bbc:	f000 fcd6 	bl	800656c <__mcmp>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	f73f adbd 	bgt.w	8005740 <_dtoa_r+0x4d0>
 8005bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc8:	9d00      	ldr	r5, [sp, #0]
 8005bca:	ea6f 0a03 	mvn.w	sl, r3
 8005bce:	f04f 0800 	mov.w	r8, #0
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f000 fa8b 	bl	80060f0 <_Bfree>
 8005bda:	2f00      	cmp	r7, #0
 8005bdc:	f43f aeb4 	beq.w	8005948 <_dtoa_r+0x6d8>
 8005be0:	f1b8 0f00 	cmp.w	r8, #0
 8005be4:	d005      	beq.n	8005bf2 <_dtoa_r+0x982>
 8005be6:	45b8      	cmp	r8, r7
 8005be8:	d003      	beq.n	8005bf2 <_dtoa_r+0x982>
 8005bea:	4641      	mov	r1, r8
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 fa7f 	bl	80060f0 <_Bfree>
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f000 fa7b 	bl	80060f0 <_Bfree>
 8005bfa:	e6a5      	b.n	8005948 <_dtoa_r+0x6d8>
 8005bfc:	2600      	movs	r6, #0
 8005bfe:	4637      	mov	r7, r6
 8005c00:	e7e1      	b.n	8005bc6 <_dtoa_r+0x956>
 8005c02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005c04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c08:	4637      	mov	r7, r6
 8005c0a:	e599      	b.n	8005740 <_dtoa_r+0x4d0>
 8005c0c:	9b08      	ldr	r3, [sp, #32]
 8005c0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80fd 	beq.w	8005e12 <_dtoa_r+0xba2>
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	dd05      	ble.n	8005c28 <_dtoa_r+0x9b8>
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	462a      	mov	r2, r5
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 fc37 	bl	8006494 <__lshift>
 8005c26:	4607      	mov	r7, r0
 8005c28:	9b06      	ldr	r3, [sp, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d05c      	beq.n	8005ce8 <_dtoa_r+0xa78>
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 fa1d 	bl	8006070 <_Balloc>
 8005c36:	4605      	mov	r5, r0
 8005c38:	b928      	cbnz	r0, 8005c46 <_dtoa_r+0x9d6>
 8005c3a:	4b80      	ldr	r3, [pc, #512]	; (8005e3c <_dtoa_r+0xbcc>)
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c42:	f7ff bb2e 	b.w	80052a2 <_dtoa_r+0x32>
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	3202      	adds	r2, #2
 8005c4a:	0092      	lsls	r2, r2, #2
 8005c4c:	f107 010c 	add.w	r1, r7, #12
 8005c50:	300c      	adds	r0, #12
 8005c52:	f000 f9ff 	bl	8006054 <memcpy>
 8005c56:	2201      	movs	r2, #1
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 fc1a 	bl	8006494 <__lshift>
 8005c60:	9b00      	ldr	r3, [sp, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	9b00      	ldr	r3, [sp, #0]
 8005c68:	444b      	add	r3, r9
 8005c6a:	9307      	str	r3, [sp, #28]
 8005c6c:	9b02      	ldr	r3, [sp, #8]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	46b8      	mov	r8, r7
 8005c74:	9306      	str	r3, [sp, #24]
 8005c76:	4607      	mov	r7, r0
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	4658      	mov	r0, fp
 8005c80:	9302      	str	r3, [sp, #8]
 8005c82:	f7ff fa69 	bl	8005158 <quorem>
 8005c86:	4603      	mov	r3, r0
 8005c88:	3330      	adds	r3, #48	; 0x30
 8005c8a:	9004      	str	r0, [sp, #16]
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	4658      	mov	r0, fp
 8005c90:	9308      	str	r3, [sp, #32]
 8005c92:	f000 fc6b 	bl	800656c <__mcmp>
 8005c96:	463a      	mov	r2, r7
 8005c98:	4681      	mov	r9, r0
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f000 fc81 	bl	80065a4 <__mdiff>
 8005ca2:	68c2      	ldr	r2, [r0, #12]
 8005ca4:	9b08      	ldr	r3, [sp, #32]
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	bb02      	cbnz	r2, 8005cec <_dtoa_r+0xa7c>
 8005caa:	4601      	mov	r1, r0
 8005cac:	4658      	mov	r0, fp
 8005cae:	f000 fc5d 	bl	800656c <__mcmp>
 8005cb2:	9b08      	ldr	r3, [sp, #32]
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4620      	mov	r0, r4
 8005cba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005cbe:	f000 fa17 	bl	80060f0 <_Bfree>
 8005cc2:	9b05      	ldr	r3, [sp, #20]
 8005cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cc6:	9d01      	ldr	r5, [sp, #4]
 8005cc8:	ea43 0102 	orr.w	r1, r3, r2
 8005ccc:	9b06      	ldr	r3, [sp, #24]
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	9b08      	ldr	r3, [sp, #32]
 8005cd2:	d10d      	bne.n	8005cf0 <_dtoa_r+0xa80>
 8005cd4:	2b39      	cmp	r3, #57	; 0x39
 8005cd6:	d029      	beq.n	8005d2c <_dtoa_r+0xabc>
 8005cd8:	f1b9 0f00 	cmp.w	r9, #0
 8005cdc:	dd01      	ble.n	8005ce2 <_dtoa_r+0xa72>
 8005cde:	9b04      	ldr	r3, [sp, #16]
 8005ce0:	3331      	adds	r3, #49	; 0x31
 8005ce2:	9a02      	ldr	r2, [sp, #8]
 8005ce4:	7013      	strb	r3, [r2, #0]
 8005ce6:	e774      	b.n	8005bd2 <_dtoa_r+0x962>
 8005ce8:	4638      	mov	r0, r7
 8005cea:	e7b9      	b.n	8005c60 <_dtoa_r+0x9f0>
 8005cec:	2201      	movs	r2, #1
 8005cee:	e7e2      	b.n	8005cb6 <_dtoa_r+0xa46>
 8005cf0:	f1b9 0f00 	cmp.w	r9, #0
 8005cf4:	db06      	blt.n	8005d04 <_dtoa_r+0xa94>
 8005cf6:	9905      	ldr	r1, [sp, #20]
 8005cf8:	ea41 0909 	orr.w	r9, r1, r9
 8005cfc:	9906      	ldr	r1, [sp, #24]
 8005cfe:	ea59 0101 	orrs.w	r1, r9, r1
 8005d02:	d120      	bne.n	8005d46 <_dtoa_r+0xad6>
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	ddec      	ble.n	8005ce2 <_dtoa_r+0xa72>
 8005d08:	4659      	mov	r1, fp
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	f000 fbc0 	bl	8006494 <__lshift>
 8005d14:	4631      	mov	r1, r6
 8005d16:	4683      	mov	fp, r0
 8005d18:	f000 fc28 	bl	800656c <__mcmp>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	9b01      	ldr	r3, [sp, #4]
 8005d20:	dc02      	bgt.n	8005d28 <_dtoa_r+0xab8>
 8005d22:	d1de      	bne.n	8005ce2 <_dtoa_r+0xa72>
 8005d24:	07da      	lsls	r2, r3, #31
 8005d26:	d5dc      	bpl.n	8005ce2 <_dtoa_r+0xa72>
 8005d28:	2b39      	cmp	r3, #57	; 0x39
 8005d2a:	d1d8      	bne.n	8005cde <_dtoa_r+0xa6e>
 8005d2c:	9a02      	ldr	r2, [sp, #8]
 8005d2e:	2339      	movs	r3, #57	; 0x39
 8005d30:	7013      	strb	r3, [r2, #0]
 8005d32:	462b      	mov	r3, r5
 8005d34:	461d      	mov	r5, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d3c:	2a39      	cmp	r2, #57	; 0x39
 8005d3e:	d050      	beq.n	8005de2 <_dtoa_r+0xb72>
 8005d40:	3201      	adds	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	e745      	b.n	8005bd2 <_dtoa_r+0x962>
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	dd03      	ble.n	8005d52 <_dtoa_r+0xae2>
 8005d4a:	2b39      	cmp	r3, #57	; 0x39
 8005d4c:	d0ee      	beq.n	8005d2c <_dtoa_r+0xabc>
 8005d4e:	3301      	adds	r3, #1
 8005d50:	e7c7      	b.n	8005ce2 <_dtoa_r+0xa72>
 8005d52:	9a01      	ldr	r2, [sp, #4]
 8005d54:	9907      	ldr	r1, [sp, #28]
 8005d56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d5a:	428a      	cmp	r2, r1
 8005d5c:	d02a      	beq.n	8005db4 <_dtoa_r+0xb44>
 8005d5e:	4659      	mov	r1, fp
 8005d60:	2300      	movs	r3, #0
 8005d62:	220a      	movs	r2, #10
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 f9e5 	bl	8006134 <__multadd>
 8005d6a:	45b8      	cmp	r8, r7
 8005d6c:	4683      	mov	fp, r0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	f04f 020a 	mov.w	r2, #10
 8005d76:	4641      	mov	r1, r8
 8005d78:	4620      	mov	r0, r4
 8005d7a:	d107      	bne.n	8005d8c <_dtoa_r+0xb1c>
 8005d7c:	f000 f9da 	bl	8006134 <__multadd>
 8005d80:	4680      	mov	r8, r0
 8005d82:	4607      	mov	r7, r0
 8005d84:	9b01      	ldr	r3, [sp, #4]
 8005d86:	3301      	adds	r3, #1
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	e775      	b.n	8005c78 <_dtoa_r+0xa08>
 8005d8c:	f000 f9d2 	bl	8006134 <__multadd>
 8005d90:	4639      	mov	r1, r7
 8005d92:	4680      	mov	r8, r0
 8005d94:	2300      	movs	r3, #0
 8005d96:	220a      	movs	r2, #10
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f000 f9cb 	bl	8006134 <__multadd>
 8005d9e:	4607      	mov	r7, r0
 8005da0:	e7f0      	b.n	8005d84 <_dtoa_r+0xb14>
 8005da2:	f1b9 0f00 	cmp.w	r9, #0
 8005da6:	9a00      	ldr	r2, [sp, #0]
 8005da8:	bfcc      	ite	gt
 8005daa:	464d      	movgt	r5, r9
 8005dac:	2501      	movle	r5, #1
 8005dae:	4415      	add	r5, r2
 8005db0:	f04f 0800 	mov.w	r8, #0
 8005db4:	4659      	mov	r1, fp
 8005db6:	2201      	movs	r2, #1
 8005db8:	4620      	mov	r0, r4
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	f000 fb6a 	bl	8006494 <__lshift>
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4683      	mov	fp, r0
 8005dc4:	f000 fbd2 	bl	800656c <__mcmp>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	dcb2      	bgt.n	8005d32 <_dtoa_r+0xac2>
 8005dcc:	d102      	bne.n	8005dd4 <_dtoa_r+0xb64>
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	07db      	lsls	r3, r3, #31
 8005dd2:	d4ae      	bmi.n	8005d32 <_dtoa_r+0xac2>
 8005dd4:	462b      	mov	r3, r5
 8005dd6:	461d      	mov	r5, r3
 8005dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ddc:	2a30      	cmp	r2, #48	; 0x30
 8005dde:	d0fa      	beq.n	8005dd6 <_dtoa_r+0xb66>
 8005de0:	e6f7      	b.n	8005bd2 <_dtoa_r+0x962>
 8005de2:	9a00      	ldr	r2, [sp, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d1a5      	bne.n	8005d34 <_dtoa_r+0xac4>
 8005de8:	f10a 0a01 	add.w	sl, sl, #1
 8005dec:	2331      	movs	r3, #49	; 0x31
 8005dee:	e779      	b.n	8005ce4 <_dtoa_r+0xa74>
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <_dtoa_r+0xbd0>)
 8005df2:	f7ff baaf 	b.w	8005354 <_dtoa_r+0xe4>
 8005df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f47f aa86 	bne.w	800530a <_dtoa_r+0x9a>
 8005dfe:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <_dtoa_r+0xbd4>)
 8005e00:	f7ff baa8 	b.w	8005354 <_dtoa_r+0xe4>
 8005e04:	f1b9 0f00 	cmp.w	r9, #0
 8005e08:	dc03      	bgt.n	8005e12 <_dtoa_r+0xba2>
 8005e0a:	9b05      	ldr	r3, [sp, #20]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	f73f aec9 	bgt.w	8005ba4 <_dtoa_r+0x934>
 8005e12:	9d00      	ldr	r5, [sp, #0]
 8005e14:	4631      	mov	r1, r6
 8005e16:	4658      	mov	r0, fp
 8005e18:	f7ff f99e 	bl	8005158 <quorem>
 8005e1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e20:	f805 3b01 	strb.w	r3, [r5], #1
 8005e24:	9a00      	ldr	r2, [sp, #0]
 8005e26:	1aaa      	subs	r2, r5, r2
 8005e28:	4591      	cmp	r9, r2
 8005e2a:	ddba      	ble.n	8005da2 <_dtoa_r+0xb32>
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	2300      	movs	r3, #0
 8005e30:	220a      	movs	r2, #10
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 f97e 	bl	8006134 <__multadd>
 8005e38:	4683      	mov	fp, r0
 8005e3a:	e7eb      	b.n	8005e14 <_dtoa_r+0xba4>
 8005e3c:	08007b7b 	.word	0x08007b7b
 8005e40:	08007ad4 	.word	0x08007ad4
 8005e44:	08007af8 	.word	0x08007af8

08005e48 <std>:
 8005e48:	2300      	movs	r3, #0
 8005e4a:	b510      	push	{r4, lr}
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e56:	6083      	str	r3, [r0, #8]
 8005e58:	8181      	strh	r1, [r0, #12]
 8005e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e5c:	81c2      	strh	r2, [r0, #14]
 8005e5e:	6183      	str	r3, [r0, #24]
 8005e60:	4619      	mov	r1, r3
 8005e62:	2208      	movs	r2, #8
 8005e64:	305c      	adds	r0, #92	; 0x5c
 8005e66:	f7fe fced 	bl	8004844 <memset>
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <std+0x38>)
 8005e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8005e6e:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <std+0x3c>)
 8005e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e72:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <std+0x40>)
 8005e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <std+0x44>)
 8005e78:	6224      	str	r4, [r4, #32]
 8005e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	bf00      	nop
 8005e80:	08006bb5 	.word	0x08006bb5
 8005e84:	08006bd7 	.word	0x08006bd7
 8005e88:	08006c0f 	.word	0x08006c0f
 8005e8c:	08006c33 	.word	0x08006c33

08005e90 <_cleanup_r>:
 8005e90:	4901      	ldr	r1, [pc, #4]	; (8005e98 <_cleanup_r+0x8>)
 8005e92:	f000 b8af 	b.w	8005ff4 <_fwalk_reent>
 8005e96:	bf00      	nop
 8005e98:	08006f49 	.word	0x08006f49

08005e9c <__sfmoreglue>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	1e4a      	subs	r2, r1, #1
 8005ea0:	2568      	movs	r5, #104	; 0x68
 8005ea2:	4355      	muls	r5, r2
 8005ea4:	460e      	mov	r6, r1
 8005ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005eaa:	f000 fcbf 	bl	800682c <_malloc_r>
 8005eae:	4604      	mov	r4, r0
 8005eb0:	b140      	cbz	r0, 8005ec4 <__sfmoreglue+0x28>
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8005eb8:	300c      	adds	r0, #12
 8005eba:	60a0      	str	r0, [r4, #8]
 8005ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ec0:	f7fe fcc0 	bl	8004844 <memset>
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}

08005ec8 <__sfp_lock_acquire>:
 8005ec8:	4801      	ldr	r0, [pc, #4]	; (8005ed0 <__sfp_lock_acquire+0x8>)
 8005eca:	f000 b8b8 	b.w	800603e <__retarget_lock_acquire_recursive>
 8005ece:	bf00      	nop
 8005ed0:	200003d8 	.word	0x200003d8

08005ed4 <__sfp_lock_release>:
 8005ed4:	4801      	ldr	r0, [pc, #4]	; (8005edc <__sfp_lock_release+0x8>)
 8005ed6:	f000 b8b3 	b.w	8006040 <__retarget_lock_release_recursive>
 8005eda:	bf00      	nop
 8005edc:	200003d8 	.word	0x200003d8

08005ee0 <__sinit_lock_acquire>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	; (8005ee8 <__sinit_lock_acquire+0x8>)
 8005ee2:	f000 b8ac 	b.w	800603e <__retarget_lock_acquire_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	200003d3 	.word	0x200003d3

08005eec <__sinit_lock_release>:
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <__sinit_lock_release+0x8>)
 8005eee:	f000 b8a7 	b.w	8006040 <__retarget_lock_release_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	200003d3 	.word	0x200003d3

08005ef8 <__sinit>:
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	4604      	mov	r4, r0
 8005efc:	f7ff fff0 	bl	8005ee0 <__sinit_lock_acquire>
 8005f00:	69a3      	ldr	r3, [r4, #24]
 8005f02:	b11b      	cbz	r3, 8005f0c <__sinit+0x14>
 8005f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f08:	f7ff bff0 	b.w	8005eec <__sinit_lock_release>
 8005f0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f10:	6523      	str	r3, [r4, #80]	; 0x50
 8005f12:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <__sinit+0x68>)
 8005f14:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <__sinit+0x6c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	bf04      	itt	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	61a3      	streq	r3, [r4, #24]
 8005f22:	4620      	mov	r0, r4
 8005f24:	f000 f820 	bl	8005f68 <__sfp>
 8005f28:	6060      	str	r0, [r4, #4]
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f000 f81c 	bl	8005f68 <__sfp>
 8005f30:	60a0      	str	r0, [r4, #8]
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 f818 	bl	8005f68 <__sfp>
 8005f38:	2200      	movs	r2, #0
 8005f3a:	60e0      	str	r0, [r4, #12]
 8005f3c:	2104      	movs	r1, #4
 8005f3e:	6860      	ldr	r0, [r4, #4]
 8005f40:	f7ff ff82 	bl	8005e48 <std>
 8005f44:	68a0      	ldr	r0, [r4, #8]
 8005f46:	2201      	movs	r2, #1
 8005f48:	2109      	movs	r1, #9
 8005f4a:	f7ff ff7d 	bl	8005e48 <std>
 8005f4e:	68e0      	ldr	r0, [r4, #12]
 8005f50:	2202      	movs	r2, #2
 8005f52:	2112      	movs	r1, #18
 8005f54:	f7ff ff78 	bl	8005e48 <std>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	61a3      	str	r3, [r4, #24]
 8005f5c:	e7d2      	b.n	8005f04 <__sinit+0xc>
 8005f5e:	bf00      	nop
 8005f60:	08007ac0 	.word	0x08007ac0
 8005f64:	08005e91 	.word	0x08005e91

08005f68 <__sfp>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	4607      	mov	r7, r0
 8005f6c:	f7ff ffac 	bl	8005ec8 <__sfp_lock_acquire>
 8005f70:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <__sfp+0x84>)
 8005f72:	681e      	ldr	r6, [r3, #0]
 8005f74:	69b3      	ldr	r3, [r6, #24]
 8005f76:	b913      	cbnz	r3, 8005f7e <__sfp+0x16>
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f7ff ffbd 	bl	8005ef8 <__sinit>
 8005f7e:	3648      	adds	r6, #72	; 0x48
 8005f80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	d503      	bpl.n	8005f90 <__sfp+0x28>
 8005f88:	6833      	ldr	r3, [r6, #0]
 8005f8a:	b30b      	cbz	r3, 8005fd0 <__sfp+0x68>
 8005f8c:	6836      	ldr	r6, [r6, #0]
 8005f8e:	e7f7      	b.n	8005f80 <__sfp+0x18>
 8005f90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f94:	b9d5      	cbnz	r5, 8005fcc <__sfp+0x64>
 8005f96:	4b16      	ldr	r3, [pc, #88]	; (8005ff0 <__sfp+0x88>)
 8005f98:	60e3      	str	r3, [r4, #12]
 8005f9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f9e:	6665      	str	r5, [r4, #100]	; 0x64
 8005fa0:	f000 f84c 	bl	800603c <__retarget_lock_init_recursive>
 8005fa4:	f7ff ff96 	bl	8005ed4 <__sfp_lock_release>
 8005fa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fb0:	6025      	str	r5, [r4, #0]
 8005fb2:	61a5      	str	r5, [r4, #24]
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fbc:	f7fe fc42 	bl	8004844 <memset>
 8005fc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fc8:	4620      	mov	r0, r4
 8005fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fcc:	3468      	adds	r4, #104	; 0x68
 8005fce:	e7d9      	b.n	8005f84 <__sfp+0x1c>
 8005fd0:	2104      	movs	r1, #4
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f7ff ff62 	bl	8005e9c <__sfmoreglue>
 8005fd8:	4604      	mov	r4, r0
 8005fda:	6030      	str	r0, [r6, #0]
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d1d5      	bne.n	8005f8c <__sfp+0x24>
 8005fe0:	f7ff ff78 	bl	8005ed4 <__sfp_lock_release>
 8005fe4:	230c      	movs	r3, #12
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	e7ee      	b.n	8005fc8 <__sfp+0x60>
 8005fea:	bf00      	nop
 8005fec:	08007ac0 	.word	0x08007ac0
 8005ff0:	ffff0001 	.word	0xffff0001

08005ff4 <_fwalk_reent>:
 8005ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	4688      	mov	r8, r1
 8005ffc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006000:	2700      	movs	r7, #0
 8006002:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006006:	f1b9 0901 	subs.w	r9, r9, #1
 800600a:	d505      	bpl.n	8006018 <_fwalk_reent+0x24>
 800600c:	6824      	ldr	r4, [r4, #0]
 800600e:	2c00      	cmp	r4, #0
 8006010:	d1f7      	bne.n	8006002 <_fwalk_reent+0xe>
 8006012:	4638      	mov	r0, r7
 8006014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006018:	89ab      	ldrh	r3, [r5, #12]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d907      	bls.n	800602e <_fwalk_reent+0x3a>
 800601e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006022:	3301      	adds	r3, #1
 8006024:	d003      	beq.n	800602e <_fwalk_reent+0x3a>
 8006026:	4629      	mov	r1, r5
 8006028:	4630      	mov	r0, r6
 800602a:	47c0      	blx	r8
 800602c:	4307      	orrs	r7, r0
 800602e:	3568      	adds	r5, #104	; 0x68
 8006030:	e7e9      	b.n	8006006 <_fwalk_reent+0x12>
	...

08006034 <_localeconv_r>:
 8006034:	4800      	ldr	r0, [pc, #0]	; (8006038 <_localeconv_r+0x4>)
 8006036:	4770      	bx	lr
 8006038:	200001f8 	.word	0x200001f8

0800603c <__retarget_lock_init_recursive>:
 800603c:	4770      	bx	lr

0800603e <__retarget_lock_acquire_recursive>:
 800603e:	4770      	bx	lr

08006040 <__retarget_lock_release_recursive>:
 8006040:	4770      	bx	lr
	...

08006044 <malloc>:
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <malloc+0xc>)
 8006046:	4601      	mov	r1, r0
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	f000 bbef 	b.w	800682c <_malloc_r>
 800604e:	bf00      	nop
 8006050:	200000a4 	.word	0x200000a4

08006054 <memcpy>:
 8006054:	440a      	add	r2, r1
 8006056:	4291      	cmp	r1, r2
 8006058:	f100 33ff 	add.w	r3, r0, #4294967295
 800605c:	d100      	bne.n	8006060 <memcpy+0xc>
 800605e:	4770      	bx	lr
 8006060:	b510      	push	{r4, lr}
 8006062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606a:	4291      	cmp	r1, r2
 800606c:	d1f9      	bne.n	8006062 <memcpy+0xe>
 800606e:	bd10      	pop	{r4, pc}

08006070 <_Balloc>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006074:	4604      	mov	r4, r0
 8006076:	460d      	mov	r5, r1
 8006078:	b976      	cbnz	r6, 8006098 <_Balloc+0x28>
 800607a:	2010      	movs	r0, #16
 800607c:	f7ff ffe2 	bl	8006044 <malloc>
 8006080:	4602      	mov	r2, r0
 8006082:	6260      	str	r0, [r4, #36]	; 0x24
 8006084:	b920      	cbnz	r0, 8006090 <_Balloc+0x20>
 8006086:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <_Balloc+0x78>)
 8006088:	4818      	ldr	r0, [pc, #96]	; (80060ec <_Balloc+0x7c>)
 800608a:	2166      	movs	r1, #102	; 0x66
 800608c:	f000 fea8 	bl	8006de0 <__assert_func>
 8006090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006094:	6006      	str	r6, [r0, #0]
 8006096:	60c6      	str	r6, [r0, #12]
 8006098:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800609a:	68f3      	ldr	r3, [r6, #12]
 800609c:	b183      	cbz	r3, 80060c0 <_Balloc+0x50>
 800609e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060a6:	b9b8      	cbnz	r0, 80060d8 <_Balloc+0x68>
 80060a8:	2101      	movs	r1, #1
 80060aa:	fa01 f605 	lsl.w	r6, r1, r5
 80060ae:	1d72      	adds	r2, r6, #5
 80060b0:	0092      	lsls	r2, r2, #2
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 fb5a 	bl	800676c <_calloc_r>
 80060b8:	b160      	cbz	r0, 80060d4 <_Balloc+0x64>
 80060ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060be:	e00e      	b.n	80060de <_Balloc+0x6e>
 80060c0:	2221      	movs	r2, #33	; 0x21
 80060c2:	2104      	movs	r1, #4
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 fb51 	bl	800676c <_calloc_r>
 80060ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060cc:	60f0      	str	r0, [r6, #12]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e4      	bne.n	800609e <_Balloc+0x2e>
 80060d4:	2000      	movs	r0, #0
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	6802      	ldr	r2, [r0, #0]
 80060da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060de:	2300      	movs	r3, #0
 80060e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060e4:	e7f7      	b.n	80060d6 <_Balloc+0x66>
 80060e6:	bf00      	nop
 80060e8:	08007b05 	.word	0x08007b05
 80060ec:	08007bec 	.word	0x08007bec

080060f0 <_Bfree>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060f4:	4605      	mov	r5, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	b976      	cbnz	r6, 8006118 <_Bfree+0x28>
 80060fa:	2010      	movs	r0, #16
 80060fc:	f7ff ffa2 	bl	8006044 <malloc>
 8006100:	4602      	mov	r2, r0
 8006102:	6268      	str	r0, [r5, #36]	; 0x24
 8006104:	b920      	cbnz	r0, 8006110 <_Bfree+0x20>
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <_Bfree+0x3c>)
 8006108:	4809      	ldr	r0, [pc, #36]	; (8006130 <_Bfree+0x40>)
 800610a:	218a      	movs	r1, #138	; 0x8a
 800610c:	f000 fe68 	bl	8006de0 <__assert_func>
 8006110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006114:	6006      	str	r6, [r0, #0]
 8006116:	60c6      	str	r6, [r0, #12]
 8006118:	b13c      	cbz	r4, 800612a <_Bfree+0x3a>
 800611a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800611c:	6862      	ldr	r2, [r4, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006124:	6021      	str	r1, [r4, #0]
 8006126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800612a:	bd70      	pop	{r4, r5, r6, pc}
 800612c:	08007b05 	.word	0x08007b05
 8006130:	08007bec 	.word	0x08007bec

08006134 <__multadd>:
 8006134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006138:	690e      	ldr	r6, [r1, #16]
 800613a:	4607      	mov	r7, r0
 800613c:	4698      	mov	r8, r3
 800613e:	460c      	mov	r4, r1
 8006140:	f101 0014 	add.w	r0, r1, #20
 8006144:	2300      	movs	r3, #0
 8006146:	6805      	ldr	r5, [r0, #0]
 8006148:	b2a9      	uxth	r1, r5
 800614a:	fb02 8101 	mla	r1, r2, r1, r8
 800614e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006152:	0c2d      	lsrs	r5, r5, #16
 8006154:	fb02 c505 	mla	r5, r2, r5, ip
 8006158:	b289      	uxth	r1, r1
 800615a:	3301      	adds	r3, #1
 800615c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006160:	429e      	cmp	r6, r3
 8006162:	f840 1b04 	str.w	r1, [r0], #4
 8006166:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800616a:	dcec      	bgt.n	8006146 <__multadd+0x12>
 800616c:	f1b8 0f00 	cmp.w	r8, #0
 8006170:	d022      	beq.n	80061b8 <__multadd+0x84>
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	42b3      	cmp	r3, r6
 8006176:	dc19      	bgt.n	80061ac <__multadd+0x78>
 8006178:	6861      	ldr	r1, [r4, #4]
 800617a:	4638      	mov	r0, r7
 800617c:	3101      	adds	r1, #1
 800617e:	f7ff ff77 	bl	8006070 <_Balloc>
 8006182:	4605      	mov	r5, r0
 8006184:	b928      	cbnz	r0, 8006192 <__multadd+0x5e>
 8006186:	4602      	mov	r2, r0
 8006188:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <__multadd+0x8c>)
 800618a:	480e      	ldr	r0, [pc, #56]	; (80061c4 <__multadd+0x90>)
 800618c:	21b5      	movs	r1, #181	; 0xb5
 800618e:	f000 fe27 	bl	8006de0 <__assert_func>
 8006192:	6922      	ldr	r2, [r4, #16]
 8006194:	3202      	adds	r2, #2
 8006196:	f104 010c 	add.w	r1, r4, #12
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	300c      	adds	r0, #12
 800619e:	f7ff ff59 	bl	8006054 <memcpy>
 80061a2:	4621      	mov	r1, r4
 80061a4:	4638      	mov	r0, r7
 80061a6:	f7ff ffa3 	bl	80060f0 <_Bfree>
 80061aa:	462c      	mov	r4, r5
 80061ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80061b0:	3601      	adds	r6, #1
 80061b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80061b6:	6126      	str	r6, [r4, #16]
 80061b8:	4620      	mov	r0, r4
 80061ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061be:	bf00      	nop
 80061c0:	08007b7b 	.word	0x08007b7b
 80061c4:	08007bec 	.word	0x08007bec

080061c8 <__hi0bits>:
 80061c8:	0c03      	lsrs	r3, r0, #16
 80061ca:	041b      	lsls	r3, r3, #16
 80061cc:	b9d3      	cbnz	r3, 8006204 <__hi0bits+0x3c>
 80061ce:	0400      	lsls	r0, r0, #16
 80061d0:	2310      	movs	r3, #16
 80061d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80061d6:	bf04      	itt	eq
 80061d8:	0200      	lsleq	r0, r0, #8
 80061da:	3308      	addeq	r3, #8
 80061dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80061e0:	bf04      	itt	eq
 80061e2:	0100      	lsleq	r0, r0, #4
 80061e4:	3304      	addeq	r3, #4
 80061e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80061ea:	bf04      	itt	eq
 80061ec:	0080      	lsleq	r0, r0, #2
 80061ee:	3302      	addeq	r3, #2
 80061f0:	2800      	cmp	r0, #0
 80061f2:	db05      	blt.n	8006200 <__hi0bits+0x38>
 80061f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80061f8:	f103 0301 	add.w	r3, r3, #1
 80061fc:	bf08      	it	eq
 80061fe:	2320      	moveq	r3, #32
 8006200:	4618      	mov	r0, r3
 8006202:	4770      	bx	lr
 8006204:	2300      	movs	r3, #0
 8006206:	e7e4      	b.n	80061d2 <__hi0bits+0xa>

08006208 <__lo0bits>:
 8006208:	6803      	ldr	r3, [r0, #0]
 800620a:	f013 0207 	ands.w	r2, r3, #7
 800620e:	4601      	mov	r1, r0
 8006210:	d00b      	beq.n	800622a <__lo0bits+0x22>
 8006212:	07da      	lsls	r2, r3, #31
 8006214:	d424      	bmi.n	8006260 <__lo0bits+0x58>
 8006216:	0798      	lsls	r0, r3, #30
 8006218:	bf49      	itett	mi
 800621a:	085b      	lsrmi	r3, r3, #1
 800621c:	089b      	lsrpl	r3, r3, #2
 800621e:	2001      	movmi	r0, #1
 8006220:	600b      	strmi	r3, [r1, #0]
 8006222:	bf5c      	itt	pl
 8006224:	600b      	strpl	r3, [r1, #0]
 8006226:	2002      	movpl	r0, #2
 8006228:	4770      	bx	lr
 800622a:	b298      	uxth	r0, r3
 800622c:	b9b0      	cbnz	r0, 800625c <__lo0bits+0x54>
 800622e:	0c1b      	lsrs	r3, r3, #16
 8006230:	2010      	movs	r0, #16
 8006232:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006236:	bf04      	itt	eq
 8006238:	0a1b      	lsreq	r3, r3, #8
 800623a:	3008      	addeq	r0, #8
 800623c:	071a      	lsls	r2, r3, #28
 800623e:	bf04      	itt	eq
 8006240:	091b      	lsreq	r3, r3, #4
 8006242:	3004      	addeq	r0, #4
 8006244:	079a      	lsls	r2, r3, #30
 8006246:	bf04      	itt	eq
 8006248:	089b      	lsreq	r3, r3, #2
 800624a:	3002      	addeq	r0, #2
 800624c:	07da      	lsls	r2, r3, #31
 800624e:	d403      	bmi.n	8006258 <__lo0bits+0x50>
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	f100 0001 	add.w	r0, r0, #1
 8006256:	d005      	beq.n	8006264 <__lo0bits+0x5c>
 8006258:	600b      	str	r3, [r1, #0]
 800625a:	4770      	bx	lr
 800625c:	4610      	mov	r0, r2
 800625e:	e7e8      	b.n	8006232 <__lo0bits+0x2a>
 8006260:	2000      	movs	r0, #0
 8006262:	4770      	bx	lr
 8006264:	2020      	movs	r0, #32
 8006266:	4770      	bx	lr

08006268 <__i2b>:
 8006268:	b510      	push	{r4, lr}
 800626a:	460c      	mov	r4, r1
 800626c:	2101      	movs	r1, #1
 800626e:	f7ff feff 	bl	8006070 <_Balloc>
 8006272:	4602      	mov	r2, r0
 8006274:	b928      	cbnz	r0, 8006282 <__i2b+0x1a>
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <__i2b+0x24>)
 8006278:	4805      	ldr	r0, [pc, #20]	; (8006290 <__i2b+0x28>)
 800627a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800627e:	f000 fdaf 	bl	8006de0 <__assert_func>
 8006282:	2301      	movs	r3, #1
 8006284:	6144      	str	r4, [r0, #20]
 8006286:	6103      	str	r3, [r0, #16]
 8006288:	bd10      	pop	{r4, pc}
 800628a:	bf00      	nop
 800628c:	08007b7b 	.word	0x08007b7b
 8006290:	08007bec 	.word	0x08007bec

08006294 <__multiply>:
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	4614      	mov	r4, r2
 800629a:	690a      	ldr	r2, [r1, #16]
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	429a      	cmp	r2, r3
 80062a0:	bfb8      	it	lt
 80062a2:	460b      	movlt	r3, r1
 80062a4:	460d      	mov	r5, r1
 80062a6:	bfbc      	itt	lt
 80062a8:	4625      	movlt	r5, r4
 80062aa:	461c      	movlt	r4, r3
 80062ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80062b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80062b4:	68ab      	ldr	r3, [r5, #8]
 80062b6:	6869      	ldr	r1, [r5, #4]
 80062b8:	eb0a 0709 	add.w	r7, sl, r9
 80062bc:	42bb      	cmp	r3, r7
 80062be:	b085      	sub	sp, #20
 80062c0:	bfb8      	it	lt
 80062c2:	3101      	addlt	r1, #1
 80062c4:	f7ff fed4 	bl	8006070 <_Balloc>
 80062c8:	b930      	cbnz	r0, 80062d8 <__multiply+0x44>
 80062ca:	4602      	mov	r2, r0
 80062cc:	4b42      	ldr	r3, [pc, #264]	; (80063d8 <__multiply+0x144>)
 80062ce:	4843      	ldr	r0, [pc, #268]	; (80063dc <__multiply+0x148>)
 80062d0:	f240 115d 	movw	r1, #349	; 0x15d
 80062d4:	f000 fd84 	bl	8006de0 <__assert_func>
 80062d8:	f100 0614 	add.w	r6, r0, #20
 80062dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80062e0:	4633      	mov	r3, r6
 80062e2:	2200      	movs	r2, #0
 80062e4:	4543      	cmp	r3, r8
 80062e6:	d31e      	bcc.n	8006326 <__multiply+0x92>
 80062e8:	f105 0c14 	add.w	ip, r5, #20
 80062ec:	f104 0314 	add.w	r3, r4, #20
 80062f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80062f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80062f8:	9202      	str	r2, [sp, #8]
 80062fa:	ebac 0205 	sub.w	r2, ip, r5
 80062fe:	3a15      	subs	r2, #21
 8006300:	f022 0203 	bic.w	r2, r2, #3
 8006304:	3204      	adds	r2, #4
 8006306:	f105 0115 	add.w	r1, r5, #21
 800630a:	458c      	cmp	ip, r1
 800630c:	bf38      	it	cc
 800630e:	2204      	movcc	r2, #4
 8006310:	9201      	str	r2, [sp, #4]
 8006312:	9a02      	ldr	r2, [sp, #8]
 8006314:	9303      	str	r3, [sp, #12]
 8006316:	429a      	cmp	r2, r3
 8006318:	d808      	bhi.n	800632c <__multiply+0x98>
 800631a:	2f00      	cmp	r7, #0
 800631c:	dc55      	bgt.n	80063ca <__multiply+0x136>
 800631e:	6107      	str	r7, [r0, #16]
 8006320:	b005      	add	sp, #20
 8006322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006326:	f843 2b04 	str.w	r2, [r3], #4
 800632a:	e7db      	b.n	80062e4 <__multiply+0x50>
 800632c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006330:	f1ba 0f00 	cmp.w	sl, #0
 8006334:	d020      	beq.n	8006378 <__multiply+0xe4>
 8006336:	f105 0e14 	add.w	lr, r5, #20
 800633a:	46b1      	mov	r9, r6
 800633c:	2200      	movs	r2, #0
 800633e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006342:	f8d9 b000 	ldr.w	fp, [r9]
 8006346:	b2a1      	uxth	r1, r4
 8006348:	fa1f fb8b 	uxth.w	fp, fp
 800634c:	fb0a b101 	mla	r1, sl, r1, fp
 8006350:	4411      	add	r1, r2
 8006352:	f8d9 2000 	ldr.w	r2, [r9]
 8006356:	0c24      	lsrs	r4, r4, #16
 8006358:	0c12      	lsrs	r2, r2, #16
 800635a:	fb0a 2404 	mla	r4, sl, r4, r2
 800635e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006362:	b289      	uxth	r1, r1
 8006364:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006368:	45f4      	cmp	ip, lr
 800636a:	f849 1b04 	str.w	r1, [r9], #4
 800636e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006372:	d8e4      	bhi.n	800633e <__multiply+0xaa>
 8006374:	9901      	ldr	r1, [sp, #4]
 8006376:	5072      	str	r2, [r6, r1]
 8006378:	9a03      	ldr	r2, [sp, #12]
 800637a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800637e:	3304      	adds	r3, #4
 8006380:	f1b9 0f00 	cmp.w	r9, #0
 8006384:	d01f      	beq.n	80063c6 <__multiply+0x132>
 8006386:	6834      	ldr	r4, [r6, #0]
 8006388:	f105 0114 	add.w	r1, r5, #20
 800638c:	46b6      	mov	lr, r6
 800638e:	f04f 0a00 	mov.w	sl, #0
 8006392:	880a      	ldrh	r2, [r1, #0]
 8006394:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006398:	fb09 b202 	mla	r2, r9, r2, fp
 800639c:	4492      	add	sl, r2
 800639e:	b2a4      	uxth	r4, r4
 80063a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80063a4:	f84e 4b04 	str.w	r4, [lr], #4
 80063a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80063ac:	f8be 2000 	ldrh.w	r2, [lr]
 80063b0:	0c24      	lsrs	r4, r4, #16
 80063b2:	fb09 2404 	mla	r4, r9, r4, r2
 80063b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80063ba:	458c      	cmp	ip, r1
 80063bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80063c0:	d8e7      	bhi.n	8006392 <__multiply+0xfe>
 80063c2:	9a01      	ldr	r2, [sp, #4]
 80063c4:	50b4      	str	r4, [r6, r2]
 80063c6:	3604      	adds	r6, #4
 80063c8:	e7a3      	b.n	8006312 <__multiply+0x7e>
 80063ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1a5      	bne.n	800631e <__multiply+0x8a>
 80063d2:	3f01      	subs	r7, #1
 80063d4:	e7a1      	b.n	800631a <__multiply+0x86>
 80063d6:	bf00      	nop
 80063d8:	08007b7b 	.word	0x08007b7b
 80063dc:	08007bec 	.word	0x08007bec

080063e0 <__pow5mult>:
 80063e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	4615      	mov	r5, r2
 80063e6:	f012 0203 	ands.w	r2, r2, #3
 80063ea:	4606      	mov	r6, r0
 80063ec:	460f      	mov	r7, r1
 80063ee:	d007      	beq.n	8006400 <__pow5mult+0x20>
 80063f0:	4c25      	ldr	r4, [pc, #148]	; (8006488 <__pow5mult+0xa8>)
 80063f2:	3a01      	subs	r2, #1
 80063f4:	2300      	movs	r3, #0
 80063f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063fa:	f7ff fe9b 	bl	8006134 <__multadd>
 80063fe:	4607      	mov	r7, r0
 8006400:	10ad      	asrs	r5, r5, #2
 8006402:	d03d      	beq.n	8006480 <__pow5mult+0xa0>
 8006404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006406:	b97c      	cbnz	r4, 8006428 <__pow5mult+0x48>
 8006408:	2010      	movs	r0, #16
 800640a:	f7ff fe1b 	bl	8006044 <malloc>
 800640e:	4602      	mov	r2, r0
 8006410:	6270      	str	r0, [r6, #36]	; 0x24
 8006412:	b928      	cbnz	r0, 8006420 <__pow5mult+0x40>
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <__pow5mult+0xac>)
 8006416:	481e      	ldr	r0, [pc, #120]	; (8006490 <__pow5mult+0xb0>)
 8006418:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800641c:	f000 fce0 	bl	8006de0 <__assert_func>
 8006420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006424:	6004      	str	r4, [r0, #0]
 8006426:	60c4      	str	r4, [r0, #12]
 8006428:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800642c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006430:	b94c      	cbnz	r4, 8006446 <__pow5mult+0x66>
 8006432:	f240 2171 	movw	r1, #625	; 0x271
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff ff16 	bl	8006268 <__i2b>
 800643c:	2300      	movs	r3, #0
 800643e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006442:	4604      	mov	r4, r0
 8006444:	6003      	str	r3, [r0, #0]
 8006446:	f04f 0900 	mov.w	r9, #0
 800644a:	07eb      	lsls	r3, r5, #31
 800644c:	d50a      	bpl.n	8006464 <__pow5mult+0x84>
 800644e:	4639      	mov	r1, r7
 8006450:	4622      	mov	r2, r4
 8006452:	4630      	mov	r0, r6
 8006454:	f7ff ff1e 	bl	8006294 <__multiply>
 8006458:	4639      	mov	r1, r7
 800645a:	4680      	mov	r8, r0
 800645c:	4630      	mov	r0, r6
 800645e:	f7ff fe47 	bl	80060f0 <_Bfree>
 8006462:	4647      	mov	r7, r8
 8006464:	106d      	asrs	r5, r5, #1
 8006466:	d00b      	beq.n	8006480 <__pow5mult+0xa0>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	b938      	cbnz	r0, 800647c <__pow5mult+0x9c>
 800646c:	4622      	mov	r2, r4
 800646e:	4621      	mov	r1, r4
 8006470:	4630      	mov	r0, r6
 8006472:	f7ff ff0f 	bl	8006294 <__multiply>
 8006476:	6020      	str	r0, [r4, #0]
 8006478:	f8c0 9000 	str.w	r9, [r0]
 800647c:	4604      	mov	r4, r0
 800647e:	e7e4      	b.n	800644a <__pow5mult+0x6a>
 8006480:	4638      	mov	r0, r7
 8006482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006486:	bf00      	nop
 8006488:	08007d40 	.word	0x08007d40
 800648c:	08007b05 	.word	0x08007b05
 8006490:	08007bec 	.word	0x08007bec

08006494 <__lshift>:
 8006494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	460c      	mov	r4, r1
 800649a:	6849      	ldr	r1, [r1, #4]
 800649c:	6923      	ldr	r3, [r4, #16]
 800649e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	4607      	mov	r7, r0
 80064a6:	4691      	mov	r9, r2
 80064a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064ac:	f108 0601 	add.w	r6, r8, #1
 80064b0:	42b3      	cmp	r3, r6
 80064b2:	db0b      	blt.n	80064cc <__lshift+0x38>
 80064b4:	4638      	mov	r0, r7
 80064b6:	f7ff fddb 	bl	8006070 <_Balloc>
 80064ba:	4605      	mov	r5, r0
 80064bc:	b948      	cbnz	r0, 80064d2 <__lshift+0x3e>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b28      	ldr	r3, [pc, #160]	; (8006564 <__lshift+0xd0>)
 80064c2:	4829      	ldr	r0, [pc, #164]	; (8006568 <__lshift+0xd4>)
 80064c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064c8:	f000 fc8a 	bl	8006de0 <__assert_func>
 80064cc:	3101      	adds	r1, #1
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	e7ee      	b.n	80064b0 <__lshift+0x1c>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f100 0114 	add.w	r1, r0, #20
 80064d8:	f100 0210 	add.w	r2, r0, #16
 80064dc:	4618      	mov	r0, r3
 80064de:	4553      	cmp	r3, sl
 80064e0:	db33      	blt.n	800654a <__lshift+0xb6>
 80064e2:	6920      	ldr	r0, [r4, #16]
 80064e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064e8:	f104 0314 	add.w	r3, r4, #20
 80064ec:	f019 091f 	ands.w	r9, r9, #31
 80064f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064f8:	d02b      	beq.n	8006552 <__lshift+0xbe>
 80064fa:	f1c9 0e20 	rsb	lr, r9, #32
 80064fe:	468a      	mov	sl, r1
 8006500:	2200      	movs	r2, #0
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	fa00 f009 	lsl.w	r0, r0, r9
 8006508:	4302      	orrs	r2, r0
 800650a:	f84a 2b04 	str.w	r2, [sl], #4
 800650e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006512:	459c      	cmp	ip, r3
 8006514:	fa22 f20e 	lsr.w	r2, r2, lr
 8006518:	d8f3      	bhi.n	8006502 <__lshift+0x6e>
 800651a:	ebac 0304 	sub.w	r3, ip, r4
 800651e:	3b15      	subs	r3, #21
 8006520:	f023 0303 	bic.w	r3, r3, #3
 8006524:	3304      	adds	r3, #4
 8006526:	f104 0015 	add.w	r0, r4, #21
 800652a:	4584      	cmp	ip, r0
 800652c:	bf38      	it	cc
 800652e:	2304      	movcc	r3, #4
 8006530:	50ca      	str	r2, [r1, r3]
 8006532:	b10a      	cbz	r2, 8006538 <__lshift+0xa4>
 8006534:	f108 0602 	add.w	r6, r8, #2
 8006538:	3e01      	subs	r6, #1
 800653a:	4638      	mov	r0, r7
 800653c:	612e      	str	r6, [r5, #16]
 800653e:	4621      	mov	r1, r4
 8006540:	f7ff fdd6 	bl	80060f0 <_Bfree>
 8006544:	4628      	mov	r0, r5
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	f842 0f04 	str.w	r0, [r2, #4]!
 800654e:	3301      	adds	r3, #1
 8006550:	e7c5      	b.n	80064de <__lshift+0x4a>
 8006552:	3904      	subs	r1, #4
 8006554:	f853 2b04 	ldr.w	r2, [r3], #4
 8006558:	f841 2f04 	str.w	r2, [r1, #4]!
 800655c:	459c      	cmp	ip, r3
 800655e:	d8f9      	bhi.n	8006554 <__lshift+0xc0>
 8006560:	e7ea      	b.n	8006538 <__lshift+0xa4>
 8006562:	bf00      	nop
 8006564:	08007b7b 	.word	0x08007b7b
 8006568:	08007bec 	.word	0x08007bec

0800656c <__mcmp>:
 800656c:	b530      	push	{r4, r5, lr}
 800656e:	6902      	ldr	r2, [r0, #16]
 8006570:	690c      	ldr	r4, [r1, #16]
 8006572:	1b12      	subs	r2, r2, r4
 8006574:	d10e      	bne.n	8006594 <__mcmp+0x28>
 8006576:	f100 0314 	add.w	r3, r0, #20
 800657a:	3114      	adds	r1, #20
 800657c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006584:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006588:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800658c:	42a5      	cmp	r5, r4
 800658e:	d003      	beq.n	8006598 <__mcmp+0x2c>
 8006590:	d305      	bcc.n	800659e <__mcmp+0x32>
 8006592:	2201      	movs	r2, #1
 8006594:	4610      	mov	r0, r2
 8006596:	bd30      	pop	{r4, r5, pc}
 8006598:	4283      	cmp	r3, r0
 800659a:	d3f3      	bcc.n	8006584 <__mcmp+0x18>
 800659c:	e7fa      	b.n	8006594 <__mcmp+0x28>
 800659e:	f04f 32ff 	mov.w	r2, #4294967295
 80065a2:	e7f7      	b.n	8006594 <__mcmp+0x28>

080065a4 <__mdiff>:
 80065a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	460c      	mov	r4, r1
 80065aa:	4606      	mov	r6, r0
 80065ac:	4611      	mov	r1, r2
 80065ae:	4620      	mov	r0, r4
 80065b0:	4617      	mov	r7, r2
 80065b2:	f7ff ffdb 	bl	800656c <__mcmp>
 80065b6:	1e05      	subs	r5, r0, #0
 80065b8:	d110      	bne.n	80065dc <__mdiff+0x38>
 80065ba:	4629      	mov	r1, r5
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff fd57 	bl	8006070 <_Balloc>
 80065c2:	b930      	cbnz	r0, 80065d2 <__mdiff+0x2e>
 80065c4:	4b39      	ldr	r3, [pc, #228]	; (80066ac <__mdiff+0x108>)
 80065c6:	4602      	mov	r2, r0
 80065c8:	f240 2132 	movw	r1, #562	; 0x232
 80065cc:	4838      	ldr	r0, [pc, #224]	; (80066b0 <__mdiff+0x10c>)
 80065ce:	f000 fc07 	bl	8006de0 <__assert_func>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065dc:	bfa4      	itt	ge
 80065de:	463b      	movge	r3, r7
 80065e0:	4627      	movge	r7, r4
 80065e2:	4630      	mov	r0, r6
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	bfa6      	itte	ge
 80065e8:	461c      	movge	r4, r3
 80065ea:	2500      	movge	r5, #0
 80065ec:	2501      	movlt	r5, #1
 80065ee:	f7ff fd3f 	bl	8006070 <_Balloc>
 80065f2:	b920      	cbnz	r0, 80065fe <__mdiff+0x5a>
 80065f4:	4b2d      	ldr	r3, [pc, #180]	; (80066ac <__mdiff+0x108>)
 80065f6:	4602      	mov	r2, r0
 80065f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065fc:	e7e6      	b.n	80065cc <__mdiff+0x28>
 80065fe:	693e      	ldr	r6, [r7, #16]
 8006600:	60c5      	str	r5, [r0, #12]
 8006602:	6925      	ldr	r5, [r4, #16]
 8006604:	f107 0114 	add.w	r1, r7, #20
 8006608:	f104 0914 	add.w	r9, r4, #20
 800660c:	f100 0e14 	add.w	lr, r0, #20
 8006610:	f107 0210 	add.w	r2, r7, #16
 8006614:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006618:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800661c:	46f2      	mov	sl, lr
 800661e:	2700      	movs	r7, #0
 8006620:	f859 3b04 	ldr.w	r3, [r9], #4
 8006624:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006628:	fa1f f883 	uxth.w	r8, r3
 800662c:	fa17 f78b 	uxtah	r7, r7, fp
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	eba7 0808 	sub.w	r8, r7, r8
 8006636:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800663a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800663e:	fa1f f888 	uxth.w	r8, r8
 8006642:	141f      	asrs	r7, r3, #16
 8006644:	454d      	cmp	r5, r9
 8006646:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800664a:	f84a 3b04 	str.w	r3, [sl], #4
 800664e:	d8e7      	bhi.n	8006620 <__mdiff+0x7c>
 8006650:	1b2b      	subs	r3, r5, r4
 8006652:	3b15      	subs	r3, #21
 8006654:	f023 0303 	bic.w	r3, r3, #3
 8006658:	3304      	adds	r3, #4
 800665a:	3415      	adds	r4, #21
 800665c:	42a5      	cmp	r5, r4
 800665e:	bf38      	it	cc
 8006660:	2304      	movcc	r3, #4
 8006662:	4419      	add	r1, r3
 8006664:	4473      	add	r3, lr
 8006666:	469e      	mov	lr, r3
 8006668:	460d      	mov	r5, r1
 800666a:	4565      	cmp	r5, ip
 800666c:	d30e      	bcc.n	800668c <__mdiff+0xe8>
 800666e:	f10c 0203 	add.w	r2, ip, #3
 8006672:	1a52      	subs	r2, r2, r1
 8006674:	f022 0203 	bic.w	r2, r2, #3
 8006678:	3903      	subs	r1, #3
 800667a:	458c      	cmp	ip, r1
 800667c:	bf38      	it	cc
 800667e:	2200      	movcc	r2, #0
 8006680:	441a      	add	r2, r3
 8006682:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006686:	b17b      	cbz	r3, 80066a8 <__mdiff+0x104>
 8006688:	6106      	str	r6, [r0, #16]
 800668a:	e7a5      	b.n	80065d8 <__mdiff+0x34>
 800668c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006690:	fa17 f488 	uxtah	r4, r7, r8
 8006694:	1422      	asrs	r2, r4, #16
 8006696:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800669a:	b2a4      	uxth	r4, r4
 800669c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80066a0:	f84e 4b04 	str.w	r4, [lr], #4
 80066a4:	1417      	asrs	r7, r2, #16
 80066a6:	e7e0      	b.n	800666a <__mdiff+0xc6>
 80066a8:	3e01      	subs	r6, #1
 80066aa:	e7ea      	b.n	8006682 <__mdiff+0xde>
 80066ac:	08007b7b 	.word	0x08007b7b
 80066b0:	08007bec 	.word	0x08007bec

080066b4 <__d2b>:
 80066b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066b8:	4689      	mov	r9, r1
 80066ba:	2101      	movs	r1, #1
 80066bc:	ec57 6b10 	vmov	r6, r7, d0
 80066c0:	4690      	mov	r8, r2
 80066c2:	f7ff fcd5 	bl	8006070 <_Balloc>
 80066c6:	4604      	mov	r4, r0
 80066c8:	b930      	cbnz	r0, 80066d8 <__d2b+0x24>
 80066ca:	4602      	mov	r2, r0
 80066cc:	4b25      	ldr	r3, [pc, #148]	; (8006764 <__d2b+0xb0>)
 80066ce:	4826      	ldr	r0, [pc, #152]	; (8006768 <__d2b+0xb4>)
 80066d0:	f240 310a 	movw	r1, #778	; 0x30a
 80066d4:	f000 fb84 	bl	8006de0 <__assert_func>
 80066d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80066dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066e0:	bb35      	cbnz	r5, 8006730 <__d2b+0x7c>
 80066e2:	2e00      	cmp	r6, #0
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	d028      	beq.n	800673a <__d2b+0x86>
 80066e8:	4668      	mov	r0, sp
 80066ea:	9600      	str	r6, [sp, #0]
 80066ec:	f7ff fd8c 	bl	8006208 <__lo0bits>
 80066f0:	9900      	ldr	r1, [sp, #0]
 80066f2:	b300      	cbz	r0, 8006736 <__d2b+0x82>
 80066f4:	9a01      	ldr	r2, [sp, #4]
 80066f6:	f1c0 0320 	rsb	r3, r0, #32
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	430b      	orrs	r3, r1
 8006700:	40c2      	lsrs	r2, r0
 8006702:	6163      	str	r3, [r4, #20]
 8006704:	9201      	str	r2, [sp, #4]
 8006706:	9b01      	ldr	r3, [sp, #4]
 8006708:	61a3      	str	r3, [r4, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	bf14      	ite	ne
 800670e:	2202      	movne	r2, #2
 8006710:	2201      	moveq	r2, #1
 8006712:	6122      	str	r2, [r4, #16]
 8006714:	b1d5      	cbz	r5, 800674c <__d2b+0x98>
 8006716:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800671a:	4405      	add	r5, r0
 800671c:	f8c9 5000 	str.w	r5, [r9]
 8006720:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006724:	f8c8 0000 	str.w	r0, [r8]
 8006728:	4620      	mov	r0, r4
 800672a:	b003      	add	sp, #12
 800672c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006734:	e7d5      	b.n	80066e2 <__d2b+0x2e>
 8006736:	6161      	str	r1, [r4, #20]
 8006738:	e7e5      	b.n	8006706 <__d2b+0x52>
 800673a:	a801      	add	r0, sp, #4
 800673c:	f7ff fd64 	bl	8006208 <__lo0bits>
 8006740:	9b01      	ldr	r3, [sp, #4]
 8006742:	6163      	str	r3, [r4, #20]
 8006744:	2201      	movs	r2, #1
 8006746:	6122      	str	r2, [r4, #16]
 8006748:	3020      	adds	r0, #32
 800674a:	e7e3      	b.n	8006714 <__d2b+0x60>
 800674c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006750:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006754:	f8c9 0000 	str.w	r0, [r9]
 8006758:	6918      	ldr	r0, [r3, #16]
 800675a:	f7ff fd35 	bl	80061c8 <__hi0bits>
 800675e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006762:	e7df      	b.n	8006724 <__d2b+0x70>
 8006764:	08007b7b 	.word	0x08007b7b
 8006768:	08007bec 	.word	0x08007bec

0800676c <_calloc_r>:
 800676c:	b513      	push	{r0, r1, r4, lr}
 800676e:	434a      	muls	r2, r1
 8006770:	4611      	mov	r1, r2
 8006772:	9201      	str	r2, [sp, #4]
 8006774:	f000 f85a 	bl	800682c <_malloc_r>
 8006778:	4604      	mov	r4, r0
 800677a:	b118      	cbz	r0, 8006784 <_calloc_r+0x18>
 800677c:	9a01      	ldr	r2, [sp, #4]
 800677e:	2100      	movs	r1, #0
 8006780:	f7fe f860 	bl	8004844 <memset>
 8006784:	4620      	mov	r0, r4
 8006786:	b002      	add	sp, #8
 8006788:	bd10      	pop	{r4, pc}
	...

0800678c <_free_r>:
 800678c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800678e:	2900      	cmp	r1, #0
 8006790:	d048      	beq.n	8006824 <_free_r+0x98>
 8006792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006796:	9001      	str	r0, [sp, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f1a1 0404 	sub.w	r4, r1, #4
 800679e:	bfb8      	it	lt
 80067a0:	18e4      	addlt	r4, r4, r3
 80067a2:	f000 fca7 	bl	80070f4 <__malloc_lock>
 80067a6:	4a20      	ldr	r2, [pc, #128]	; (8006828 <_free_r+0x9c>)
 80067a8:	9801      	ldr	r0, [sp, #4]
 80067aa:	6813      	ldr	r3, [r2, #0]
 80067ac:	4615      	mov	r5, r2
 80067ae:	b933      	cbnz	r3, 80067be <_free_r+0x32>
 80067b0:	6063      	str	r3, [r4, #4]
 80067b2:	6014      	str	r4, [r2, #0]
 80067b4:	b003      	add	sp, #12
 80067b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067ba:	f000 bca1 	b.w	8007100 <__malloc_unlock>
 80067be:	42a3      	cmp	r3, r4
 80067c0:	d90b      	bls.n	80067da <_free_r+0x4e>
 80067c2:	6821      	ldr	r1, [r4, #0]
 80067c4:	1862      	adds	r2, r4, r1
 80067c6:	4293      	cmp	r3, r2
 80067c8:	bf04      	itt	eq
 80067ca:	681a      	ldreq	r2, [r3, #0]
 80067cc:	685b      	ldreq	r3, [r3, #4]
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	bf04      	itt	eq
 80067d2:	1852      	addeq	r2, r2, r1
 80067d4:	6022      	streq	r2, [r4, #0]
 80067d6:	602c      	str	r4, [r5, #0]
 80067d8:	e7ec      	b.n	80067b4 <_free_r+0x28>
 80067da:	461a      	mov	r2, r3
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	b10b      	cbz	r3, 80067e4 <_free_r+0x58>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d9fa      	bls.n	80067da <_free_r+0x4e>
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	1855      	adds	r5, r2, r1
 80067e8:	42a5      	cmp	r5, r4
 80067ea:	d10b      	bne.n	8006804 <_free_r+0x78>
 80067ec:	6824      	ldr	r4, [r4, #0]
 80067ee:	4421      	add	r1, r4
 80067f0:	1854      	adds	r4, r2, r1
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	6011      	str	r1, [r2, #0]
 80067f6:	d1dd      	bne.n	80067b4 <_free_r+0x28>
 80067f8:	681c      	ldr	r4, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	6053      	str	r3, [r2, #4]
 80067fe:	4421      	add	r1, r4
 8006800:	6011      	str	r1, [r2, #0]
 8006802:	e7d7      	b.n	80067b4 <_free_r+0x28>
 8006804:	d902      	bls.n	800680c <_free_r+0x80>
 8006806:	230c      	movs	r3, #12
 8006808:	6003      	str	r3, [r0, #0]
 800680a:	e7d3      	b.n	80067b4 <_free_r+0x28>
 800680c:	6825      	ldr	r5, [r4, #0]
 800680e:	1961      	adds	r1, r4, r5
 8006810:	428b      	cmp	r3, r1
 8006812:	bf04      	itt	eq
 8006814:	6819      	ldreq	r1, [r3, #0]
 8006816:	685b      	ldreq	r3, [r3, #4]
 8006818:	6063      	str	r3, [r4, #4]
 800681a:	bf04      	itt	eq
 800681c:	1949      	addeq	r1, r1, r5
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	6054      	str	r4, [r2, #4]
 8006822:	e7c7      	b.n	80067b4 <_free_r+0x28>
 8006824:	b003      	add	sp, #12
 8006826:	bd30      	pop	{r4, r5, pc}
 8006828:	200002bc 	.word	0x200002bc

0800682c <_malloc_r>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	1ccd      	adds	r5, r1, #3
 8006830:	f025 0503 	bic.w	r5, r5, #3
 8006834:	3508      	adds	r5, #8
 8006836:	2d0c      	cmp	r5, #12
 8006838:	bf38      	it	cc
 800683a:	250c      	movcc	r5, #12
 800683c:	2d00      	cmp	r5, #0
 800683e:	4606      	mov	r6, r0
 8006840:	db01      	blt.n	8006846 <_malloc_r+0x1a>
 8006842:	42a9      	cmp	r1, r5
 8006844:	d903      	bls.n	800684e <_malloc_r+0x22>
 8006846:	230c      	movs	r3, #12
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	2000      	movs	r0, #0
 800684c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800684e:	f000 fc51 	bl	80070f4 <__malloc_lock>
 8006852:	4921      	ldr	r1, [pc, #132]	; (80068d8 <_malloc_r+0xac>)
 8006854:	680a      	ldr	r2, [r1, #0]
 8006856:	4614      	mov	r4, r2
 8006858:	b99c      	cbnz	r4, 8006882 <_malloc_r+0x56>
 800685a:	4f20      	ldr	r7, [pc, #128]	; (80068dc <_malloc_r+0xb0>)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	b923      	cbnz	r3, 800686a <_malloc_r+0x3e>
 8006860:	4621      	mov	r1, r4
 8006862:	4630      	mov	r0, r6
 8006864:	f000 f996 	bl	8006b94 <_sbrk_r>
 8006868:	6038      	str	r0, [r7, #0]
 800686a:	4629      	mov	r1, r5
 800686c:	4630      	mov	r0, r6
 800686e:	f000 f991 	bl	8006b94 <_sbrk_r>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d123      	bne.n	80068be <_malloc_r+0x92>
 8006876:	230c      	movs	r3, #12
 8006878:	6033      	str	r3, [r6, #0]
 800687a:	4630      	mov	r0, r6
 800687c:	f000 fc40 	bl	8007100 <__malloc_unlock>
 8006880:	e7e3      	b.n	800684a <_malloc_r+0x1e>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	1b5b      	subs	r3, r3, r5
 8006886:	d417      	bmi.n	80068b8 <_malloc_r+0x8c>
 8006888:	2b0b      	cmp	r3, #11
 800688a:	d903      	bls.n	8006894 <_malloc_r+0x68>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	441c      	add	r4, r3
 8006890:	6025      	str	r5, [r4, #0]
 8006892:	e004      	b.n	800689e <_malloc_r+0x72>
 8006894:	6863      	ldr	r3, [r4, #4]
 8006896:	42a2      	cmp	r2, r4
 8006898:	bf0c      	ite	eq
 800689a:	600b      	streq	r3, [r1, #0]
 800689c:	6053      	strne	r3, [r2, #4]
 800689e:	4630      	mov	r0, r6
 80068a0:	f000 fc2e 	bl	8007100 <__malloc_unlock>
 80068a4:	f104 000b 	add.w	r0, r4, #11
 80068a8:	1d23      	adds	r3, r4, #4
 80068aa:	f020 0007 	bic.w	r0, r0, #7
 80068ae:	1ac2      	subs	r2, r0, r3
 80068b0:	d0cc      	beq.n	800684c <_malloc_r+0x20>
 80068b2:	1a1b      	subs	r3, r3, r0
 80068b4:	50a3      	str	r3, [r4, r2]
 80068b6:	e7c9      	b.n	800684c <_malloc_r+0x20>
 80068b8:	4622      	mov	r2, r4
 80068ba:	6864      	ldr	r4, [r4, #4]
 80068bc:	e7cc      	b.n	8006858 <_malloc_r+0x2c>
 80068be:	1cc4      	adds	r4, r0, #3
 80068c0:	f024 0403 	bic.w	r4, r4, #3
 80068c4:	42a0      	cmp	r0, r4
 80068c6:	d0e3      	beq.n	8006890 <_malloc_r+0x64>
 80068c8:	1a21      	subs	r1, r4, r0
 80068ca:	4630      	mov	r0, r6
 80068cc:	f000 f962 	bl	8006b94 <_sbrk_r>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d1dd      	bne.n	8006890 <_malloc_r+0x64>
 80068d4:	e7cf      	b.n	8006876 <_malloc_r+0x4a>
 80068d6:	bf00      	nop
 80068d8:	200002bc 	.word	0x200002bc
 80068dc:	200002c0 	.word	0x200002c0

080068e0 <__sfputc_r>:
 80068e0:	6893      	ldr	r3, [r2, #8]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	b410      	push	{r4}
 80068e8:	6093      	str	r3, [r2, #8]
 80068ea:	da08      	bge.n	80068fe <__sfputc_r+0x1e>
 80068ec:	6994      	ldr	r4, [r2, #24]
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	db01      	blt.n	80068f6 <__sfputc_r+0x16>
 80068f2:	290a      	cmp	r1, #10
 80068f4:	d103      	bne.n	80068fe <__sfputc_r+0x1e>
 80068f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068fa:	f000 b99f 	b.w	8006c3c <__swbuf_r>
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	1c58      	adds	r0, r3, #1
 8006902:	6010      	str	r0, [r2, #0]
 8006904:	7019      	strb	r1, [r3, #0]
 8006906:	4608      	mov	r0, r1
 8006908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800690c:	4770      	bx	lr

0800690e <__sfputs_r>:
 800690e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006910:	4606      	mov	r6, r0
 8006912:	460f      	mov	r7, r1
 8006914:	4614      	mov	r4, r2
 8006916:	18d5      	adds	r5, r2, r3
 8006918:	42ac      	cmp	r4, r5
 800691a:	d101      	bne.n	8006920 <__sfputs_r+0x12>
 800691c:	2000      	movs	r0, #0
 800691e:	e007      	b.n	8006930 <__sfputs_r+0x22>
 8006920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006924:	463a      	mov	r2, r7
 8006926:	4630      	mov	r0, r6
 8006928:	f7ff ffda 	bl	80068e0 <__sfputc_r>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d1f3      	bne.n	8006918 <__sfputs_r+0xa>
 8006930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006934 <_vfiprintf_r>:
 8006934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	460d      	mov	r5, r1
 800693a:	b09d      	sub	sp, #116	; 0x74
 800693c:	4614      	mov	r4, r2
 800693e:	4698      	mov	r8, r3
 8006940:	4606      	mov	r6, r0
 8006942:	b118      	cbz	r0, 800694c <_vfiprintf_r+0x18>
 8006944:	6983      	ldr	r3, [r0, #24]
 8006946:	b90b      	cbnz	r3, 800694c <_vfiprintf_r+0x18>
 8006948:	f7ff fad6 	bl	8005ef8 <__sinit>
 800694c:	4b89      	ldr	r3, [pc, #548]	; (8006b74 <_vfiprintf_r+0x240>)
 800694e:	429d      	cmp	r5, r3
 8006950:	d11b      	bne.n	800698a <_vfiprintf_r+0x56>
 8006952:	6875      	ldr	r5, [r6, #4]
 8006954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006956:	07d9      	lsls	r1, r3, #31
 8006958:	d405      	bmi.n	8006966 <_vfiprintf_r+0x32>
 800695a:	89ab      	ldrh	r3, [r5, #12]
 800695c:	059a      	lsls	r2, r3, #22
 800695e:	d402      	bmi.n	8006966 <_vfiprintf_r+0x32>
 8006960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006962:	f7ff fb6c 	bl	800603e <__retarget_lock_acquire_recursive>
 8006966:	89ab      	ldrh	r3, [r5, #12]
 8006968:	071b      	lsls	r3, r3, #28
 800696a:	d501      	bpl.n	8006970 <_vfiprintf_r+0x3c>
 800696c:	692b      	ldr	r3, [r5, #16]
 800696e:	b9eb      	cbnz	r3, 80069ac <_vfiprintf_r+0x78>
 8006970:	4629      	mov	r1, r5
 8006972:	4630      	mov	r0, r6
 8006974:	f000 f9c6 	bl	8006d04 <__swsetup_r>
 8006978:	b1c0      	cbz	r0, 80069ac <_vfiprintf_r+0x78>
 800697a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800697c:	07dc      	lsls	r4, r3, #31
 800697e:	d50e      	bpl.n	800699e <_vfiprintf_r+0x6a>
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	b01d      	add	sp, #116	; 0x74
 8006986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698a:	4b7b      	ldr	r3, [pc, #492]	; (8006b78 <_vfiprintf_r+0x244>)
 800698c:	429d      	cmp	r5, r3
 800698e:	d101      	bne.n	8006994 <_vfiprintf_r+0x60>
 8006990:	68b5      	ldr	r5, [r6, #8]
 8006992:	e7df      	b.n	8006954 <_vfiprintf_r+0x20>
 8006994:	4b79      	ldr	r3, [pc, #484]	; (8006b7c <_vfiprintf_r+0x248>)
 8006996:	429d      	cmp	r5, r3
 8006998:	bf08      	it	eq
 800699a:	68f5      	ldreq	r5, [r6, #12]
 800699c:	e7da      	b.n	8006954 <_vfiprintf_r+0x20>
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	0598      	lsls	r0, r3, #22
 80069a2:	d4ed      	bmi.n	8006980 <_vfiprintf_r+0x4c>
 80069a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a6:	f7ff fb4b 	bl	8006040 <__retarget_lock_release_recursive>
 80069aa:	e7e9      	b.n	8006980 <_vfiprintf_r+0x4c>
 80069ac:	2300      	movs	r3, #0
 80069ae:	9309      	str	r3, [sp, #36]	; 0x24
 80069b0:	2320      	movs	r3, #32
 80069b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ba:	2330      	movs	r3, #48	; 0x30
 80069bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b80 <_vfiprintf_r+0x24c>
 80069c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069c4:	f04f 0901 	mov.w	r9, #1
 80069c8:	4623      	mov	r3, r4
 80069ca:	469a      	mov	sl, r3
 80069cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069d0:	b10a      	cbz	r2, 80069d6 <_vfiprintf_r+0xa2>
 80069d2:	2a25      	cmp	r2, #37	; 0x25
 80069d4:	d1f9      	bne.n	80069ca <_vfiprintf_r+0x96>
 80069d6:	ebba 0b04 	subs.w	fp, sl, r4
 80069da:	d00b      	beq.n	80069f4 <_vfiprintf_r+0xc0>
 80069dc:	465b      	mov	r3, fp
 80069de:	4622      	mov	r2, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff ff93 	bl	800690e <__sfputs_r>
 80069e8:	3001      	adds	r0, #1
 80069ea:	f000 80aa 	beq.w	8006b42 <_vfiprintf_r+0x20e>
 80069ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f0:	445a      	add	r2, fp
 80069f2:	9209      	str	r2, [sp, #36]	; 0x24
 80069f4:	f89a 3000 	ldrb.w	r3, [sl]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80a2 	beq.w	8006b42 <_vfiprintf_r+0x20e>
 80069fe:	2300      	movs	r3, #0
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295
 8006a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a08:	f10a 0a01 	add.w	sl, sl, #1
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	9307      	str	r3, [sp, #28]
 8006a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a14:	931a      	str	r3, [sp, #104]	; 0x68
 8006a16:	4654      	mov	r4, sl
 8006a18:	2205      	movs	r2, #5
 8006a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1e:	4858      	ldr	r0, [pc, #352]	; (8006b80 <_vfiprintf_r+0x24c>)
 8006a20:	f7f9 fbfe 	bl	8000220 <memchr>
 8006a24:	9a04      	ldr	r2, [sp, #16]
 8006a26:	b9d8      	cbnz	r0, 8006a60 <_vfiprintf_r+0x12c>
 8006a28:	06d1      	lsls	r1, r2, #27
 8006a2a:	bf44      	itt	mi
 8006a2c:	2320      	movmi	r3, #32
 8006a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a32:	0713      	lsls	r3, r2, #28
 8006a34:	bf44      	itt	mi
 8006a36:	232b      	movmi	r3, #43	; 0x2b
 8006a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a40:	2b2a      	cmp	r3, #42	; 0x2a
 8006a42:	d015      	beq.n	8006a70 <_vfiprintf_r+0x13c>
 8006a44:	9a07      	ldr	r2, [sp, #28]
 8006a46:	4654      	mov	r4, sl
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f04f 0c0a 	mov.w	ip, #10
 8006a4e:	4621      	mov	r1, r4
 8006a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a54:	3b30      	subs	r3, #48	; 0x30
 8006a56:	2b09      	cmp	r3, #9
 8006a58:	d94e      	bls.n	8006af8 <_vfiprintf_r+0x1c4>
 8006a5a:	b1b0      	cbz	r0, 8006a8a <_vfiprintf_r+0x156>
 8006a5c:	9207      	str	r2, [sp, #28]
 8006a5e:	e014      	b.n	8006a8a <_vfiprintf_r+0x156>
 8006a60:	eba0 0308 	sub.w	r3, r0, r8
 8006a64:	fa09 f303 	lsl.w	r3, r9, r3
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	46a2      	mov	sl, r4
 8006a6e:	e7d2      	b.n	8006a16 <_vfiprintf_r+0xe2>
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	1d19      	adds	r1, r3, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	9103      	str	r1, [sp, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bfbb      	ittet	lt
 8006a7c:	425b      	neglt	r3, r3
 8006a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a82:	9307      	strge	r3, [sp, #28]
 8006a84:	9307      	strlt	r3, [sp, #28]
 8006a86:	bfb8      	it	lt
 8006a88:	9204      	strlt	r2, [sp, #16]
 8006a8a:	7823      	ldrb	r3, [r4, #0]
 8006a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a8e:	d10c      	bne.n	8006aaa <_vfiprintf_r+0x176>
 8006a90:	7863      	ldrb	r3, [r4, #1]
 8006a92:	2b2a      	cmp	r3, #42	; 0x2a
 8006a94:	d135      	bne.n	8006b02 <_vfiprintf_r+0x1ce>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	1d1a      	adds	r2, r3, #4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	9203      	str	r2, [sp, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bfb8      	it	lt
 8006aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006aa6:	3402      	adds	r4, #2
 8006aa8:	9305      	str	r3, [sp, #20]
 8006aaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b90 <_vfiprintf_r+0x25c>
 8006aae:	7821      	ldrb	r1, [r4, #0]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	4650      	mov	r0, sl
 8006ab4:	f7f9 fbb4 	bl	8000220 <memchr>
 8006ab8:	b140      	cbz	r0, 8006acc <_vfiprintf_r+0x198>
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	eba0 000a 	sub.w	r0, r0, sl
 8006ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	4303      	orrs	r3, r0
 8006ac8:	3401      	adds	r4, #1
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad0:	482c      	ldr	r0, [pc, #176]	; (8006b84 <_vfiprintf_r+0x250>)
 8006ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ad6:	2206      	movs	r2, #6
 8006ad8:	f7f9 fba2 	bl	8000220 <memchr>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d03f      	beq.n	8006b60 <_vfiprintf_r+0x22c>
 8006ae0:	4b29      	ldr	r3, [pc, #164]	; (8006b88 <_vfiprintf_r+0x254>)
 8006ae2:	bb1b      	cbnz	r3, 8006b2c <_vfiprintf_r+0x1f8>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	3307      	adds	r3, #7
 8006ae8:	f023 0307 	bic.w	r3, r3, #7
 8006aec:	3308      	adds	r3, #8
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af2:	443b      	add	r3, r7
 8006af4:	9309      	str	r3, [sp, #36]	; 0x24
 8006af6:	e767      	b.n	80069c8 <_vfiprintf_r+0x94>
 8006af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006afc:	460c      	mov	r4, r1
 8006afe:	2001      	movs	r0, #1
 8006b00:	e7a5      	b.n	8006a4e <_vfiprintf_r+0x11a>
 8006b02:	2300      	movs	r3, #0
 8006b04:	3401      	adds	r4, #1
 8006b06:	9305      	str	r3, [sp, #20]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f04f 0c0a 	mov.w	ip, #10
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b14:	3a30      	subs	r2, #48	; 0x30
 8006b16:	2a09      	cmp	r2, #9
 8006b18:	d903      	bls.n	8006b22 <_vfiprintf_r+0x1ee>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0c5      	beq.n	8006aaa <_vfiprintf_r+0x176>
 8006b1e:	9105      	str	r1, [sp, #20]
 8006b20:	e7c3      	b.n	8006aaa <_vfiprintf_r+0x176>
 8006b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b26:	4604      	mov	r4, r0
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e7f0      	b.n	8006b0e <_vfiprintf_r+0x1da>
 8006b2c:	ab03      	add	r3, sp, #12
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	462a      	mov	r2, r5
 8006b32:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <_vfiprintf_r+0x258>)
 8006b34:	a904      	add	r1, sp, #16
 8006b36:	4630      	mov	r0, r6
 8006b38:	f7fd ff2c 	bl	8004994 <_printf_float>
 8006b3c:	4607      	mov	r7, r0
 8006b3e:	1c78      	adds	r0, r7, #1
 8006b40:	d1d6      	bne.n	8006af0 <_vfiprintf_r+0x1bc>
 8006b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b44:	07d9      	lsls	r1, r3, #31
 8006b46:	d405      	bmi.n	8006b54 <_vfiprintf_r+0x220>
 8006b48:	89ab      	ldrh	r3, [r5, #12]
 8006b4a:	059a      	lsls	r2, r3, #22
 8006b4c:	d402      	bmi.n	8006b54 <_vfiprintf_r+0x220>
 8006b4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b50:	f7ff fa76 	bl	8006040 <__retarget_lock_release_recursive>
 8006b54:	89ab      	ldrh	r3, [r5, #12]
 8006b56:	065b      	lsls	r3, r3, #25
 8006b58:	f53f af12 	bmi.w	8006980 <_vfiprintf_r+0x4c>
 8006b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b5e:	e711      	b.n	8006984 <_vfiprintf_r+0x50>
 8006b60:	ab03      	add	r3, sp, #12
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <_vfiprintf_r+0x258>)
 8006b68:	a904      	add	r1, sp, #16
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7fe f9b6 	bl	8004edc <_printf_i>
 8006b70:	e7e4      	b.n	8006b3c <_vfiprintf_r+0x208>
 8006b72:	bf00      	nop
 8006b74:	08007bac 	.word	0x08007bac
 8006b78:	08007bcc 	.word	0x08007bcc
 8006b7c:	08007b8c 	.word	0x08007b8c
 8006b80:	08007d4c 	.word	0x08007d4c
 8006b84:	08007d56 	.word	0x08007d56
 8006b88:	08004995 	.word	0x08004995
 8006b8c:	0800690f 	.word	0x0800690f
 8006b90:	08007d52 	.word	0x08007d52

08006b94 <_sbrk_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4d06      	ldr	r5, [pc, #24]	; (8006bb0 <_sbrk_r+0x1c>)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	f7fb f9ec 	bl	8001f7c <_sbrk>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d102      	bne.n	8006bae <_sbrk_r+0x1a>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	b103      	cbz	r3, 8006bae <_sbrk_r+0x1a>
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	200003dc 	.word	0x200003dc

08006bb4 <__sread>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbc:	f000 faa6 	bl	800710c <_read_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	bfab      	itete	ge
 8006bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bc8:	181b      	addge	r3, r3, r0
 8006bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bce:	bfac      	ite	ge
 8006bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bd2:	81a3      	strhlt	r3, [r4, #12]
 8006bd4:	bd10      	pop	{r4, pc}

08006bd6 <__swrite>:
 8006bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bda:	461f      	mov	r7, r3
 8006bdc:	898b      	ldrh	r3, [r1, #12]
 8006bde:	05db      	lsls	r3, r3, #23
 8006be0:	4605      	mov	r5, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	4616      	mov	r6, r2
 8006be6:	d505      	bpl.n	8006bf4 <__swrite+0x1e>
 8006be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bec:	2302      	movs	r3, #2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f000 f9f8 	bl	8006fe4 <_lseek_r>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	4632      	mov	r2, r6
 8006c02:	463b      	mov	r3, r7
 8006c04:	4628      	mov	r0, r5
 8006c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0a:	f000 b869 	b.w	8006ce0 <_write_r>

08006c0e <__sseek>:
 8006c0e:	b510      	push	{r4, lr}
 8006c10:	460c      	mov	r4, r1
 8006c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c16:	f000 f9e5 	bl	8006fe4 <_lseek_r>
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	bf15      	itete	ne
 8006c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c2a:	81a3      	strheq	r3, [r4, #12]
 8006c2c:	bf18      	it	ne
 8006c2e:	81a3      	strhne	r3, [r4, #12]
 8006c30:	bd10      	pop	{r4, pc}

08006c32 <__sclose>:
 8006c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c36:	f000 b8f1 	b.w	8006e1c <_close_r>
	...

08006c3c <__swbuf_r>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	460e      	mov	r6, r1
 8006c40:	4614      	mov	r4, r2
 8006c42:	4605      	mov	r5, r0
 8006c44:	b118      	cbz	r0, 8006c4e <__swbuf_r+0x12>
 8006c46:	6983      	ldr	r3, [r0, #24]
 8006c48:	b90b      	cbnz	r3, 8006c4e <__swbuf_r+0x12>
 8006c4a:	f7ff f955 	bl	8005ef8 <__sinit>
 8006c4e:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <__swbuf_r+0x98>)
 8006c50:	429c      	cmp	r4, r3
 8006c52:	d12b      	bne.n	8006cac <__swbuf_r+0x70>
 8006c54:	686c      	ldr	r4, [r5, #4]
 8006c56:	69a3      	ldr	r3, [r4, #24]
 8006c58:	60a3      	str	r3, [r4, #8]
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	071a      	lsls	r2, r3, #28
 8006c5e:	d52f      	bpl.n	8006cc0 <__swbuf_r+0x84>
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	b36b      	cbz	r3, 8006cc0 <__swbuf_r+0x84>
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	6820      	ldr	r0, [r4, #0]
 8006c68:	1ac0      	subs	r0, r0, r3
 8006c6a:	6963      	ldr	r3, [r4, #20]
 8006c6c:	b2f6      	uxtb	r6, r6
 8006c6e:	4283      	cmp	r3, r0
 8006c70:	4637      	mov	r7, r6
 8006c72:	dc04      	bgt.n	8006c7e <__swbuf_r+0x42>
 8006c74:	4621      	mov	r1, r4
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 f966 	bl	8006f48 <_fflush_r>
 8006c7c:	bb30      	cbnz	r0, 8006ccc <__swbuf_r+0x90>
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	60a3      	str	r3, [r4, #8]
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	6022      	str	r2, [r4, #0]
 8006c8a:	701e      	strb	r6, [r3, #0]
 8006c8c:	6963      	ldr	r3, [r4, #20]
 8006c8e:	3001      	adds	r0, #1
 8006c90:	4283      	cmp	r3, r0
 8006c92:	d004      	beq.n	8006c9e <__swbuf_r+0x62>
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	07db      	lsls	r3, r3, #31
 8006c98:	d506      	bpl.n	8006ca8 <__swbuf_r+0x6c>
 8006c9a:	2e0a      	cmp	r6, #10
 8006c9c:	d104      	bne.n	8006ca8 <__swbuf_r+0x6c>
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f000 f951 	bl	8006f48 <_fflush_r>
 8006ca6:	b988      	cbnz	r0, 8006ccc <__swbuf_r+0x90>
 8006ca8:	4638      	mov	r0, r7
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <__swbuf_r+0x9c>)
 8006cae:	429c      	cmp	r4, r3
 8006cb0:	d101      	bne.n	8006cb6 <__swbuf_r+0x7a>
 8006cb2:	68ac      	ldr	r4, [r5, #8]
 8006cb4:	e7cf      	b.n	8006c56 <__swbuf_r+0x1a>
 8006cb6:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <__swbuf_r+0xa0>)
 8006cb8:	429c      	cmp	r4, r3
 8006cba:	bf08      	it	eq
 8006cbc:	68ec      	ldreq	r4, [r5, #12]
 8006cbe:	e7ca      	b.n	8006c56 <__swbuf_r+0x1a>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f81e 	bl	8006d04 <__swsetup_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d0cb      	beq.n	8006c64 <__swbuf_r+0x28>
 8006ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8006cd0:	e7ea      	b.n	8006ca8 <__swbuf_r+0x6c>
 8006cd2:	bf00      	nop
 8006cd4:	08007bac 	.word	0x08007bac
 8006cd8:	08007bcc 	.word	0x08007bcc
 8006cdc:	08007b8c 	.word	0x08007b8c

08006ce0 <_write_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4d07      	ldr	r5, [pc, #28]	; (8006d00 <_write_r+0x20>)
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	4608      	mov	r0, r1
 8006ce8:	4611      	mov	r1, r2
 8006cea:	2200      	movs	r2, #0
 8006cec:	602a      	str	r2, [r5, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f7fb f8f3 	bl	8001eda <_write>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_write_r+0x1e>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_write_r+0x1e>
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	200003dc 	.word	0x200003dc

08006d04 <__swsetup_r>:
 8006d04:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <__swsetup_r+0xcc>)
 8006d06:	b570      	push	{r4, r5, r6, lr}
 8006d08:	681d      	ldr	r5, [r3, #0]
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	b125      	cbz	r5, 8006d1a <__swsetup_r+0x16>
 8006d10:	69ab      	ldr	r3, [r5, #24]
 8006d12:	b913      	cbnz	r3, 8006d1a <__swsetup_r+0x16>
 8006d14:	4628      	mov	r0, r5
 8006d16:	f7ff f8ef 	bl	8005ef8 <__sinit>
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <__swsetup_r+0xd0>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	d10f      	bne.n	8006d40 <__swsetup_r+0x3c>
 8006d20:	686c      	ldr	r4, [r5, #4]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d28:	0719      	lsls	r1, r3, #28
 8006d2a:	d42c      	bmi.n	8006d86 <__swsetup_r+0x82>
 8006d2c:	06dd      	lsls	r5, r3, #27
 8006d2e:	d411      	bmi.n	8006d54 <__swsetup_r+0x50>
 8006d30:	2309      	movs	r3, #9
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3e:	e03e      	b.n	8006dbe <__swsetup_r+0xba>
 8006d40:	4b25      	ldr	r3, [pc, #148]	; (8006dd8 <__swsetup_r+0xd4>)
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d101      	bne.n	8006d4a <__swsetup_r+0x46>
 8006d46:	68ac      	ldr	r4, [r5, #8]
 8006d48:	e7eb      	b.n	8006d22 <__swsetup_r+0x1e>
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <__swsetup_r+0xd8>)
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	bf08      	it	eq
 8006d50:	68ec      	ldreq	r4, [r5, #12]
 8006d52:	e7e6      	b.n	8006d22 <__swsetup_r+0x1e>
 8006d54:	0758      	lsls	r0, r3, #29
 8006d56:	d512      	bpl.n	8006d7e <__swsetup_r+0x7a>
 8006d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5a:	b141      	cbz	r1, 8006d6e <__swsetup_r+0x6a>
 8006d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d60:	4299      	cmp	r1, r3
 8006d62:	d002      	beq.n	8006d6a <__swsetup_r+0x66>
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff fd11 	bl	800678c <_free_r>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	2300      	movs	r3, #0
 8006d78:	6063      	str	r3, [r4, #4]
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f043 0308 	orr.w	r3, r3, #8
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	6923      	ldr	r3, [r4, #16]
 8006d88:	b94b      	cbnz	r3, 8006d9e <__swsetup_r+0x9a>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d94:	d003      	beq.n	8006d9e <__swsetup_r+0x9a>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f000 f959 	bl	8007050 <__smakebuf_r>
 8006d9e:	89a0      	ldrh	r0, [r4, #12]
 8006da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da4:	f010 0301 	ands.w	r3, r0, #1
 8006da8:	d00a      	beq.n	8006dc0 <__swsetup_r+0xbc>
 8006daa:	2300      	movs	r3, #0
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	6963      	ldr	r3, [r4, #20]
 8006db0:	425b      	negs	r3, r3
 8006db2:	61a3      	str	r3, [r4, #24]
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	b943      	cbnz	r3, 8006dca <__swsetup_r+0xc6>
 8006db8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dbc:	d1ba      	bne.n	8006d34 <__swsetup_r+0x30>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	0781      	lsls	r1, r0, #30
 8006dc2:	bf58      	it	pl
 8006dc4:	6963      	ldrpl	r3, [r4, #20]
 8006dc6:	60a3      	str	r3, [r4, #8]
 8006dc8:	e7f4      	b.n	8006db4 <__swsetup_r+0xb0>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e7f7      	b.n	8006dbe <__swsetup_r+0xba>
 8006dce:	bf00      	nop
 8006dd0:	200000a4 	.word	0x200000a4
 8006dd4:	08007bac 	.word	0x08007bac
 8006dd8:	08007bcc 	.word	0x08007bcc
 8006ddc:	08007b8c 	.word	0x08007b8c

08006de0 <__assert_func>:
 8006de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006de2:	4614      	mov	r4, r2
 8006de4:	461a      	mov	r2, r3
 8006de6:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <__assert_func+0x2c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4605      	mov	r5, r0
 8006dec:	68d8      	ldr	r0, [r3, #12]
 8006dee:	b14c      	cbz	r4, 8006e04 <__assert_func+0x24>
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <__assert_func+0x30>)
 8006df2:	9100      	str	r1, [sp, #0]
 8006df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006df8:	4906      	ldr	r1, [pc, #24]	; (8006e14 <__assert_func+0x34>)
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	f000 f8e0 	bl	8006fc0 <fiprintf>
 8006e00:	f000 f9a3 	bl	800714a <abort>
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <__assert_func+0x38>)
 8006e06:	461c      	mov	r4, r3
 8006e08:	e7f3      	b.n	8006df2 <__assert_func+0x12>
 8006e0a:	bf00      	nop
 8006e0c:	200000a4 	.word	0x200000a4
 8006e10:	08007d5d 	.word	0x08007d5d
 8006e14:	08007d6a 	.word	0x08007d6a
 8006e18:	08007d98 	.word	0x08007d98

08006e1c <_close_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	; (8006e38 <_close_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7fb f873 	bl	8001f12 <_close>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_close_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_close_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	200003dc 	.word	0x200003dc

08006e3c <__sflush_r>:
 8006e3c:	898a      	ldrh	r2, [r1, #12]
 8006e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e42:	4605      	mov	r5, r0
 8006e44:	0710      	lsls	r0, r2, #28
 8006e46:	460c      	mov	r4, r1
 8006e48:	d458      	bmi.n	8006efc <__sflush_r+0xc0>
 8006e4a:	684b      	ldr	r3, [r1, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dc05      	bgt.n	8006e5c <__sflush_r+0x20>
 8006e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dc02      	bgt.n	8006e5c <__sflush_r+0x20>
 8006e56:	2000      	movs	r0, #0
 8006e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e5e:	2e00      	cmp	r6, #0
 8006e60:	d0f9      	beq.n	8006e56 <__sflush_r+0x1a>
 8006e62:	2300      	movs	r3, #0
 8006e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e68:	682f      	ldr	r7, [r5, #0]
 8006e6a:	602b      	str	r3, [r5, #0]
 8006e6c:	d032      	beq.n	8006ed4 <__sflush_r+0x98>
 8006e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	075a      	lsls	r2, r3, #29
 8006e74:	d505      	bpl.n	8006e82 <__sflush_r+0x46>
 8006e76:	6863      	ldr	r3, [r4, #4]
 8006e78:	1ac0      	subs	r0, r0, r3
 8006e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e7c:	b10b      	cbz	r3, 8006e82 <__sflush_r+0x46>
 8006e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e80:	1ac0      	subs	r0, r0, r3
 8006e82:	2300      	movs	r3, #0
 8006e84:	4602      	mov	r2, r0
 8006e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e88:	6a21      	ldr	r1, [r4, #32]
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b0      	blx	r6
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	d106      	bne.n	8006ea2 <__sflush_r+0x66>
 8006e94:	6829      	ldr	r1, [r5, #0]
 8006e96:	291d      	cmp	r1, #29
 8006e98:	d82c      	bhi.n	8006ef4 <__sflush_r+0xb8>
 8006e9a:	4a2a      	ldr	r2, [pc, #168]	; (8006f44 <__sflush_r+0x108>)
 8006e9c:	40ca      	lsrs	r2, r1
 8006e9e:	07d6      	lsls	r6, r2, #31
 8006ea0:	d528      	bpl.n	8006ef4 <__sflush_r+0xb8>
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	6062      	str	r2, [r4, #4]
 8006ea6:	04d9      	lsls	r1, r3, #19
 8006ea8:	6922      	ldr	r2, [r4, #16]
 8006eaa:	6022      	str	r2, [r4, #0]
 8006eac:	d504      	bpl.n	8006eb8 <__sflush_r+0x7c>
 8006eae:	1c42      	adds	r2, r0, #1
 8006eb0:	d101      	bne.n	8006eb6 <__sflush_r+0x7a>
 8006eb2:	682b      	ldr	r3, [r5, #0]
 8006eb4:	b903      	cbnz	r3, 8006eb8 <__sflush_r+0x7c>
 8006eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8006eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eba:	602f      	str	r7, [r5, #0]
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d0ca      	beq.n	8006e56 <__sflush_r+0x1a>
 8006ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	d002      	beq.n	8006ece <__sflush_r+0x92>
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f7ff fc5f 	bl	800678c <_free_r>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ed2:	e7c1      	b.n	8006e58 <__sflush_r+0x1c>
 8006ed4:	6a21      	ldr	r1, [r4, #32]
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b0      	blx	r6
 8006edc:	1c41      	adds	r1, r0, #1
 8006ede:	d1c7      	bne.n	8006e70 <__sflush_r+0x34>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0c4      	beq.n	8006e70 <__sflush_r+0x34>
 8006ee6:	2b1d      	cmp	r3, #29
 8006ee8:	d001      	beq.n	8006eee <__sflush_r+0xb2>
 8006eea:	2b16      	cmp	r3, #22
 8006eec:	d101      	bne.n	8006ef2 <__sflush_r+0xb6>
 8006eee:	602f      	str	r7, [r5, #0]
 8006ef0:	e7b1      	b.n	8006e56 <__sflush_r+0x1a>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	e7ad      	b.n	8006e58 <__sflush_r+0x1c>
 8006efc:	690f      	ldr	r7, [r1, #16]
 8006efe:	2f00      	cmp	r7, #0
 8006f00:	d0a9      	beq.n	8006e56 <__sflush_r+0x1a>
 8006f02:	0793      	lsls	r3, r2, #30
 8006f04:	680e      	ldr	r6, [r1, #0]
 8006f06:	bf08      	it	eq
 8006f08:	694b      	ldreq	r3, [r1, #20]
 8006f0a:	600f      	str	r7, [r1, #0]
 8006f0c:	bf18      	it	ne
 8006f0e:	2300      	movne	r3, #0
 8006f10:	eba6 0807 	sub.w	r8, r6, r7
 8006f14:	608b      	str	r3, [r1, #8]
 8006f16:	f1b8 0f00 	cmp.w	r8, #0
 8006f1a:	dd9c      	ble.n	8006e56 <__sflush_r+0x1a>
 8006f1c:	6a21      	ldr	r1, [r4, #32]
 8006f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f20:	4643      	mov	r3, r8
 8006f22:	463a      	mov	r2, r7
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b0      	blx	r6
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	dc06      	bgt.n	8006f3a <__sflush_r+0xfe>
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	e78e      	b.n	8006e58 <__sflush_r+0x1c>
 8006f3a:	4407      	add	r7, r0
 8006f3c:	eba8 0800 	sub.w	r8, r8, r0
 8006f40:	e7e9      	b.n	8006f16 <__sflush_r+0xda>
 8006f42:	bf00      	nop
 8006f44:	20400001 	.word	0x20400001

08006f48 <_fflush_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	690b      	ldr	r3, [r1, #16]
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	b913      	cbnz	r3, 8006f58 <_fflush_r+0x10>
 8006f52:	2500      	movs	r5, #0
 8006f54:	4628      	mov	r0, r5
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	b118      	cbz	r0, 8006f62 <_fflush_r+0x1a>
 8006f5a:	6983      	ldr	r3, [r0, #24]
 8006f5c:	b90b      	cbnz	r3, 8006f62 <_fflush_r+0x1a>
 8006f5e:	f7fe ffcb 	bl	8005ef8 <__sinit>
 8006f62:	4b14      	ldr	r3, [pc, #80]	; (8006fb4 <_fflush_r+0x6c>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	d11b      	bne.n	8006fa0 <_fflush_r+0x58>
 8006f68:	686c      	ldr	r4, [r5, #4]
 8006f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0ef      	beq.n	8006f52 <_fflush_r+0xa>
 8006f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f74:	07d0      	lsls	r0, r2, #31
 8006f76:	d404      	bmi.n	8006f82 <_fflush_r+0x3a>
 8006f78:	0599      	lsls	r1, r3, #22
 8006f7a:	d402      	bmi.n	8006f82 <_fflush_r+0x3a>
 8006f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f7e:	f7ff f85e 	bl	800603e <__retarget_lock_acquire_recursive>
 8006f82:	4628      	mov	r0, r5
 8006f84:	4621      	mov	r1, r4
 8006f86:	f7ff ff59 	bl	8006e3c <__sflush_r>
 8006f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f8c:	07da      	lsls	r2, r3, #31
 8006f8e:	4605      	mov	r5, r0
 8006f90:	d4e0      	bmi.n	8006f54 <_fflush_r+0xc>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	059b      	lsls	r3, r3, #22
 8006f96:	d4dd      	bmi.n	8006f54 <_fflush_r+0xc>
 8006f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9a:	f7ff f851 	bl	8006040 <__retarget_lock_release_recursive>
 8006f9e:	e7d9      	b.n	8006f54 <_fflush_r+0xc>
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <_fflush_r+0x70>)
 8006fa2:	429c      	cmp	r4, r3
 8006fa4:	d101      	bne.n	8006faa <_fflush_r+0x62>
 8006fa6:	68ac      	ldr	r4, [r5, #8]
 8006fa8:	e7df      	b.n	8006f6a <_fflush_r+0x22>
 8006faa:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <_fflush_r+0x74>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	bf08      	it	eq
 8006fb0:	68ec      	ldreq	r4, [r5, #12]
 8006fb2:	e7da      	b.n	8006f6a <_fflush_r+0x22>
 8006fb4:	08007bac 	.word	0x08007bac
 8006fb8:	08007bcc 	.word	0x08007bcc
 8006fbc:	08007b8c 	.word	0x08007b8c

08006fc0 <fiprintf>:
 8006fc0:	b40e      	push	{r1, r2, r3}
 8006fc2:	b503      	push	{r0, r1, lr}
 8006fc4:	4601      	mov	r1, r0
 8006fc6:	ab03      	add	r3, sp, #12
 8006fc8:	4805      	ldr	r0, [pc, #20]	; (8006fe0 <fiprintf+0x20>)
 8006fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fce:	6800      	ldr	r0, [r0, #0]
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	f7ff fcaf 	bl	8006934 <_vfiprintf_r>
 8006fd6:	b002      	add	sp, #8
 8006fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fdc:	b003      	add	sp, #12
 8006fde:	4770      	bx	lr
 8006fe0:	200000a4 	.word	0x200000a4

08006fe4 <_lseek_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	; (8007004 <_lseek_r+0x20>)
 8006fe8:	4604      	mov	r4, r0
 8006fea:	4608      	mov	r0, r1
 8006fec:	4611      	mov	r1, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	602a      	str	r2, [r5, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f7fa ffb4 	bl	8001f60 <_lseek>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_lseek_r+0x1e>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_lseek_r+0x1e>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	200003dc 	.word	0x200003dc

08007008 <__swhatbuf_r>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	460e      	mov	r6, r1
 800700c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007010:	2900      	cmp	r1, #0
 8007012:	b096      	sub	sp, #88	; 0x58
 8007014:	4614      	mov	r4, r2
 8007016:	461d      	mov	r5, r3
 8007018:	da07      	bge.n	800702a <__swhatbuf_r+0x22>
 800701a:	2300      	movs	r3, #0
 800701c:	602b      	str	r3, [r5, #0]
 800701e:	89b3      	ldrh	r3, [r6, #12]
 8007020:	061a      	lsls	r2, r3, #24
 8007022:	d410      	bmi.n	8007046 <__swhatbuf_r+0x3e>
 8007024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007028:	e00e      	b.n	8007048 <__swhatbuf_r+0x40>
 800702a:	466a      	mov	r2, sp
 800702c:	f000 f894 	bl	8007158 <_fstat_r>
 8007030:	2800      	cmp	r0, #0
 8007032:	dbf2      	blt.n	800701a <__swhatbuf_r+0x12>
 8007034:	9a01      	ldr	r2, [sp, #4]
 8007036:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800703a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800703e:	425a      	negs	r2, r3
 8007040:	415a      	adcs	r2, r3
 8007042:	602a      	str	r2, [r5, #0]
 8007044:	e7ee      	b.n	8007024 <__swhatbuf_r+0x1c>
 8007046:	2340      	movs	r3, #64	; 0x40
 8007048:	2000      	movs	r0, #0
 800704a:	6023      	str	r3, [r4, #0]
 800704c:	b016      	add	sp, #88	; 0x58
 800704e:	bd70      	pop	{r4, r5, r6, pc}

08007050 <__smakebuf_r>:
 8007050:	898b      	ldrh	r3, [r1, #12]
 8007052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007054:	079d      	lsls	r5, r3, #30
 8007056:	4606      	mov	r6, r0
 8007058:	460c      	mov	r4, r1
 800705a:	d507      	bpl.n	800706c <__smakebuf_r+0x1c>
 800705c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	6123      	str	r3, [r4, #16]
 8007064:	2301      	movs	r3, #1
 8007066:	6163      	str	r3, [r4, #20]
 8007068:	b002      	add	sp, #8
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	ab01      	add	r3, sp, #4
 800706e:	466a      	mov	r2, sp
 8007070:	f7ff ffca 	bl	8007008 <__swhatbuf_r>
 8007074:	9900      	ldr	r1, [sp, #0]
 8007076:	4605      	mov	r5, r0
 8007078:	4630      	mov	r0, r6
 800707a:	f7ff fbd7 	bl	800682c <_malloc_r>
 800707e:	b948      	cbnz	r0, 8007094 <__smakebuf_r+0x44>
 8007080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007084:	059a      	lsls	r2, r3, #22
 8007086:	d4ef      	bmi.n	8007068 <__smakebuf_r+0x18>
 8007088:	f023 0303 	bic.w	r3, r3, #3
 800708c:	f043 0302 	orr.w	r3, r3, #2
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	e7e3      	b.n	800705c <__smakebuf_r+0xc>
 8007094:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <__smakebuf_r+0x7c>)
 8007096:	62b3      	str	r3, [r6, #40]	; 0x28
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	6020      	str	r0, [r4, #0]
 800709c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	9b00      	ldr	r3, [sp, #0]
 80070a4:	6163      	str	r3, [r4, #20]
 80070a6:	9b01      	ldr	r3, [sp, #4]
 80070a8:	6120      	str	r0, [r4, #16]
 80070aa:	b15b      	cbz	r3, 80070c4 <__smakebuf_r+0x74>
 80070ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b0:	4630      	mov	r0, r6
 80070b2:	f000 f863 	bl	800717c <_isatty_r>
 80070b6:	b128      	cbz	r0, 80070c4 <__smakebuf_r+0x74>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f023 0303 	bic.w	r3, r3, #3
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	81a3      	strh	r3, [r4, #12]
 80070c4:	89a0      	ldrh	r0, [r4, #12]
 80070c6:	4305      	orrs	r5, r0
 80070c8:	81a5      	strh	r5, [r4, #12]
 80070ca:	e7cd      	b.n	8007068 <__smakebuf_r+0x18>
 80070cc:	08005e91 	.word	0x08005e91

080070d0 <__ascii_mbtowc>:
 80070d0:	b082      	sub	sp, #8
 80070d2:	b901      	cbnz	r1, 80070d6 <__ascii_mbtowc+0x6>
 80070d4:	a901      	add	r1, sp, #4
 80070d6:	b142      	cbz	r2, 80070ea <__ascii_mbtowc+0x1a>
 80070d8:	b14b      	cbz	r3, 80070ee <__ascii_mbtowc+0x1e>
 80070da:	7813      	ldrb	r3, [r2, #0]
 80070dc:	600b      	str	r3, [r1, #0]
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	1e10      	subs	r0, r2, #0
 80070e2:	bf18      	it	ne
 80070e4:	2001      	movne	r0, #1
 80070e6:	b002      	add	sp, #8
 80070e8:	4770      	bx	lr
 80070ea:	4610      	mov	r0, r2
 80070ec:	e7fb      	b.n	80070e6 <__ascii_mbtowc+0x16>
 80070ee:	f06f 0001 	mvn.w	r0, #1
 80070f2:	e7f8      	b.n	80070e6 <__ascii_mbtowc+0x16>

080070f4 <__malloc_lock>:
 80070f4:	4801      	ldr	r0, [pc, #4]	; (80070fc <__malloc_lock+0x8>)
 80070f6:	f7fe bfa2 	b.w	800603e <__retarget_lock_acquire_recursive>
 80070fa:	bf00      	nop
 80070fc:	200003d4 	.word	0x200003d4

08007100 <__malloc_unlock>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__malloc_unlock+0x8>)
 8007102:	f7fe bf9d 	b.w	8006040 <__retarget_lock_release_recursive>
 8007106:	bf00      	nop
 8007108:	200003d4 	.word	0x200003d4

0800710c <_read_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	; (800712c <_read_r+0x20>)
 8007110:	4604      	mov	r4, r0
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f7fa fec0 	bl	8001ea0 <_read>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_read_r+0x1e>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_read_r+0x1e>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	200003dc 	.word	0x200003dc

08007130 <__ascii_wctomb>:
 8007130:	b149      	cbz	r1, 8007146 <__ascii_wctomb+0x16>
 8007132:	2aff      	cmp	r2, #255	; 0xff
 8007134:	bf85      	ittet	hi
 8007136:	238a      	movhi	r3, #138	; 0x8a
 8007138:	6003      	strhi	r3, [r0, #0]
 800713a:	700a      	strbls	r2, [r1, #0]
 800713c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007140:	bf98      	it	ls
 8007142:	2001      	movls	r0, #1
 8007144:	4770      	bx	lr
 8007146:	4608      	mov	r0, r1
 8007148:	4770      	bx	lr

0800714a <abort>:
 800714a:	b508      	push	{r3, lr}
 800714c:	2006      	movs	r0, #6
 800714e:	f000 f84d 	bl	80071ec <raise>
 8007152:	2001      	movs	r0, #1
 8007154:	f7fa fe9a 	bl	8001e8c <_exit>

08007158 <_fstat_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d07      	ldr	r5, [pc, #28]	; (8007178 <_fstat_r+0x20>)
 800715c:	2300      	movs	r3, #0
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	602b      	str	r3, [r5, #0]
 8007166:	f7fa fee0 	bl	8001f2a <_fstat>
 800716a:	1c43      	adds	r3, r0, #1
 800716c:	d102      	bne.n	8007174 <_fstat_r+0x1c>
 800716e:	682b      	ldr	r3, [r5, #0]
 8007170:	b103      	cbz	r3, 8007174 <_fstat_r+0x1c>
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	bd38      	pop	{r3, r4, r5, pc}
 8007176:	bf00      	nop
 8007178:	200003dc 	.word	0x200003dc

0800717c <_isatty_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d06      	ldr	r5, [pc, #24]	; (8007198 <_isatty_r+0x1c>)
 8007180:	2300      	movs	r3, #0
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	602b      	str	r3, [r5, #0]
 8007188:	f7fa fedf 	bl	8001f4a <_isatty>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_isatty_r+0x1a>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_isatty_r+0x1a>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	200003dc 	.word	0x200003dc

0800719c <_raise_r>:
 800719c:	291f      	cmp	r1, #31
 800719e:	b538      	push	{r3, r4, r5, lr}
 80071a0:	4604      	mov	r4, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	d904      	bls.n	80071b0 <_raise_r+0x14>
 80071a6:	2316      	movs	r3, #22
 80071a8:	6003      	str	r3, [r0, #0]
 80071aa:	f04f 30ff 	mov.w	r0, #4294967295
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071b2:	b112      	cbz	r2, 80071ba <_raise_r+0x1e>
 80071b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071b8:	b94b      	cbnz	r3, 80071ce <_raise_r+0x32>
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 f830 	bl	8007220 <_getpid_r>
 80071c0:	462a      	mov	r2, r5
 80071c2:	4601      	mov	r1, r0
 80071c4:	4620      	mov	r0, r4
 80071c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ca:	f000 b817 	b.w	80071fc <_kill_r>
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d00a      	beq.n	80071e8 <_raise_r+0x4c>
 80071d2:	1c59      	adds	r1, r3, #1
 80071d4:	d103      	bne.n	80071de <_raise_r+0x42>
 80071d6:	2316      	movs	r3, #22
 80071d8:	6003      	str	r3, [r0, #0]
 80071da:	2001      	movs	r0, #1
 80071dc:	e7e7      	b.n	80071ae <_raise_r+0x12>
 80071de:	2400      	movs	r4, #0
 80071e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071e4:	4628      	mov	r0, r5
 80071e6:	4798      	blx	r3
 80071e8:	2000      	movs	r0, #0
 80071ea:	e7e0      	b.n	80071ae <_raise_r+0x12>

080071ec <raise>:
 80071ec:	4b02      	ldr	r3, [pc, #8]	; (80071f8 <raise+0xc>)
 80071ee:	4601      	mov	r1, r0
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	f7ff bfd3 	b.w	800719c <_raise_r>
 80071f6:	bf00      	nop
 80071f8:	200000a4 	.word	0x200000a4

080071fc <_kill_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d07      	ldr	r5, [pc, #28]	; (800721c <_kill_r+0x20>)
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	4611      	mov	r1, r2
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	f7fa fe2f 	bl	8001e6c <_kill>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	d102      	bne.n	8007218 <_kill_r+0x1c>
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	b103      	cbz	r3, 8007218 <_kill_r+0x1c>
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	bd38      	pop	{r3, r4, r5, pc}
 800721a:	bf00      	nop
 800721c:	200003dc 	.word	0x200003dc

08007220 <_getpid_r>:
 8007220:	f7fa be1c 	b.w	8001e5c <_getpid>

08007224 <acos>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	ed2d 8b02 	vpush	{d8}
 800722a:	ec55 4b10 	vmov	r4, r5, d0
 800722e:	f000 f867 	bl	8007300 <__ieee754_acos>
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <acos+0x68>)
 8007234:	eeb0 8a40 	vmov.f32	s16, s0
 8007238:	eef0 8a60 	vmov.f32	s17, s1
 800723c:	f993 3000 	ldrsb.w	r3, [r3]
 8007240:	3301      	adds	r3, #1
 8007242:	d01c      	beq.n	800727e <acos+0x5a>
 8007244:	4622      	mov	r2, r4
 8007246:	462b      	mov	r3, r5
 8007248:	4620      	mov	r0, r4
 800724a:	4629      	mov	r1, r5
 800724c:	f7f9 fc8e 	bl	8000b6c <__aeabi_dcmpun>
 8007250:	b9a8      	cbnz	r0, 800727e <acos+0x5a>
 8007252:	ec45 4b10 	vmov	d0, r4, r5
 8007256:	f000 fb67 	bl	8007928 <fabs>
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <acos+0x6c>)
 800725c:	ec51 0b10 	vmov	r0, r1, d0
 8007260:	2200      	movs	r2, #0
 8007262:	f7f9 fc79 	bl	8000b58 <__aeabi_dcmpgt>
 8007266:	b150      	cbz	r0, 800727e <acos+0x5a>
 8007268:	f7fd fac2 	bl	80047f0 <__errno>
 800726c:	ecbd 8b02 	vpop	{d8}
 8007270:	2321      	movs	r3, #33	; 0x21
 8007272:	6003      	str	r3, [r0, #0]
 8007274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007278:	4806      	ldr	r0, [pc, #24]	; (8007294 <acos+0x70>)
 800727a:	f000 bb61 	b.w	8007940 <nan>
 800727e:	eeb0 0a48 	vmov.f32	s0, s16
 8007282:	eef0 0a68 	vmov.f32	s1, s17
 8007286:	ecbd 8b02 	vpop	{d8}
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	20000274 	.word	0x20000274
 8007290:	3ff00000 	.word	0x3ff00000
 8007294:	08007d98 	.word	0x08007d98

08007298 <sqrt>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	ed2d 8b02 	vpush	{d8}
 800729e:	ec55 4b10 	vmov	r4, r5, d0
 80072a2:	f000 fa8d 	bl	80077c0 <__ieee754_sqrt>
 80072a6:	4b15      	ldr	r3, [pc, #84]	; (80072fc <sqrt+0x64>)
 80072a8:	eeb0 8a40 	vmov.f32	s16, s0
 80072ac:	eef0 8a60 	vmov.f32	s17, s1
 80072b0:	f993 3000 	ldrsb.w	r3, [r3]
 80072b4:	3301      	adds	r3, #1
 80072b6:	d019      	beq.n	80072ec <sqrt+0x54>
 80072b8:	4622      	mov	r2, r4
 80072ba:	462b      	mov	r3, r5
 80072bc:	4620      	mov	r0, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	f7f9 fc54 	bl	8000b6c <__aeabi_dcmpun>
 80072c4:	b990      	cbnz	r0, 80072ec <sqrt+0x54>
 80072c6:	2200      	movs	r2, #0
 80072c8:	2300      	movs	r3, #0
 80072ca:	4620      	mov	r0, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	f7f9 fc25 	bl	8000b1c <__aeabi_dcmplt>
 80072d2:	b158      	cbz	r0, 80072ec <sqrt+0x54>
 80072d4:	f7fd fa8c 	bl	80047f0 <__errno>
 80072d8:	2321      	movs	r3, #33	; 0x21
 80072da:	6003      	str	r3, [r0, #0]
 80072dc:	2200      	movs	r2, #0
 80072de:	2300      	movs	r3, #0
 80072e0:	4610      	mov	r0, r2
 80072e2:	4619      	mov	r1, r3
 80072e4:	f7f9 fad2 	bl	800088c <__aeabi_ddiv>
 80072e8:	ec41 0b18 	vmov	d8, r0, r1
 80072ec:	eeb0 0a48 	vmov.f32	s0, s16
 80072f0:	eef0 0a68 	vmov.f32	s1, s17
 80072f4:	ecbd 8b02 	vpop	{d8}
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	bf00      	nop
 80072fc:	20000274 	.word	0x20000274

08007300 <__ieee754_acos>:
 8007300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	ec55 4b10 	vmov	r4, r5, d0
 8007308:	49b7      	ldr	r1, [pc, #732]	; (80075e8 <__ieee754_acos+0x2e8>)
 800730a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800730e:	428b      	cmp	r3, r1
 8007310:	dd1b      	ble.n	800734a <__ieee754_acos+0x4a>
 8007312:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8007316:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800731a:	4323      	orrs	r3, r4
 800731c:	d106      	bne.n	800732c <__ieee754_acos+0x2c>
 800731e:	2d00      	cmp	r5, #0
 8007320:	f300 8211 	bgt.w	8007746 <__ieee754_acos+0x446>
 8007324:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8007580 <__ieee754_acos+0x280>
 8007328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732c:	ee10 2a10 	vmov	r2, s0
 8007330:	462b      	mov	r3, r5
 8007332:	ee10 0a10 	vmov	r0, s0
 8007336:	4629      	mov	r1, r5
 8007338:	f7f8 ffc6 	bl	80002c8 <__aeabi_dsub>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	f7f9 faa4 	bl	800088c <__aeabi_ddiv>
 8007344:	ec41 0b10 	vmov	d0, r0, r1
 8007348:	e7ee      	b.n	8007328 <__ieee754_acos+0x28>
 800734a:	49a8      	ldr	r1, [pc, #672]	; (80075ec <__ieee754_acos+0x2ec>)
 800734c:	428b      	cmp	r3, r1
 800734e:	f300 8087 	bgt.w	8007460 <__ieee754_acos+0x160>
 8007352:	4aa7      	ldr	r2, [pc, #668]	; (80075f0 <__ieee754_acos+0x2f0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	f340 81f9 	ble.w	800774c <__ieee754_acos+0x44c>
 800735a:	ee10 2a10 	vmov	r2, s0
 800735e:	ee10 0a10 	vmov	r0, s0
 8007362:	462b      	mov	r3, r5
 8007364:	4629      	mov	r1, r5
 8007366:	f7f9 f967 	bl	8000638 <__aeabi_dmul>
 800736a:	a387      	add	r3, pc, #540	; (adr r3, 8007588 <__ieee754_acos+0x288>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	4606      	mov	r6, r0
 8007372:	460f      	mov	r7, r1
 8007374:	f7f9 f960 	bl	8000638 <__aeabi_dmul>
 8007378:	a385      	add	r3, pc, #532	; (adr r3, 8007590 <__ieee754_acos+0x290>)
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f7f8 ffa5 	bl	80002cc <__adddf3>
 8007382:	4632      	mov	r2, r6
 8007384:	463b      	mov	r3, r7
 8007386:	f7f9 f957 	bl	8000638 <__aeabi_dmul>
 800738a:	a383      	add	r3, pc, #524	; (adr r3, 8007598 <__ieee754_acos+0x298>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f8 ff9a 	bl	80002c8 <__aeabi_dsub>
 8007394:	4632      	mov	r2, r6
 8007396:	463b      	mov	r3, r7
 8007398:	f7f9 f94e 	bl	8000638 <__aeabi_dmul>
 800739c:	a380      	add	r3, pc, #512	; (adr r3, 80075a0 <__ieee754_acos+0x2a0>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f8 ff93 	bl	80002cc <__adddf3>
 80073a6:	4632      	mov	r2, r6
 80073a8:	463b      	mov	r3, r7
 80073aa:	f7f9 f945 	bl	8000638 <__aeabi_dmul>
 80073ae:	a37e      	add	r3, pc, #504	; (adr r3, 80075a8 <__ieee754_acos+0x2a8>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f8 ff88 	bl	80002c8 <__aeabi_dsub>
 80073b8:	4632      	mov	r2, r6
 80073ba:	463b      	mov	r3, r7
 80073bc:	f7f9 f93c 	bl	8000638 <__aeabi_dmul>
 80073c0:	a37b      	add	r3, pc, #492	; (adr r3, 80075b0 <__ieee754_acos+0x2b0>)
 80073c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c6:	f7f8 ff81 	bl	80002cc <__adddf3>
 80073ca:	4632      	mov	r2, r6
 80073cc:	463b      	mov	r3, r7
 80073ce:	f7f9 f933 	bl	8000638 <__aeabi_dmul>
 80073d2:	a379      	add	r3, pc, #484	; (adr r3, 80075b8 <__ieee754_acos+0x2b8>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	4680      	mov	r8, r0
 80073da:	4689      	mov	r9, r1
 80073dc:	4630      	mov	r0, r6
 80073de:	4639      	mov	r1, r7
 80073e0:	f7f9 f92a 	bl	8000638 <__aeabi_dmul>
 80073e4:	a376      	add	r3, pc, #472	; (adr r3, 80075c0 <__ieee754_acos+0x2c0>)
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f7f8 ff6d 	bl	80002c8 <__aeabi_dsub>
 80073ee:	4632      	mov	r2, r6
 80073f0:	463b      	mov	r3, r7
 80073f2:	f7f9 f921 	bl	8000638 <__aeabi_dmul>
 80073f6:	a374      	add	r3, pc, #464	; (adr r3, 80075c8 <__ieee754_acos+0x2c8>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f7f8 ff66 	bl	80002cc <__adddf3>
 8007400:	4632      	mov	r2, r6
 8007402:	463b      	mov	r3, r7
 8007404:	f7f9 f918 	bl	8000638 <__aeabi_dmul>
 8007408:	a371      	add	r3, pc, #452	; (adr r3, 80075d0 <__ieee754_acos+0x2d0>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f8 ff5b 	bl	80002c8 <__aeabi_dsub>
 8007412:	4632      	mov	r2, r6
 8007414:	463b      	mov	r3, r7
 8007416:	f7f9 f90f 	bl	8000638 <__aeabi_dmul>
 800741a:	4b76      	ldr	r3, [pc, #472]	; (80075f4 <__ieee754_acos+0x2f4>)
 800741c:	2200      	movs	r2, #0
 800741e:	f7f8 ff55 	bl	80002cc <__adddf3>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4640      	mov	r0, r8
 8007428:	4649      	mov	r1, r9
 800742a:	f7f9 fa2f 	bl	800088c <__aeabi_ddiv>
 800742e:	4622      	mov	r2, r4
 8007430:	462b      	mov	r3, r5
 8007432:	f7f9 f901 	bl	8000638 <__aeabi_dmul>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	a167      	add	r1, pc, #412	; (adr r1, 80075d8 <__ieee754_acos+0x2d8>)
 800743c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007440:	f7f8 ff42 	bl	80002c8 <__aeabi_dsub>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4620      	mov	r0, r4
 800744a:	4629      	mov	r1, r5
 800744c:	f7f8 ff3c 	bl	80002c8 <__aeabi_dsub>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	a162      	add	r1, pc, #392	; (adr r1, 80075e0 <__ieee754_acos+0x2e0>)
 8007456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800745a:	f7f8 ff35 	bl	80002c8 <__aeabi_dsub>
 800745e:	e771      	b.n	8007344 <__ieee754_acos+0x44>
 8007460:	2d00      	cmp	r5, #0
 8007462:	f280 80cb 	bge.w	80075fc <__ieee754_acos+0x2fc>
 8007466:	ee10 0a10 	vmov	r0, s0
 800746a:	4b62      	ldr	r3, [pc, #392]	; (80075f4 <__ieee754_acos+0x2f4>)
 800746c:	2200      	movs	r2, #0
 800746e:	4629      	mov	r1, r5
 8007470:	f7f8 ff2c 	bl	80002cc <__adddf3>
 8007474:	4b60      	ldr	r3, [pc, #384]	; (80075f8 <__ieee754_acos+0x2f8>)
 8007476:	2200      	movs	r2, #0
 8007478:	f7f9 f8de 	bl	8000638 <__aeabi_dmul>
 800747c:	a342      	add	r3, pc, #264	; (adr r3, 8007588 <__ieee754_acos+0x288>)
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	4604      	mov	r4, r0
 8007484:	460d      	mov	r5, r1
 8007486:	f7f9 f8d7 	bl	8000638 <__aeabi_dmul>
 800748a:	a341      	add	r3, pc, #260	; (adr r3, 8007590 <__ieee754_acos+0x290>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 ff1c 	bl	80002cc <__adddf3>
 8007494:	4622      	mov	r2, r4
 8007496:	462b      	mov	r3, r5
 8007498:	f7f9 f8ce 	bl	8000638 <__aeabi_dmul>
 800749c:	a33e      	add	r3, pc, #248	; (adr r3, 8007598 <__ieee754_acos+0x298>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 ff11 	bl	80002c8 <__aeabi_dsub>
 80074a6:	4622      	mov	r2, r4
 80074a8:	462b      	mov	r3, r5
 80074aa:	f7f9 f8c5 	bl	8000638 <__aeabi_dmul>
 80074ae:	a33c      	add	r3, pc, #240	; (adr r3, 80075a0 <__ieee754_acos+0x2a0>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f8 ff0a 	bl	80002cc <__adddf3>
 80074b8:	4622      	mov	r2, r4
 80074ba:	462b      	mov	r3, r5
 80074bc:	f7f9 f8bc 	bl	8000638 <__aeabi_dmul>
 80074c0:	a339      	add	r3, pc, #228	; (adr r3, 80075a8 <__ieee754_acos+0x2a8>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f8 feff 	bl	80002c8 <__aeabi_dsub>
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	f7f9 f8b3 	bl	8000638 <__aeabi_dmul>
 80074d2:	a337      	add	r3, pc, #220	; (adr r3, 80075b0 <__ieee754_acos+0x2b0>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f8 fef8 	bl	80002cc <__adddf3>
 80074dc:	4622      	mov	r2, r4
 80074de:	462b      	mov	r3, r5
 80074e0:	f7f9 f8aa 	bl	8000638 <__aeabi_dmul>
 80074e4:	ec45 4b10 	vmov	d0, r4, r5
 80074e8:	4680      	mov	r8, r0
 80074ea:	4689      	mov	r9, r1
 80074ec:	f000 f968 	bl	80077c0 <__ieee754_sqrt>
 80074f0:	a331      	add	r3, pc, #196	; (adr r3, 80075b8 <__ieee754_acos+0x2b8>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	4620      	mov	r0, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	ec57 6b10 	vmov	r6, r7, d0
 80074fe:	f7f9 f89b 	bl	8000638 <__aeabi_dmul>
 8007502:	a32f      	add	r3, pc, #188	; (adr r3, 80075c0 <__ieee754_acos+0x2c0>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f7f8 fede 	bl	80002c8 <__aeabi_dsub>
 800750c:	4622      	mov	r2, r4
 800750e:	462b      	mov	r3, r5
 8007510:	f7f9 f892 	bl	8000638 <__aeabi_dmul>
 8007514:	a32c      	add	r3, pc, #176	; (adr r3, 80075c8 <__ieee754_acos+0x2c8>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f7f8 fed7 	bl	80002cc <__adddf3>
 800751e:	4622      	mov	r2, r4
 8007520:	462b      	mov	r3, r5
 8007522:	f7f9 f889 	bl	8000638 <__aeabi_dmul>
 8007526:	a32a      	add	r3, pc, #168	; (adr r3, 80075d0 <__ieee754_acos+0x2d0>)
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	f7f8 fecc 	bl	80002c8 <__aeabi_dsub>
 8007530:	4622      	mov	r2, r4
 8007532:	462b      	mov	r3, r5
 8007534:	f7f9 f880 	bl	8000638 <__aeabi_dmul>
 8007538:	4b2e      	ldr	r3, [pc, #184]	; (80075f4 <__ieee754_acos+0x2f4>)
 800753a:	2200      	movs	r2, #0
 800753c:	f7f8 fec6 	bl	80002cc <__adddf3>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4640      	mov	r0, r8
 8007546:	4649      	mov	r1, r9
 8007548:	f7f9 f9a0 	bl	800088c <__aeabi_ddiv>
 800754c:	4632      	mov	r2, r6
 800754e:	463b      	mov	r3, r7
 8007550:	f7f9 f872 	bl	8000638 <__aeabi_dmul>
 8007554:	a320      	add	r3, pc, #128	; (adr r3, 80075d8 <__ieee754_acos+0x2d8>)
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f7f8 feb5 	bl	80002c8 <__aeabi_dsub>
 800755e:	4632      	mov	r2, r6
 8007560:	463b      	mov	r3, r7
 8007562:	f7f8 feb3 	bl	80002cc <__adddf3>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	f7f8 feaf 	bl	80002cc <__adddf3>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	a103      	add	r1, pc, #12	; (adr r1, 8007580 <__ieee754_acos+0x280>)
 8007574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007578:	e76f      	b.n	800745a <__ieee754_acos+0x15a>
 800757a:	bf00      	nop
 800757c:	f3af 8000 	nop.w
 8007580:	54442d18 	.word	0x54442d18
 8007584:	400921fb 	.word	0x400921fb
 8007588:	0dfdf709 	.word	0x0dfdf709
 800758c:	3f023de1 	.word	0x3f023de1
 8007590:	7501b288 	.word	0x7501b288
 8007594:	3f49efe0 	.word	0x3f49efe0
 8007598:	b5688f3b 	.word	0xb5688f3b
 800759c:	3fa48228 	.word	0x3fa48228
 80075a0:	0e884455 	.word	0x0e884455
 80075a4:	3fc9c155 	.word	0x3fc9c155
 80075a8:	03eb6f7d 	.word	0x03eb6f7d
 80075ac:	3fd4d612 	.word	0x3fd4d612
 80075b0:	55555555 	.word	0x55555555
 80075b4:	3fc55555 	.word	0x3fc55555
 80075b8:	b12e9282 	.word	0xb12e9282
 80075bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80075c0:	1b8d0159 	.word	0x1b8d0159
 80075c4:	3fe6066c 	.word	0x3fe6066c
 80075c8:	9c598ac8 	.word	0x9c598ac8
 80075cc:	40002ae5 	.word	0x40002ae5
 80075d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80075d4:	40033a27 	.word	0x40033a27
 80075d8:	33145c07 	.word	0x33145c07
 80075dc:	3c91a626 	.word	0x3c91a626
 80075e0:	54442d18 	.word	0x54442d18
 80075e4:	3ff921fb 	.word	0x3ff921fb
 80075e8:	3fefffff 	.word	0x3fefffff
 80075ec:	3fdfffff 	.word	0x3fdfffff
 80075f0:	3c600000 	.word	0x3c600000
 80075f4:	3ff00000 	.word	0x3ff00000
 80075f8:	3fe00000 	.word	0x3fe00000
 80075fc:	ee10 2a10 	vmov	r2, s0
 8007600:	462b      	mov	r3, r5
 8007602:	496d      	ldr	r1, [pc, #436]	; (80077b8 <__ieee754_acos+0x4b8>)
 8007604:	2000      	movs	r0, #0
 8007606:	f7f8 fe5f 	bl	80002c8 <__aeabi_dsub>
 800760a:	4b6c      	ldr	r3, [pc, #432]	; (80077bc <__ieee754_acos+0x4bc>)
 800760c:	2200      	movs	r2, #0
 800760e:	f7f9 f813 	bl	8000638 <__aeabi_dmul>
 8007612:	4604      	mov	r4, r0
 8007614:	460d      	mov	r5, r1
 8007616:	ec45 4b10 	vmov	d0, r4, r5
 800761a:	f000 f8d1 	bl	80077c0 <__ieee754_sqrt>
 800761e:	a34e      	add	r3, pc, #312	; (adr r3, 8007758 <__ieee754_acos+0x458>)
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	4620      	mov	r0, r4
 8007626:	4629      	mov	r1, r5
 8007628:	ec59 8b10 	vmov	r8, r9, d0
 800762c:	f7f9 f804 	bl	8000638 <__aeabi_dmul>
 8007630:	a34b      	add	r3, pc, #300	; (adr r3, 8007760 <__ieee754_acos+0x460>)
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	f7f8 fe49 	bl	80002cc <__adddf3>
 800763a:	4622      	mov	r2, r4
 800763c:	462b      	mov	r3, r5
 800763e:	f7f8 fffb 	bl	8000638 <__aeabi_dmul>
 8007642:	a349      	add	r3, pc, #292	; (adr r3, 8007768 <__ieee754_acos+0x468>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f7f8 fe3e 	bl	80002c8 <__aeabi_dsub>
 800764c:	4622      	mov	r2, r4
 800764e:	462b      	mov	r3, r5
 8007650:	f7f8 fff2 	bl	8000638 <__aeabi_dmul>
 8007654:	a346      	add	r3, pc, #280	; (adr r3, 8007770 <__ieee754_acos+0x470>)
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	f7f8 fe37 	bl	80002cc <__adddf3>
 800765e:	4622      	mov	r2, r4
 8007660:	462b      	mov	r3, r5
 8007662:	f7f8 ffe9 	bl	8000638 <__aeabi_dmul>
 8007666:	a344      	add	r3, pc, #272	; (adr r3, 8007778 <__ieee754_acos+0x478>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f8 fe2c 	bl	80002c8 <__aeabi_dsub>
 8007670:	4622      	mov	r2, r4
 8007672:	462b      	mov	r3, r5
 8007674:	f7f8 ffe0 	bl	8000638 <__aeabi_dmul>
 8007678:	a341      	add	r3, pc, #260	; (adr r3, 8007780 <__ieee754_acos+0x480>)
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	f7f8 fe25 	bl	80002cc <__adddf3>
 8007682:	4622      	mov	r2, r4
 8007684:	462b      	mov	r3, r5
 8007686:	f7f8 ffd7 	bl	8000638 <__aeabi_dmul>
 800768a:	a33f      	add	r3, pc, #252	; (adr r3, 8007788 <__ieee754_acos+0x488>)
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	4682      	mov	sl, r0
 8007692:	468b      	mov	fp, r1
 8007694:	4620      	mov	r0, r4
 8007696:	4629      	mov	r1, r5
 8007698:	f7f8 ffce 	bl	8000638 <__aeabi_dmul>
 800769c:	a33c      	add	r3, pc, #240	; (adr r3, 8007790 <__ieee754_acos+0x490>)
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f7f8 fe11 	bl	80002c8 <__aeabi_dsub>
 80076a6:	4622      	mov	r2, r4
 80076a8:	462b      	mov	r3, r5
 80076aa:	f7f8 ffc5 	bl	8000638 <__aeabi_dmul>
 80076ae:	a33a      	add	r3, pc, #232	; (adr r3, 8007798 <__ieee754_acos+0x498>)
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f7f8 fe0a 	bl	80002cc <__adddf3>
 80076b8:	4622      	mov	r2, r4
 80076ba:	462b      	mov	r3, r5
 80076bc:	f7f8 ffbc 	bl	8000638 <__aeabi_dmul>
 80076c0:	a337      	add	r3, pc, #220	; (adr r3, 80077a0 <__ieee754_acos+0x4a0>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 fdff 	bl	80002c8 <__aeabi_dsub>
 80076ca:	4622      	mov	r2, r4
 80076cc:	462b      	mov	r3, r5
 80076ce:	f7f8 ffb3 	bl	8000638 <__aeabi_dmul>
 80076d2:	4b39      	ldr	r3, [pc, #228]	; (80077b8 <__ieee754_acos+0x4b8>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	f7f8 fdf9 	bl	80002cc <__adddf3>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4650      	mov	r0, sl
 80076e0:	4659      	mov	r1, fp
 80076e2:	f7f9 f8d3 	bl	800088c <__aeabi_ddiv>
 80076e6:	4642      	mov	r2, r8
 80076e8:	464b      	mov	r3, r9
 80076ea:	f7f8 ffa5 	bl	8000638 <__aeabi_dmul>
 80076ee:	2600      	movs	r6, #0
 80076f0:	4682      	mov	sl, r0
 80076f2:	468b      	mov	fp, r1
 80076f4:	4632      	mov	r2, r6
 80076f6:	464b      	mov	r3, r9
 80076f8:	4630      	mov	r0, r6
 80076fa:	4649      	mov	r1, r9
 80076fc:	f7f8 ff9c 	bl	8000638 <__aeabi_dmul>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4620      	mov	r0, r4
 8007706:	4629      	mov	r1, r5
 8007708:	f7f8 fdde 	bl	80002c8 <__aeabi_dsub>
 800770c:	4632      	mov	r2, r6
 800770e:	4604      	mov	r4, r0
 8007710:	460d      	mov	r5, r1
 8007712:	464b      	mov	r3, r9
 8007714:	4640      	mov	r0, r8
 8007716:	4649      	mov	r1, r9
 8007718:	f7f8 fdd8 	bl	80002cc <__adddf3>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4620      	mov	r0, r4
 8007722:	4629      	mov	r1, r5
 8007724:	f7f9 f8b2 	bl	800088c <__aeabi_ddiv>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4650      	mov	r0, sl
 800772e:	4659      	mov	r1, fp
 8007730:	f7f8 fdcc 	bl	80002cc <__adddf3>
 8007734:	4632      	mov	r2, r6
 8007736:	464b      	mov	r3, r9
 8007738:	f7f8 fdc8 	bl	80002cc <__adddf3>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	f7f8 fdc4 	bl	80002cc <__adddf3>
 8007744:	e5fe      	b.n	8007344 <__ieee754_acos+0x44>
 8007746:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80077a8 <__ieee754_acos+0x4a8>
 800774a:	e5ed      	b.n	8007328 <__ieee754_acos+0x28>
 800774c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80077b0 <__ieee754_acos+0x4b0>
 8007750:	e5ea      	b.n	8007328 <__ieee754_acos+0x28>
 8007752:	bf00      	nop
 8007754:	f3af 8000 	nop.w
 8007758:	0dfdf709 	.word	0x0dfdf709
 800775c:	3f023de1 	.word	0x3f023de1
 8007760:	7501b288 	.word	0x7501b288
 8007764:	3f49efe0 	.word	0x3f49efe0
 8007768:	b5688f3b 	.word	0xb5688f3b
 800776c:	3fa48228 	.word	0x3fa48228
 8007770:	0e884455 	.word	0x0e884455
 8007774:	3fc9c155 	.word	0x3fc9c155
 8007778:	03eb6f7d 	.word	0x03eb6f7d
 800777c:	3fd4d612 	.word	0x3fd4d612
 8007780:	55555555 	.word	0x55555555
 8007784:	3fc55555 	.word	0x3fc55555
 8007788:	b12e9282 	.word	0xb12e9282
 800778c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007790:	1b8d0159 	.word	0x1b8d0159
 8007794:	3fe6066c 	.word	0x3fe6066c
 8007798:	9c598ac8 	.word	0x9c598ac8
 800779c:	40002ae5 	.word	0x40002ae5
 80077a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80077a4:	40033a27 	.word	0x40033a27
	...
 80077b0:	54442d18 	.word	0x54442d18
 80077b4:	3ff921fb 	.word	0x3ff921fb
 80077b8:	3ff00000 	.word	0x3ff00000
 80077bc:	3fe00000 	.word	0x3fe00000

080077c0 <__ieee754_sqrt>:
 80077c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c4:	ec55 4b10 	vmov	r4, r5, d0
 80077c8:	4e56      	ldr	r6, [pc, #344]	; (8007924 <__ieee754_sqrt+0x164>)
 80077ca:	43ae      	bics	r6, r5
 80077cc:	ee10 0a10 	vmov	r0, s0
 80077d0:	ee10 3a10 	vmov	r3, s0
 80077d4:	4629      	mov	r1, r5
 80077d6:	462a      	mov	r2, r5
 80077d8:	d110      	bne.n	80077fc <__ieee754_sqrt+0x3c>
 80077da:	ee10 2a10 	vmov	r2, s0
 80077de:	462b      	mov	r3, r5
 80077e0:	f7f8 ff2a 	bl	8000638 <__aeabi_dmul>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4620      	mov	r0, r4
 80077ea:	4629      	mov	r1, r5
 80077ec:	f7f8 fd6e 	bl	80002cc <__adddf3>
 80077f0:	4604      	mov	r4, r0
 80077f2:	460d      	mov	r5, r1
 80077f4:	ec45 4b10 	vmov	d0, r4, r5
 80077f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	dc10      	bgt.n	8007822 <__ieee754_sqrt+0x62>
 8007800:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007804:	4330      	orrs	r0, r6
 8007806:	d0f5      	beq.n	80077f4 <__ieee754_sqrt+0x34>
 8007808:	b15d      	cbz	r5, 8007822 <__ieee754_sqrt+0x62>
 800780a:	ee10 2a10 	vmov	r2, s0
 800780e:	462b      	mov	r3, r5
 8007810:	ee10 0a10 	vmov	r0, s0
 8007814:	f7f8 fd58 	bl	80002c8 <__aeabi_dsub>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	f7f9 f836 	bl	800088c <__aeabi_ddiv>
 8007820:	e7e6      	b.n	80077f0 <__ieee754_sqrt+0x30>
 8007822:	1509      	asrs	r1, r1, #20
 8007824:	d076      	beq.n	8007914 <__ieee754_sqrt+0x154>
 8007826:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800782a:	07ce      	lsls	r6, r1, #31
 800782c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007830:	bf5e      	ittt	pl
 8007832:	0fda      	lsrpl	r2, r3, #31
 8007834:	005b      	lslpl	r3, r3, #1
 8007836:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800783a:	0fda      	lsrs	r2, r3, #31
 800783c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007840:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007844:	2000      	movs	r0, #0
 8007846:	106d      	asrs	r5, r5, #1
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	f04f 0e16 	mov.w	lr, #22
 800784e:	4684      	mov	ip, r0
 8007850:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007854:	eb0c 0401 	add.w	r4, ip, r1
 8007858:	4294      	cmp	r4, r2
 800785a:	bfde      	ittt	le
 800785c:	1b12      	suble	r2, r2, r4
 800785e:	eb04 0c01 	addle.w	ip, r4, r1
 8007862:	1840      	addle	r0, r0, r1
 8007864:	0052      	lsls	r2, r2, #1
 8007866:	f1be 0e01 	subs.w	lr, lr, #1
 800786a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800786e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007872:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007876:	d1ed      	bne.n	8007854 <__ieee754_sqrt+0x94>
 8007878:	4671      	mov	r1, lr
 800787a:	2720      	movs	r7, #32
 800787c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007880:	4562      	cmp	r2, ip
 8007882:	eb04 060e 	add.w	r6, r4, lr
 8007886:	dc02      	bgt.n	800788e <__ieee754_sqrt+0xce>
 8007888:	d113      	bne.n	80078b2 <__ieee754_sqrt+0xf2>
 800788a:	429e      	cmp	r6, r3
 800788c:	d811      	bhi.n	80078b2 <__ieee754_sqrt+0xf2>
 800788e:	2e00      	cmp	r6, #0
 8007890:	eb06 0e04 	add.w	lr, r6, r4
 8007894:	da43      	bge.n	800791e <__ieee754_sqrt+0x15e>
 8007896:	f1be 0f00 	cmp.w	lr, #0
 800789a:	db40      	blt.n	800791e <__ieee754_sqrt+0x15e>
 800789c:	f10c 0801 	add.w	r8, ip, #1
 80078a0:	eba2 020c 	sub.w	r2, r2, ip
 80078a4:	429e      	cmp	r6, r3
 80078a6:	bf88      	it	hi
 80078a8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80078ac:	1b9b      	subs	r3, r3, r6
 80078ae:	4421      	add	r1, r4
 80078b0:	46c4      	mov	ip, r8
 80078b2:	0052      	lsls	r2, r2, #1
 80078b4:	3f01      	subs	r7, #1
 80078b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80078ba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80078be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80078c2:	d1dd      	bne.n	8007880 <__ieee754_sqrt+0xc0>
 80078c4:	4313      	orrs	r3, r2
 80078c6:	d006      	beq.n	80078d6 <__ieee754_sqrt+0x116>
 80078c8:	1c4c      	adds	r4, r1, #1
 80078ca:	bf13      	iteet	ne
 80078cc:	3101      	addne	r1, #1
 80078ce:	3001      	addeq	r0, #1
 80078d0:	4639      	moveq	r1, r7
 80078d2:	f021 0101 	bicne.w	r1, r1, #1
 80078d6:	1043      	asrs	r3, r0, #1
 80078d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80078dc:	0849      	lsrs	r1, r1, #1
 80078de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80078e2:	07c2      	lsls	r2, r0, #31
 80078e4:	bf48      	it	mi
 80078e6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80078ea:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80078ee:	460c      	mov	r4, r1
 80078f0:	463d      	mov	r5, r7
 80078f2:	e77f      	b.n	80077f4 <__ieee754_sqrt+0x34>
 80078f4:	0ada      	lsrs	r2, r3, #11
 80078f6:	3815      	subs	r0, #21
 80078f8:	055b      	lsls	r3, r3, #21
 80078fa:	2a00      	cmp	r2, #0
 80078fc:	d0fa      	beq.n	80078f4 <__ieee754_sqrt+0x134>
 80078fe:	02d7      	lsls	r7, r2, #11
 8007900:	d50a      	bpl.n	8007918 <__ieee754_sqrt+0x158>
 8007902:	f1c1 0420 	rsb	r4, r1, #32
 8007906:	fa23 f404 	lsr.w	r4, r3, r4
 800790a:	1e4d      	subs	r5, r1, #1
 800790c:	408b      	lsls	r3, r1
 800790e:	4322      	orrs	r2, r4
 8007910:	1b41      	subs	r1, r0, r5
 8007912:	e788      	b.n	8007826 <__ieee754_sqrt+0x66>
 8007914:	4608      	mov	r0, r1
 8007916:	e7f0      	b.n	80078fa <__ieee754_sqrt+0x13a>
 8007918:	0052      	lsls	r2, r2, #1
 800791a:	3101      	adds	r1, #1
 800791c:	e7ef      	b.n	80078fe <__ieee754_sqrt+0x13e>
 800791e:	46e0      	mov	r8, ip
 8007920:	e7be      	b.n	80078a0 <__ieee754_sqrt+0xe0>
 8007922:	bf00      	nop
 8007924:	7ff00000 	.word	0x7ff00000

08007928 <fabs>:
 8007928:	ec51 0b10 	vmov	r0, r1, d0
 800792c:	ee10 2a10 	vmov	r2, s0
 8007930:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007934:	ec43 2b10 	vmov	d0, r2, r3
 8007938:	4770      	bx	lr
 800793a:	0000      	movs	r0, r0
 800793c:	0000      	movs	r0, r0
	...

08007940 <nan>:
 8007940:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007948 <nan+0x8>
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	00000000 	.word	0x00000000
 800794c:	7ff80000 	.word	0x7ff80000

08007950 <_init>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	bf00      	nop
 8007954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007956:	bc08      	pop	{r3}
 8007958:	469e      	mov	lr, r3
 800795a:	4770      	bx	lr

0800795c <_fini>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr
