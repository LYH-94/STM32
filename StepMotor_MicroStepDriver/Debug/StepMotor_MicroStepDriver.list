
StepMotor_MicroStepDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08006e98  08006e98  00016e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007294  08007294  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007294  08007294  00017294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800729c  0800729c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800729c  0800729c  0001729c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072a0  080072a0  000172a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080072a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200001dc  08007480  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08007480  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011416  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002201  00000000  00000000  00031622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00033828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00034530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f6d  00000000  00000000  00035170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f39e  00000000  00000000  000580dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2ae1  00000000  00000000  0006747b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139f5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d8  00000000  00000000  00139fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e7c 	.word	0x08006e7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006e7c 	.word	0x08006e7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <StepMotorDriver_Iint>:

#include "A4988_Driver.h"
#include "main.h"

void StepMotorDriver_Iint(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, PA9_DIR_Pin, GPIO_PIN_SET);  // StepMotor direction
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8e:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <StepMotorDriver_Iint+0x58>)
 8000f90:	f001 f8a4 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PA8_ENA_Pin, GPIO_PIN_SET);  // StepMotor output DISABLE
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9a:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <StepMotorDriver_Iint+0x58>)
 8000f9c:	f001 f89e 	bl	80020dc <HAL_GPIO_WritePin>

	switch(MICRO_STEP_RESOLUTION)
	{
	case 16:
		HAL_GPIO_WritePin(GPIOB, PB13_MS1_Pin, GPIO_PIN_SET);  // StepMotor microstep MS1 , HIGH
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <StepMotorDriver_Iint+0x5c>)
 8000fa8:	f001 f898 	bl	80020dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB14_MS2_Pin, GPIO_PIN_SET);  // StepMotor microstep MS2 , HIGH
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <StepMotorDriver_Iint+0x5c>)
 8000fb4:	f001 f892 	bl	80020dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB15_MS3_Pin, GPIO_PIN_SET);  // StepMotor microstep MS3 , HIGH
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <StepMotorDriver_Iint+0x5c>)
 8000fc0:	f001 f88c 	bl	80020dc <HAL_GPIO_WritePin>
		//printf("microstep = 16\n");
		break;
 8000fc4:	bf00      	nop
		HAL_GPIO_WritePin(GPIOB, PB15_MS3_Pin, GPIO_PIN_RESET);  // StepMotor microstep MS3 , LOW
		//printf("microstep = 1\n");
		break;
	}

	__HAL_TIM_SET_PRESCALER(htim, PWM_PSC);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2253      	movs	r2, #83	; 0x53
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
	//printf("PWM_PSC = %d\n", PWM_PSC);
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <StepMotor_Control>:
  * param - angular_velocity ： The angular velocity of the motor (unit:degree/sec)
  * param - degree ： Motor rotation angle (unit:degree)
  * return - step
  */
uint32_t StepMotor_Control(TIM_HandleTypeDef *htim, float angular_velocity, float degree)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fec:	edc7 0a01 	vstr	s1, [r7, #4]
	if(degree < 0)
 8000ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d50c      	bpl.n	8001018 <StepMotor_Control+0x38>
	{
		HAL_GPIO_WritePin(GPIOA, PA9_DIR_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001004:	4844      	ldr	r0, [pc, #272]	; (8001118 <StepMotor_Control+0x138>)
 8001006:	f001 f869 	bl	80020dc <HAL_GPIO_WritePin>
		degree = -degree;
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eef1 7a67 	vneg.f32	s15, s15
 8001012:	edc7 7a01 	vstr	s15, [r7, #4]
 8001016:	e005      	b.n	8001024 <StepMotor_Control+0x44>
	}
	else
		HAL_GPIO_WritePin(GPIOA, PA9_DIR_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101e:	483e      	ldr	r0, [pc, #248]	; (8001118 <StepMotor_Control+0x138>)
 8001020:	f001 f85c 	bl	80020dc <HAL_GPIO_WritePin>

	if(angular_velocity < 1.71661376953125) angular_velocity = 1.71661376953125;
 8001024:	edd7 7a02 	vldr	s15, [r7, #8]
 8001028:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800111c <StepMotor_Control+0x13c>
 800102c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	d501      	bpl.n	800103a <StepMotor_Control+0x5a>
 8001036:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <StepMotor_Control+0x140>)
 8001038:	60bb      	str	r3, [r7, #8]
	if(angular_velocity > 1081.7307692307692307692307692308) angular_velocity = 1081.7307692307692307692307692308;
 800103a:	68b8      	ldr	r0, [r7, #8]
 800103c:	f7ff faa4 	bl	8000588 <__aeabi_f2d>
 8001040:	a32f      	add	r3, pc, #188	; (adr r3, 8001100 <StepMotor_Control+0x120>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff fd87 	bl	8000b58 <__aeabi_dcmpgt>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <StepMotor_Control+0x74>
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <StepMotor_Control+0x144>)
 8001052:	60bb      	str	r3, [r7, #8]
	uint16_t PWM_ARR = lroundf(1000000/(angular_velocity/(1.8/MICRO_STEP_RESOLUTION)))-1;
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f7ff fa97 	bl	8000588 <__aeabi_f2d>
 800105a:	a32b      	add	r3, pc, #172	; (adr r3, 8001108 <StepMotor_Control+0x128>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fc14 	bl	800088c <__aeabi_ddiv>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	a129      	add	r1, pc, #164	; (adr r1, 8001110 <StepMotor_Control+0x130>)
 800106a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800106e:	f7ff fc0d 	bl	800088c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fdb5 	bl	8000be8 <__aeabi_d2f>
 800107e:	4603      	mov	r3, r0
 8001080:	ee00 3a10 	vmov	s0, r3
 8001084:	f005 fece 	bl	8006e24 <lroundf>
 8001088:	4603      	mov	r3, r0
 800108a:	b29b      	uxth	r3, r3
 800108c:	3b01      	subs	r3, #1
 800108e:	82fb      	strh	r3, [r7, #22]
	if(PWM_ARR < 103) PWM_ARR = 103;
 8001090:	8afb      	ldrh	r3, [r7, #22]
 8001092:	2b66      	cmp	r3, #102	; 0x66
 8001094:	d801      	bhi.n	800109a <StepMotor_Control+0xba>
 8001096:	2367      	movs	r3, #103	; 0x67
 8001098:	82fb      	strh	r3, [r7, #22]
	if(PWM_ARR > 65535) PWM_ARR = 65535;
	//printf("PWM_ARR = %d\n", PWM_ARR);

	__HAL_TIM_SET_AUTORELOAD(htim, PWM_ARR);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	8afa      	ldrh	r2, [r7, #22]
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a2:	8afa      	ldrh	r2, [r7, #22]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (__HAL_TIM_GET_AUTORELOAD(htim) + 1)/2);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0852      	lsrs	r2, r2, #1
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_WritePin(GPIOA, PA8_ENA_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010be:	4816      	ldr	r0, [pc, #88]	; (8001118 <StepMotor_Control+0x138>)
 80010c0:	f001 f80c 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 80010c4:	2100      	movs	r1, #0
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f001 fe66 	bl	8002d98 <HAL_TIM_PWM_Start_IT>

	return lroundf(degree/(1.8/MICRO_STEP_RESOLUTION));
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fa5b 	bl	8000588 <__aeabi_f2d>
 80010d2:	a30d      	add	r3, pc, #52	; (adr r3, 8001108 <StepMotor_Control+0x128>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fbd8 	bl	800088c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd80 	bl	8000be8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	ee00 3a10 	vmov	s0, r3
 80010ee:	f005 fe99 	bl	8006e24 <lroundf>
 80010f2:	4603      	mov	r3, r0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	f3af 8000 	nop.w
 8001100:	4ec4ec4f 	.word	0x4ec4ec4f
 8001104:	4090e6ec 	.word	0x4090e6ec
 8001108:	cccccccd 	.word	0xcccccccd
 800110c:	3fbccccc 	.word	0x3fbccccc
 8001110:	00000000 	.word	0x00000000
 8001114:	412e8480 	.word	0x412e8480
 8001118:	40020000 	.word	0x40020000
 800111c:	3fdbba00 	.word	0x3fdbba00
 8001120:	3fdbba00 	.word	0x3fdbba00
 8001124:	44873762 	.word	0x44873762

08001128 <StepMotor_Stop>:

void StepMotor_Stop(TIM_HandleTypeDef *htim)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, PA8_ENA_Pin, GPIO_PIN_SET);
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8001130:	2100      	movs	r1, #0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f001 ff46 	bl	8002fc4 <HAL_TIM_PWM_Stop_IT>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ffc2 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f000 fc42 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f834 	bl	800124c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock / 1000);
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <main+0x5c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <main+0x60>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	099b      	lsrs	r3, r3, #6
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ffcf 	bl	8001194 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 f937 	bl	8001468 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011fa:	f000 f90b 	bl	8001414 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011fe:	f000 f893 	bl	8001328 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  StepMotorDriver_Iint(&htim2);
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <main+0x64>)
 8001204:	f7ff febc 	bl	8000f80 <StepMotorDriver_Iint>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while(g_count > 0)
 8001208:	e00c      	b.n	8001224 <main+0x4c>
	{
		g_step = StepMotor_Control(&htim2, 1080, 1080);  // test 1080 deg/sec, 1080deg
 800120a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001240 <main+0x68>
 800120e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001240 <main+0x68>
 8001212:	480a      	ldr	r0, [pc, #40]	; (800123c <main+0x64>)
 8001214:	f7ff fee4 	bl	8000fe0 <StepMotor_Control>
 8001218:	4603      	mov	r3, r0
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <main+0x6c>)
 800121c:	6013      	str	r3, [r2, #0]
		g_count = 0;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <main+0x70>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
	while(g_count > 0)
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <main+0x70>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ee      	bne.n	800120a <main+0x32>
	}

	HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f000 fc8b 	bl	8001b48 <HAL_Delay>
	while(g_count > 0)
 8001232:	e7f7      	b.n	8001224 <main+0x4c>
 8001234:	20000000 	.word	0x20000000
 8001238:	10624dd3 	.word	0x10624dd3
 800123c:	20000210 	.word	0x20000210
 8001240:	44870000 	.word	0x44870000
 8001244:	20000200 	.word	0x20000200
 8001248:	200001f8 	.word	0x200001f8

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	; 0x50
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2234      	movs	r2, #52	; 0x34
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f003 f90a 	bl	8004474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <SystemClock_Config+0xd4>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <SystemClock_Config+0xd4>)
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127e:	6413      	str	r3, [r2, #64]	; 0x40
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <SystemClock_Config+0xd4>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800128c:	2300      	movs	r3, #0
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <SystemClock_Config+0xd8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <SystemClock_Config+0xd8>)
 800129a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <SystemClock_Config+0xd8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b4:	2310      	movs	r3, #16
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012c0:	2310      	movs	r3, #16
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012ca:	2304      	movs	r3, #4
 80012cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fa16 	bl	800270c <HAL_RCC_OscConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012e6:	f000 f9ab 	bl	8001640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	230f      	movs	r3, #15
 80012ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ee:	2302      	movs	r3, #2
 80012f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	2102      	movs	r1, #2
 8001308:	4618      	mov	r0, r3
 800130a:	f000 ff33 	bl	8002174 <HAL_RCC_ClockConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001314:	f000 f994 	bl	8001640 <Error_Handler>
  }
}
 8001318:	bf00      	nop
 800131a:	3750      	adds	r7, #80	; 0x50
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000

08001328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <MX_TIM2_Init+0xe8>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <MX_TIM2_Init+0xe8>)
 8001362:	2253      	movs	r2, #83	; 0x53
 8001364:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <MX_TIM2_Init+0xe8>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <MX_TIM2_Init+0xe8>)
 800136e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <MX_TIM2_Init+0xe8>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <MX_TIM2_Init+0xe8>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001380:	4823      	ldr	r0, [pc, #140]	; (8001410 <MX_TIM2_Init+0xe8>)
 8001382:	f001 fc61 	bl	8002c48 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800138c:	f000 f958 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	4619      	mov	r1, r3
 800139c:	481c      	ldr	r0, [pc, #112]	; (8001410 <MX_TIM2_Init+0xe8>)
 800139e:	f002 f899 	bl	80034d4 <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013a8:	f000 f94a 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013ac:	4818      	ldr	r0, [pc, #96]	; (8001410 <MX_TIM2_Init+0xe8>)
 80013ae:	f001 fc9a 	bl	8002ce6 <HAL_TIM_PWM_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013b8:	f000 f942 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013bc:	2320      	movs	r3, #32
 80013be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4619      	mov	r1, r3
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_TIM2_Init+0xe8>)
 80013cc:	f002 fc82 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013d6:	f000 f933 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013da:	2360      	movs	r3, #96	; 0x60
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2500;
 80013de:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM2_Init+0xe8>)
 80013f4:	f001 ffac 	bl	8003350 <HAL_TIM_PWM_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013fe:	f000 f91f 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM2_Init+0xe8>)
 8001404:	f000 f970 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 8001408:	bf00      	nop
 800140a:	3738      	adds	r7, #56	; 0x38
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000210 	.word	0x20000210

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_USART2_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800144c:	f002 fcd2 	bl	8003df4 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 f8f3 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000258 	.word	0x20000258
 8001464:	40004400 	.word	0x40004400

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <MX_GPIO_Init+0x12c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a43      	ldr	r2, [pc, #268]	; (8001594 <MX_GPIO_Init+0x12c>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b41      	ldr	r3, [pc, #260]	; (8001594 <MX_GPIO_Init+0x12c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <MX_GPIO_Init+0x12c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a3c      	ldr	r2, [pc, #240]	; (8001594 <MX_GPIO_Init+0x12c>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <MX_GPIO_Init+0x12c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b36      	ldr	r3, [pc, #216]	; (8001594 <MX_GPIO_Init+0x12c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a35      	ldr	r2, [pc, #212]	; (8001594 <MX_GPIO_Init+0x12c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b33      	ldr	r3, [pc, #204]	; (8001594 <MX_GPIO_Init+0x12c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <MX_GPIO_Init+0x12c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a2e      	ldr	r2, [pc, #184]	; (8001594 <MX_GPIO_Init+0x12c>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <MX_GPIO_Init+0x12c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PA8_ENA_Pin|PA9_DIR_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80014f4:	4828      	ldr	r0, [pc, #160]	; (8001598 <MX_GPIO_Init+0x130>)
 80014f6:	f000 fdf1 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB13_MS1_Pin|PB14_MS2_Pin|PB15_MS3_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001500:	4826      	ldr	r0, [pc, #152]	; (800159c <MX_GPIO_Init+0x134>)
 8001502:	f000 fdeb 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800150c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4820      	ldr	r0, [pc, #128]	; (80015a0 <MX_GPIO_Init+0x138>)
 800151e:	f000 fc49 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001522:	2320      	movs	r3, #32
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4817      	ldr	r0, [pc, #92]	; (8001598 <MX_GPIO_Init+0x130>)
 800153a:	f000 fc3b 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13_MS1_Pin PB14_MS2_Pin PB15_MS3_Pin */
  GPIO_InitStruct.Pin = PB13_MS1_Pin|PB14_MS2_Pin|PB15_MS3_Pin;
 800153e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001548:	2302      	movs	r3, #2
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_GPIO_Init+0x134>)
 8001558:	f000 fc2c 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8_ENA_Pin PA9_DIR_Pin */
  GPIO_InitStruct.Pin = PA8_ENA_Pin|PA9_DIR_Pin;
 800155c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001566:	2301      	movs	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4808      	ldr	r0, [pc, #32]	; (8001598 <MX_GPIO_Init+0x130>)
 8001576:	f000 fc1d 	bl	8001db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2028      	movs	r0, #40	; 0x28
 8001580:	f000 fbe1 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001584:	2028      	movs	r0, #40	; 0x28
 8001586:	f000 fbfa 	bl	8001d7e <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800

080015a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  if(GPIO_Pin == B1_Pin){
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b4:	d106      	bne.n	80015c4 <HAL_GPIO_EXTI_Callback+0x20>
	  g_count = 1;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_GPIO_EXTI_Callback+0x28>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015bc:	2120      	movs	r1, #32
 80015be:	4804      	ldr	r0, [pc, #16]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80015c0:	f000 fda5 	bl	800210e <HAL_GPIO_TogglePin>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200001f8 	.word	0x200001f8
 80015d0:	40020000 	.word	0x40020000

080015d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */

  if(htim == &htim2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d110      	bne.n	8001606 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
  {
	  g_motor_step++;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80015ec:	6013      	str	r3, [r2, #0]
	  if(g_motor_step == g_step)
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d105      	bne.n	8001606 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	  {
		  StepMotor_Stop(&htim2);
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80015fc:	f7ff fd94 	bl	8001128 <StepMotor_Stop>
		  g_motor_step = 0;
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
	  }
  }
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000210 	.word	0x20000210
 8001614:	200001fc 	.word	0x200001fc
 8001618:	20000200 	.word	0x20000200

0800161c <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001624:	1d39      	adds	r1, r7, #4
 8001626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162a:	2201      	movs	r2, #1
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <__io_putchar+0x20>)
 800162e:	f002 fc2e 	bl	8003e8e <HAL_UART_Transmit>
  return ch;
 8001632:	687b      	ldr	r3, [r7, #4]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000258 	.word	0x20000258

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800168a:	2007      	movs	r0, #7
 800168c:	f000 fb50 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ac:	d115      	bne.n	80016da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_TIM_Base_MspInit+0x48>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_TIM_Base_MspInit+0x48>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_TIM_Base_MspInit+0x48>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	201c      	movs	r0, #28
 80016d0:	f000 fb39 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d4:	201c      	movs	r0, #28
 80016d6:	f000 fb52 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001708:	d11d      	bne.n	8001746 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_TIM_MspPostInit+0x68>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_TIM_MspPostInit+0x68>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_TIM_MspPostInit+0x68>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001726:	2301      	movs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800172e:	2302      	movs	r3, #2
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001736:	2301      	movs	r3, #1
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <HAL_TIM_MspPostInit+0x6c>)
 8001742:	f000 fb37 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_UART_MspInit+0x84>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d12b      	bne.n	80017d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_UART_MspInit+0x88>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_UART_MspInit+0x88>)
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0x88>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_UART_MspInit+0x88>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <HAL_UART_MspInit+0x88>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_UART_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017b2:	230c      	movs	r3, #12
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c2:	2307      	movs	r3, #7
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_UART_MspInit+0x8c>)
 80017ce:	f000 faf1 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40004400 	.word	0x40004400
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f968 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM2_IRQHandler+0x10>)
 8001842:	f001 fc7d 	bl	8003140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000210 	.word	0x20000210

08001850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001858:	f000 fc74 	bl	8002144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800187a:	f002 fdd1 	bl	8004420 <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
	return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit (int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018a2:	e7fe      	b.n	80018a2 <_exit+0x12>

080018a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00a      	b.n	80018cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b6:	f3af 8000 	nop.w
 80018ba:	4601      	mov	r1, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf0      	blt.n	80018b6 <_read+0x12>
	}

return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e009      	b.n	8001904 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fe8f 	bl	800161c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf1      	blt.n	80018f0 <_write+0x12>
	}
	return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_close>:

int _close(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193e:	605a      	str	r2, [r3, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_isatty>:

int _isatty(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f002 fd36 	bl	8004420 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20020000 	.word	0x20020000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	20000204 	.word	0x20000204
 80019e8:	200002b0 	.word	0x200002b0

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a2c:	4c0b      	ldr	r4, [pc, #44]	; (8001a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a3a:	f7ff ffd7 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f002 fcf5 	bl	800442c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff fbc9 	bl	80011d8 <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a54:	080072a4 	.word	0x080072a4
  ldr r2, =_sbss
 8001a58:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a5c:	200002b0 	.word	0x200002b0

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f94f 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fdd8 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f967 	bl	8001d9a <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 f92f 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	2000029c 	.word	0x2000029c

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	2000029c 	.word	0x2000029c

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff ffee 	bl	8001b30 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Delay+0x44>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6e:	bf00      	nop
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008

08001b90 <__NVIC_SetPriorityGrouping>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff29 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff3e 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff8e 	bl	8001c84 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff31 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e165      	b.n	800209c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8154 	bne.w	8002096 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d005      	beq.n	8001e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d130      	bne.n	8001e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d017      	beq.n	8001ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80ae 	beq.w	8002096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a5c      	ldr	r2, [pc, #368]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b5a      	ldr	r3, [pc, #360]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f56:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4f      	ldr	r2, [pc, #316]	; (80020bc <HAL_GPIO_Init+0x308>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d025      	beq.n	8001fce <HAL_GPIO_Init+0x21a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4e      	ldr	r2, [pc, #312]	; (80020c0 <HAL_GPIO_Init+0x30c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01f      	beq.n	8001fca <HAL_GPIO_Init+0x216>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4d      	ldr	r2, [pc, #308]	; (80020c4 <HAL_GPIO_Init+0x310>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d019      	beq.n	8001fc6 <HAL_GPIO_Init+0x212>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_GPIO_Init+0x314>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0x20e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_GPIO_Init+0x318>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00d      	beq.n	8001fbe <HAL_GPIO_Init+0x20a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_GPIO_Init+0x31c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <HAL_GPIO_Init+0x206>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <HAL_GPIO_Init+0x320>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_GPIO_Init+0x202>
 8001fb2:	2306      	movs	r3, #6
 8001fb4:	e00c      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	e00a      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fba:	2305      	movs	r3, #5
 8001fbc:	e008      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e004      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x21c>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	f002 0203 	and.w	r2, r2, #3
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	4093      	lsls	r3, r2
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe0:	4935      	ldr	r1, [pc, #212]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fee:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002012:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_GPIO_Init+0x324>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800203c:	4a26      	ldr	r2, [pc, #152]	; (80020d8 <HAL_GPIO_Init+0x324>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002066:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_GPIO_Init+0x324>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002090:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3301      	adds	r3, #1
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2b0f      	cmp	r3, #15
 80020a0:	f67f ae96 	bls.w	8001dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40013800 	.word	0x40013800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020c00 	.word	0x40020c00
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40021400 	.word	0x40021400
 80020d4:	40021800 	.word	0x40021800
 80020d8:	40013c00 	.word	0x40013c00

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	041a      	lsls	r2, r3, #16
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43d9      	mvns	r1, r3
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	400b      	ands	r3, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	619a      	str	r2, [r3, #24]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fa1e 	bl	80015a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cc      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d90c      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d044      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e067      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b37      	ldr	r3, [pc, #220]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4934      	ldr	r1, [pc, #208]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff fc64 	bl	8001b30 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff fc60 	bl	8001b30 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f855 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fbc4 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	08006e98 	.word	0x08006e98
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCC_GetHCLKFreq+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800235c:	f7ff fff0 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	0a9b      	lsrs	r3, r3, #10
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4903      	ldr	r1, [pc, #12]	; (800237c <HAL_RCC_GetPCLK1Freq+0x24>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	08006ea8 	.word	0x08006ea8

08002380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002384:	f7ff ffdc 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0b5b      	lsrs	r3, r3, #13
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4903      	ldr	r1, [pc, #12]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08006ea8 	.word	0x08006ea8

080023a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ac:	b088      	sub	sp, #32
 80023ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c4:	4bce      	ldr	r3, [pc, #824]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	f200 818d 	bhi.w	80026ec <HAL_RCC_GetSysClockFreq+0x344>
 80023d2:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <HAL_RCC_GetSysClockFreq+0x30>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	0800240d 	.word	0x0800240d
 80023dc:	080026ed 	.word	0x080026ed
 80023e0:	080026ed 	.word	0x080026ed
 80023e4:	080026ed 	.word	0x080026ed
 80023e8:	08002413 	.word	0x08002413
 80023ec:	080026ed 	.word	0x080026ed
 80023f0:	080026ed 	.word	0x080026ed
 80023f4:	080026ed 	.word	0x080026ed
 80023f8:	08002419 	.word	0x08002419
 80023fc:	080026ed 	.word	0x080026ed
 8002400:	080026ed 	.word	0x080026ed
 8002404:	080026ed 	.word	0x080026ed
 8002408:	0800258d 	.word	0x0800258d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4bbd      	ldr	r3, [pc, #756]	; (8002704 <HAL_RCC_GetSysClockFreq+0x35c>)
 800240e:	61bb      	str	r3, [r7, #24]
       break;
 8002410:	e16f      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002412:	4bbd      	ldr	r3, [pc, #756]	; (8002708 <HAL_RCC_GetSysClockFreq+0x360>)
 8002414:	61bb      	str	r3, [r7, #24]
      break;
 8002416:	e16c      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002418:	4bb9      	ldr	r3, [pc, #740]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002420:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002422:	4bb7      	ldr	r3, [pc, #732]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d053      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242e:	4bb4      	ldr	r3, [pc, #720]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	461a      	mov	r2, r3
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	ea02 0400 	and.w	r4, r2, r0
 8002446:	603c      	str	r4, [r7, #0]
 8002448:	400b      	ands	r3, r1
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	014b      	lsls	r3, r1, #5
 800245e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002462:	0142      	lsls	r2, r0, #5
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	4623      	mov	r3, r4
 800246a:	1ac0      	subs	r0, r0, r3
 800246c:	462b      	mov	r3, r5
 800246e:	eb61 0103 	sbc.w	r1, r1, r3
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	018b      	lsls	r3, r1, #6
 800247c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002480:	0182      	lsls	r2, r0, #6
 8002482:	1a12      	subs	r2, r2, r0
 8002484:	eb63 0301 	sbc.w	r3, r3, r1
 8002488:	f04f 0000 	mov.w	r0, #0
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	00d9      	lsls	r1, r3, #3
 8002492:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002496:	00d0      	lsls	r0, r2, #3
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4621      	mov	r1, r4
 800249e:	1852      	adds	r2, r2, r1
 80024a0:	4629      	mov	r1, r5
 80024a2:	eb43 0101 	adc.w	r1, r3, r1
 80024a6:	460b      	mov	r3, r1
 80024a8:	f04f 0000 	mov.w	r0, #0
 80024ac:	f04f 0100 	mov.w	r1, #0
 80024b0:	0259      	lsls	r1, r3, #9
 80024b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024b6:	0250      	lsls	r0, r2, #9
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	f7fe fbde 	bl	8000c88 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4613      	mov	r3, r2
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	e04c      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d6:	4b8a      	ldr	r3, [pc, #552]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	461a      	mov	r2, r3
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024e6:	f04f 0100 	mov.w	r1, #0
 80024ea:	ea02 0a00 	and.w	sl, r2, r0
 80024ee:	ea03 0b01 	and.w	fp, r3, r1
 80024f2:	4650      	mov	r0, sl
 80024f4:	4659      	mov	r1, fp
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	014b      	lsls	r3, r1, #5
 8002500:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002504:	0142      	lsls	r2, r0, #5
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	ebb0 000a 	subs.w	r0, r0, sl
 800250e:	eb61 010b 	sbc.w	r1, r1, fp
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	018b      	lsls	r3, r1, #6
 800251c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002520:	0182      	lsls	r2, r0, #6
 8002522:	1a12      	subs	r2, r2, r0
 8002524:	eb63 0301 	sbc.w	r3, r3, r1
 8002528:	f04f 0000 	mov.w	r0, #0
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	00d9      	lsls	r1, r3, #3
 8002532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002536:	00d0      	lsls	r0, r2, #3
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	eb12 020a 	adds.w	r2, r2, sl
 8002540:	eb43 030b 	adc.w	r3, r3, fp
 8002544:	f04f 0000 	mov.w	r0, #0
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	0299      	lsls	r1, r3, #10
 800254e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002552:	0290      	lsls	r0, r2, #10
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	461a      	mov	r2, r3
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	f7fe fb90 	bl	8000c88 <__aeabi_uldivmod>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4613      	mov	r3, r2
 800256e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002570:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	3301      	adds	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	61bb      	str	r3, [r7, #24]
      break;
 800258a:	e0b2      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258c:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002594:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002596:	4b5a      	ldr	r3, [pc, #360]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d04d      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a2:	4b57      	ldr	r3, [pc, #348]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	461a      	mov	r2, r3
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	ea02 0800 	and.w	r8, r2, r0
 80025ba:	ea03 0901 	and.w	r9, r3, r1
 80025be:	4640      	mov	r0, r8
 80025c0:	4649      	mov	r1, r9
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	014b      	lsls	r3, r1, #5
 80025cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025d0:	0142      	lsls	r2, r0, #5
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	ebb0 0008 	subs.w	r0, r0, r8
 80025da:	eb61 0109 	sbc.w	r1, r1, r9
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025ec:	0182      	lsls	r2, r0, #6
 80025ee:	1a12      	subs	r2, r2, r0
 80025f0:	eb63 0301 	sbc.w	r3, r3, r1
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	00d9      	lsls	r1, r3, #3
 80025fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002602:	00d0      	lsls	r0, r2, #3
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	eb12 0208 	adds.w	r2, r2, r8
 800260c:	eb43 0309 	adc.w	r3, r3, r9
 8002610:	f04f 0000 	mov.w	r0, #0
 8002614:	f04f 0100 	mov.w	r1, #0
 8002618:	0259      	lsls	r1, r3, #9
 800261a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800261e:	0250      	lsls	r0, r2, #9
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	461a      	mov	r2, r3
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f7fe fb2a 	bl	8000c88 <__aeabi_uldivmod>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4613      	mov	r3, r2
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	e04a      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	461a      	mov	r2, r3
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	ea02 0400 	and.w	r4, r2, r0
 8002656:	ea03 0501 	and.w	r5, r3, r1
 800265a:	4620      	mov	r0, r4
 800265c:	4629      	mov	r1, r5
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	014b      	lsls	r3, r1, #5
 8002668:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800266c:	0142      	lsls	r2, r0, #5
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	1b00      	subs	r0, r0, r4
 8002674:	eb61 0105 	sbc.w	r1, r1, r5
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	018b      	lsls	r3, r1, #6
 8002682:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002686:	0182      	lsls	r2, r0, #6
 8002688:	1a12      	subs	r2, r2, r0
 800268a:	eb63 0301 	sbc.w	r3, r3, r1
 800268e:	f04f 0000 	mov.w	r0, #0
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	00d9      	lsls	r1, r3, #3
 8002698:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800269c:	00d0      	lsls	r0, r2, #3
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	1912      	adds	r2, r2, r4
 80026a4:	eb45 0303 	adc.w	r3, r5, r3
 80026a8:	f04f 0000 	mov.w	r0, #0
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	0299      	lsls	r1, r3, #10
 80026b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026b6:	0290      	lsls	r0, r2, #10
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	f7fe fade 	bl	8000c88 <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4613      	mov	r3, r2
 80026d2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_RCC_GetSysClockFreq+0x358>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	0f1b      	lsrs	r3, r3, #28
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	61bb      	str	r3, [r7, #24]
      break;
 80026ea:	e002      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026ee:	61bb      	str	r3, [r7, #24]
      break;
 80026f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f2:	69bb      	ldr	r3, [r7, #24]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	00f42400 	.word	0x00f42400
 8002708:	007a1200 	.word	0x007a1200

0800270c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e28d      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8083 	beq.w	8002832 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800272c:	4b94      	ldr	r3, [pc, #592]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b04      	cmp	r3, #4
 8002736:	d019      	beq.n	800276c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002738:	4b91      	ldr	r3, [pc, #580]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002740:	2b08      	cmp	r3, #8
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002744:	4b8e      	ldr	r3, [pc, #568]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002750:	d00c      	beq.n	800276c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4b8b      	ldr	r3, [pc, #556]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d112      	bne.n	8002784 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4b84      	ldr	r3, [pc, #528]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05b      	beq.n	8002830 <HAL_RCC_OscConfig+0x124>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d157      	bne.n	8002830 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e25a      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x90>
 800278e:	4b7c      	ldr	r3, [pc, #496]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a7b      	ldr	r2, [pc, #492]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xcc>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0xb4>
 80027a6:	4b76      	ldr	r3, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a75      	ldr	r2, [pc, #468]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b73      	ldr	r3, [pc, #460]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a72      	ldr	r2, [pc, #456]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xcc>
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6e      	ldr	r2, [pc, #440]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b6c      	ldr	r3, [pc, #432]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6b      	ldr	r2, [pc, #428]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7ff f9a6 	bl	8001b30 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff f9a2 	bl	8001b30 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e21f      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xdc>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7ff f992 	bl	8001b30 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002810:	f7ff f98e 	bl	8001b30 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e20b      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b57      	ldr	r3, [pc, #348]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x104>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06f      	beq.n	800291e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800283e:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d017      	beq.n	800287a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800284a:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002852:	2b08      	cmp	r3, #8
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002856:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b44      	ldr	r3, [pc, #272]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b41      	ldr	r3, [pc, #260]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x186>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1d3      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4937      	ldr	r1, [pc, #220]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_RCC_OscConfig+0x278>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7ff f93b 	bl	8001b30 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028be:	f7ff f937 	bl	8001b30 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1b4      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4925      	ldr	r1, [pc, #148]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_OscConfig+0x278>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff f91a 	bl	8001b30 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002900:	f7ff f916 	bl	8001b30 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e193      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d036      	beq.n	8002998 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0x27c>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7ff f8fa 	bl	8001b30 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7ff f8f6 	bl	8001b30 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e173      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_OscConfig+0x274>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x234>
 800295e:	e01b      	b.n	8002998 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_OscConfig+0x27c>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7ff f8e3 	bl	8001b30 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e00e      	b.n	800298c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296e:	f7ff f8df 	bl	8001b30 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d907      	bls.n	800298c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e15c      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
 8002980:	40023800 	.word	0x40023800
 8002984:	42470000 	.word	0x42470000
 8002988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b8a      	ldr	r3, [pc, #552]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ea      	bne.n	800296e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8097 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b83      	ldr	r3, [pc, #524]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b7f      	ldr	r3, [pc, #508]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a7e      	ldr	r2, [pc, #504]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b7c      	ldr	r3, [pc, #496]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b79      	ldr	r3, [pc, #484]	; (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b76      	ldr	r3, [pc, #472]	; (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a75      	ldr	r2, [pc, #468]	; (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7ff f89f 	bl	8001b30 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7ff f89b 	bl	8001b30 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e118      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b6c      	ldr	r3, [pc, #432]	; (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x31e>
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a65      	ldr	r2, [pc, #404]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x358>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x340>
 8002a32:	4b61      	ldr	r3, [pc, #388]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a60      	ldr	r2, [pc, #384]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	4b5e      	ldr	r3, [pc, #376]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0x358>
 8002a4c:	4b5a      	ldr	r3, [pc, #360]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a59      	ldr	r2, [pc, #356]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	4b57      	ldr	r3, [pc, #348]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a56      	ldr	r2, [pc, #344]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7ff f860 	bl	8001b30 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7ff f85c 	bl	8001b30 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0d7      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCC_OscConfig+0x368>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7ff f84a 	bl	8001b30 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7ff f846 	bl	8001b30 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0c1      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	4a3a      	ldr	r2, [pc, #232]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80ad 	beq.w	8002c38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d060      	beq.n	8002bac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d145      	bne.n	8002b7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x4b4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7ff f81a 	bl	8001b30 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7ff f816 	bl	8001b30 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e093      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	019b      	lsls	r3, r3, #6
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	3b01      	subs	r3, #1
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	071b      	lsls	r3, r3, #28
 8002b4a:	491b      	ldr	r1, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x4b4>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe ffeb 	bl	8001b30 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe ffe7 	bl	8001b30 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e064      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x452>
 8002b7c:	e05c      	b.n	8002c38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_RCC_OscConfig+0x4b4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe ffd4 	bl	8001b30 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe ffd0 	bl	8001b30 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04d      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x480>
 8002baa:	e045      	b.n	8002c38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e040      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <HAL_RCC_OscConfig+0x538>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d030      	beq.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d129      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d122      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d119      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10f      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e041      	b.n	8002cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe fd14 	bl	800169c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4610      	mov	r0, r2
 8002c88:	f000 fd14 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e041      	b.n	8002d7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f839 	bl	8002d84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3304      	adds	r3, #4
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f000 fcc5 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_TIM_PWM_Start_IT+0x28>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e022      	b.n	8002e06 <HAL_TIM_PWM_Start_IT+0x6e>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d109      	bne.n	8002dda <HAL_TIM_PWM_Start_IT+0x42>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	e015      	b.n	8002e06 <HAL_TIM_PWM_Start_IT+0x6e>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d109      	bne.n	8002df4 <HAL_TIM_PWM_Start_IT+0x5c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e008      	b.n	8002e06 <HAL_TIM_PWM_Start_IT+0x6e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0c7      	b.n	8002f9e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Start_IT+0x86>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e1c:	e013      	b.n	8002e46 <HAL_TIM_PWM_Start_IT+0xae>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Start_IT+0x96>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2c:	e00b      	b.n	8002e46 <HAL_TIM_PWM_Start_IT+0xae>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_PWM_Start_IT+0xa6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e3c:	e003      	b.n	8002e46 <HAL_TIM_PWM_Start_IT+0xae>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	d841      	bhi.n	8002ed0 <HAL_TIM_PWM_Start_IT+0x138>
 8002e4c:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e89 	.word	0x08002e89
 8002e58:	08002ed1 	.word	0x08002ed1
 8002e5c:	08002ed1 	.word	0x08002ed1
 8002e60:	08002ed1 	.word	0x08002ed1
 8002e64:	08002e9b 	.word	0x08002e9b
 8002e68:	08002ed1 	.word	0x08002ed1
 8002e6c:	08002ed1 	.word	0x08002ed1
 8002e70:	08002ed1 	.word	0x08002ed1
 8002e74:	08002ead 	.word	0x08002ead
 8002e78:	08002ed1 	.word	0x08002ed1
 8002e7c:	08002ed1 	.word	0x08002ed1
 8002e80:	08002ed1 	.word	0x08002ed1
 8002e84:	08002ebf 	.word	0x08002ebf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0202 	orr.w	r2, r2, #2
 8002e96:	60da      	str	r2, [r3, #12]
      break;
 8002e98:	e01d      	b.n	8002ed6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0204 	orr.w	r2, r2, #4
 8002ea8:	60da      	str	r2, [r3, #12]
      break;
 8002eaa:	e014      	b.n	8002ed6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0208 	orr.w	r2, r2, #8
 8002eba:	60da      	str	r2, [r3, #12]
      break;
 8002ebc:	e00b      	b.n	8002ed6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0210 	orr.w	r2, r2, #16
 8002ecc:	60da      	str	r2, [r3, #12]
      break;
 8002ece:	e002      	b.n	8002ed6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d15f      	bne.n	8002f9c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fecf 	bl	8003c88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a2e      	ldr	r2, [pc, #184]	; (8002fa8 <HAL_TIM_PWM_Start_IT+0x210>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_PWM_Start_IT+0x166>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <HAL_TIM_PWM_Start_IT+0x214>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_PWM_Start_IT+0x16a>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_TIM_PWM_Start_IT+0x16c>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_TIM_PWM_Start_IT+0x210>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d022      	beq.n	8002f68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d01d      	beq.n	8002f68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_TIM_PWM_Start_IT+0x218>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d018      	beq.n	8002f68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <HAL_TIM_PWM_Start_IT+0x21c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <HAL_TIM_PWM_Start_IT+0x220>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00e      	beq.n	8002f68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <HAL_TIM_PWM_Start_IT+0x214>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <HAL_TIM_PWM_Start_IT+0x224>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_TIM_PWM_Start_IT+0x228>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d111      	bne.n	8002f8c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d010      	beq.n	8002f9c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	e007      	b.n	8002f9c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010400 	.word	0x40010400
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40001800 	.word	0x40001800

08002fc4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d841      	bhi.n	800305c <HAL_TIM_PWM_Stop_IT+0x98>
 8002fd8:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	0800305d 	.word	0x0800305d
 8002fe8:	0800305d 	.word	0x0800305d
 8002fec:	0800305d 	.word	0x0800305d
 8002ff0:	08003027 	.word	0x08003027
 8002ff4:	0800305d 	.word	0x0800305d
 8002ff8:	0800305d 	.word	0x0800305d
 8002ffc:	0800305d 	.word	0x0800305d
 8003000:	08003039 	.word	0x08003039
 8003004:	0800305d 	.word	0x0800305d
 8003008:	0800305d 	.word	0x0800305d
 800300c:	0800305d 	.word	0x0800305d
 8003010:	0800304b 	.word	0x0800304b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0202 	bic.w	r2, r2, #2
 8003022:	60da      	str	r2, [r3, #12]
      break;
 8003024:	e01d      	b.n	8003062 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	60da      	str	r2, [r3, #12]
      break;
 8003036:	e014      	b.n	8003062 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0208 	bic.w	r2, r2, #8
 8003046:	60da      	str	r2, [r3, #12]
      break;
 8003048:	e00b      	b.n	8003062 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0210 	bic.w	r2, r2, #16
 8003058:	60da      	str	r2, [r3, #12]
      break;
 800305a:	e002      	b.n	8003062 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	bf00      	nop
  }

  if (status == HAL_OK)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d161      	bne.n	800312c <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2200      	movs	r2, #0
 800306e:	6839      	ldr	r1, [r7, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fe09 	bl	8003c88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2f      	ldr	r2, [pc, #188]	; (8003138 <HAL_TIM_PWM_Stop_IT+0x174>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_TIM_PWM_Stop_IT+0xc6>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a2d      	ldr	r2, [pc, #180]	; (800313c <HAL_TIM_PWM_Stop_IT+0x178>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_TIM_PWM_Stop_IT+0xca>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_TIM_PWM_Stop_IT+0xcc>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d017      	beq.n	80030c4 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a1a      	ldr	r2, [r3, #32]
 800309a:	f241 1311 	movw	r3, #4369	; 0x1111
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10f      	bne.n	80030c4 <HAL_TIM_PWM_Stop_IT+0x100>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	f240 4344 	movw	r3, #1092	; 0x444
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d107      	bne.n	80030c4 <HAL_TIM_PWM_Stop_IT+0x100>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a1a      	ldr	r2, [r3, #32]
 80030ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10f      	bne.n	80030f4 <HAL_TIM_PWM_Stop_IT+0x130>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a1a      	ldr	r2, [r3, #32]
 80030da:	f240 4344 	movw	r3, #1092	; 0x444
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_PWM_Stop_IT+0x130>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <HAL_TIM_PWM_Stop_IT+0x140>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003102:	e013      	b.n	800312c <HAL_TIM_PWM_Stop_IT+0x168>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d104      	bne.n	8003114 <HAL_TIM_PWM_Stop_IT+0x150>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003112:	e00b      	b.n	800312c <HAL_TIM_PWM_Stop_IT+0x168>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b08      	cmp	r3, #8
 8003118:	d104      	bne.n	8003124 <HAL_TIM_PWM_Stop_IT+0x160>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003122:	e003      	b.n	800312c <HAL_TIM_PWM_Stop_IT+0x168>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d122      	bne.n	800319c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0202 	mvn.w	r2, #2
 800316c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa81 	bl	800368a <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fa73 	bl	8003676 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fe fa1f 	bl	80015d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d122      	bne.n	80031f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d11b      	bne.n	80031f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0204 	mvn.w	r2, #4
 80031c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa57 	bl	800368a <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa49 	bl	8003676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fe f9f5 	bl	80015d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d122      	bne.n	8003244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b08      	cmp	r3, #8
 800320a:	d11b      	bne.n	8003244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0208 	mvn.w	r2, #8
 8003214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2204      	movs	r2, #4
 800321a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fa2d 	bl	800368a <HAL_TIM_IC_CaptureCallback>
 8003230:	e005      	b.n	800323e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fa1f 	bl	8003676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fe f9cb 	bl	80015d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b10      	cmp	r3, #16
 8003250:	d122      	bne.n	8003298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b10      	cmp	r3, #16
 800325e:	d11b      	bne.n	8003298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0210 	mvn.w	r2, #16
 8003268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2208      	movs	r2, #8
 800326e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fa03 	bl	800368a <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f9f5 	bl	8003676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fe f9a1 	bl	80015d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0201 	mvn.w	r2, #1
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f9cf 	bl	8003662 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b80      	cmp	r3, #128	; 0x80
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b80      	cmp	r3, #128	; 0x80
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fd78 	bl	8003de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b40      	cmp	r3, #64	; 0x40
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9c1 	bl	800369e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b20      	cmp	r3, #32
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b20      	cmp	r3, #32
 8003336:	d107      	bne.n	8003348 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0220 	mvn.w	r2, #32
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fd42 	bl	8003dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0ae      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	f200 809f 	bhi.w	80034bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033b9 	.word	0x080033b9
 8003388:	080034bd 	.word	0x080034bd
 800338c:	080034bd 	.word	0x080034bd
 8003390:	080034bd 	.word	0x080034bd
 8003394:	080033f9 	.word	0x080033f9
 8003398:	080034bd 	.word	0x080034bd
 800339c:	080034bd 	.word	0x080034bd
 80033a0:	080034bd 	.word	0x080034bd
 80033a4:	0800343b 	.word	0x0800343b
 80033a8:	080034bd 	.word	0x080034bd
 80033ac:	080034bd 	.word	0x080034bd
 80033b0:	080034bd 	.word	0x080034bd
 80033b4:	0800347b 	.word	0x0800347b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fa18 	bl	80037f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0204 	bic.w	r2, r2, #4
 80033e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6999      	ldr	r1, [r3, #24]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	619a      	str	r2, [r3, #24]
      break;
 80033f6:	e064      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fa68 	bl	80038d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6999      	ldr	r1, [r3, #24]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	021a      	lsls	r2, r3, #8
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	619a      	str	r2, [r3, #24]
      break;
 8003438:	e043      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fabd 	bl	80039c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0208 	orr.w	r2, r2, #8
 8003454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0204 	bic.w	r2, r2, #4
 8003464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69d9      	ldr	r1, [r3, #28]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	61da      	str	r2, [r3, #28]
      break;
 8003478:	e023      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fb11 	bl	8003aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69da      	ldr	r2, [r3, #28]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69d9      	ldr	r1, [r3, #28]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	021a      	lsls	r2, r3, #8
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	61da      	str	r2, [r3, #28]
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	75fb      	strb	r3, [r7, #23]
      break;
 80034c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIM_ConfigClockSource+0x1c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e0b4      	b.n	800365a <HAL_TIM_ConfigClockSource+0x186>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800350e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d03e      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0xd4>
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	f200 8087 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003536:	f000 8086 	beq.w	8003646 <HAL_TIM_ConfigClockSource+0x172>
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d87f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b70      	cmp	r3, #112	; 0x70
 8003542:	d01a      	beq.n	800357a <HAL_TIM_ConfigClockSource+0xa6>
 8003544:	2b70      	cmp	r3, #112	; 0x70
 8003546:	d87b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b60      	cmp	r3, #96	; 0x60
 800354a:	d050      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x11a>
 800354c:	2b60      	cmp	r3, #96	; 0x60
 800354e:	d877      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b50      	cmp	r3, #80	; 0x50
 8003552:	d03c      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0xfa>
 8003554:	2b50      	cmp	r3, #80	; 0x50
 8003556:	d873      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d058      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x13a>
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d86f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003560:	2b30      	cmp	r3, #48	; 0x30
 8003562:	d064      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d86b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003568:	2b20      	cmp	r3, #32
 800356a:	d060      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d867      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d05c      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 8003574:	2b10      	cmp	r3, #16
 8003576:	d05a      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 8003578:	e062      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6899      	ldr	r1, [r3, #8]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f000 fb5d 	bl	8003c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800359c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	609a      	str	r2, [r3, #8]
      break;
 80035a6:	e04f      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f000 fb46 	bl	8003c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ca:	609a      	str	r2, [r3, #8]
      break;
 80035cc:	e03c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 faba 	bl	8003b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2150      	movs	r1, #80	; 0x50
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fb13 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e02c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 fad9 	bl	8003bb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2160      	movs	r1, #96	; 0x60
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fb03 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 800360c:	e01c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	461a      	mov	r2, r3
 800361c:	f000 fa9a 	bl	8003b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	4618      	mov	r0, r3
 8003628:	f000 faf3 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 800362c:	e00c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f000 faea 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 800363e:	e003      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      break;
 8003644:	e000      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a40      	ldr	r2, [pc, #256]	; (80037c8 <TIM_Base_SetConfig+0x114>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d013      	beq.n	80036f4 <TIM_Base_SetConfig+0x40>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d00f      	beq.n	80036f4 <TIM_Base_SetConfig+0x40>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a3d      	ldr	r2, [pc, #244]	; (80037cc <TIM_Base_SetConfig+0x118>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00b      	beq.n	80036f4 <TIM_Base_SetConfig+0x40>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a3c      	ldr	r2, [pc, #240]	; (80037d0 <TIM_Base_SetConfig+0x11c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <TIM_Base_SetConfig+0x40>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a3b      	ldr	r2, [pc, #236]	; (80037d4 <TIM_Base_SetConfig+0x120>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_Base_SetConfig+0x40>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3a      	ldr	r2, [pc, #232]	; (80037d8 <TIM_Base_SetConfig+0x124>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d108      	bne.n	8003706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <TIM_Base_SetConfig+0x114>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d02b      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003714:	d027      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a2c      	ldr	r2, [pc, #176]	; (80037cc <TIM_Base_SetConfig+0x118>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d023      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a2b      	ldr	r2, [pc, #172]	; (80037d0 <TIM_Base_SetConfig+0x11c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01f      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <TIM_Base_SetConfig+0x120>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01b      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <TIM_Base_SetConfig+0x124>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d017      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a28      	ldr	r2, [pc, #160]	; (80037dc <TIM_Base_SetConfig+0x128>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a27      	ldr	r2, [pc, #156]	; (80037e0 <TIM_Base_SetConfig+0x12c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00f      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a26      	ldr	r2, [pc, #152]	; (80037e4 <TIM_Base_SetConfig+0x130>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00b      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a25      	ldr	r2, [pc, #148]	; (80037e8 <TIM_Base_SetConfig+0x134>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a24      	ldr	r2, [pc, #144]	; (80037ec <TIM_Base_SetConfig+0x138>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a23      	ldr	r2, [pc, #140]	; (80037f0 <TIM_Base_SetConfig+0x13c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d108      	bne.n	8003778 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <TIM_Base_SetConfig+0x114>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <TIM_Base_SetConfig+0xf8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a0c      	ldr	r2, [pc, #48]	; (80037d8 <TIM_Base_SetConfig+0x124>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d103      	bne.n	80037b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	615a      	str	r2, [r3, #20]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800
 80037d4:	40000c00 	.word	0x40000c00
 80037d8:	40010400 	.word	0x40010400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800
 80037e8:	40001800 	.word	0x40001800
 80037ec:	40001c00 	.word	0x40001c00
 80037f0:	40002000 	.word	0x40002000

080037f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0201 	bic.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f023 0302 	bic.w	r3, r3, #2
 800383c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a20      	ldr	r2, [pc, #128]	; (80038cc <TIM_OC1_SetConfig+0xd8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_OC1_SetConfig+0x64>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <TIM_OC1_SetConfig+0xdc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d10c      	bne.n	8003872 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0308 	bic.w	r3, r3, #8
 800385e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 0304 	bic.w	r3, r3, #4
 8003870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a15      	ldr	r2, [pc, #84]	; (80038cc <TIM_OC1_SetConfig+0xd8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_OC1_SetConfig+0x8e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a14      	ldr	r2, [pc, #80]	; (80038d0 <TIM_OC1_SetConfig+0xdc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40010400 	.word	0x40010400

080038d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0210 	bic.w	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f023 0320 	bic.w	r3, r3, #32
 800391e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a22      	ldr	r2, [pc, #136]	; (80039b8 <TIM_OC2_SetConfig+0xe4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_OC2_SetConfig+0x68>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a21      	ldr	r2, [pc, #132]	; (80039bc <TIM_OC2_SetConfig+0xe8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d10d      	bne.n	8003958 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003956:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <TIM_OC2_SetConfig+0xe4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_OC2_SetConfig+0x94>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <TIM_OC2_SetConfig+0xe8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d113      	bne.n	8003990 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800396e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003976:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40010400 	.word	0x40010400

080039c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <TIM_OC3_SetConfig+0xe0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_OC3_SetConfig+0x66>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <TIM_OC3_SetConfig+0xe4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10d      	bne.n	8003a42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <TIM_OC3_SetConfig+0xe0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_OC3_SetConfig+0x92>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <TIM_OC3_SetConfig+0xe4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d113      	bne.n	8003a7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40010400 	.word	0x40010400

08003aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	031b      	lsls	r3, r3, #12
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <TIM_OC4_SetConfig+0xa4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_OC4_SetConfig+0x68>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <TIM_OC4_SetConfig+0xa8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d109      	bne.n	8003b24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	019b      	lsls	r3, r3, #6
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40010400 	.word	0x40010400

08003b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f023 030a 	bic.w	r3, r3, #10
 8003b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0210 	bic.w	r2, r3, #16
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	031b      	lsls	r3, r3, #12
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f043 0307 	orr.w	r3, r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1a      	ldr	r2, [r3, #32]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	401a      	ands	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1a      	ldr	r2, [r3, #32]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e05a      	b.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a21      	ldr	r2, [pc, #132]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d01d      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1a      	ldr	r2, [pc, #104]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10c      	bne.n	8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40010400 	.word	0x40010400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40001800 	.word	0x40001800

08003dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e03f      	b.n	8003e86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd fc9c 	bl	8001758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	; 0x24
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f929 	bl	8004090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08a      	sub	sp, #40	; 0x28
 8003e92:	af02      	add	r7, sp, #8
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d17c      	bne.n	8003fa8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_UART_Transmit+0x2c>
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e075      	b.n	8003faa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_UART_Transmit+0x3e>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e06e      	b.n	8003faa <HAL_UART_Transmit+0x11c>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2221      	movs	r2, #33	; 0x21
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ee2:	f7fd fe25 	bl	8001b30 <HAL_GetTick>
 8003ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	88fa      	ldrh	r2, [r7, #6]
 8003ef2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d108      	bne.n	8003f10 <HAL_UART_Transmit+0x82>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	e003      	b.n	8003f18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f20:	e02a      	b.n	8003f78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f840 	bl	8003fb2 <UART_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e036      	b.n	8003faa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	3302      	adds	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e007      	b.n	8003f6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	3301      	adds	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1cf      	bne.n	8003f22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2140      	movs	r1, #64	; 0x40
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f810 	bl	8003fb2 <UART_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e006      	b.n	8003faa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b090      	sub	sp, #64	; 0x40
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	603b      	str	r3, [r7, #0]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc2:	e050      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	d04c      	beq.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd2:	f7fd fdad 	bl	8001b30 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d241      	bcs.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004002:	637a      	str	r2, [r7, #52]	; 0x34
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	613b      	str	r3, [r7, #16]
   return(result);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004036:	623a      	str	r2, [r7, #32]
 8004038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	69f9      	ldr	r1, [r7, #28]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	61bb      	str	r3, [r7, #24]
   return(result);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e00f      	b.n	8004086 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	429a      	cmp	r2, r3
 8004082:	d09f      	beq.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3740      	adds	r7, #64	; 0x40
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	b09f      	sub	sp, #124	; 0x7c
 8004096:	af00      	add	r7, sp, #0
 8004098:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a6:	68d9      	ldr	r1, [r3, #12]
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	ea40 0301 	orr.w	r3, r0, r1
 80040b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80040ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040d4:	f021 010c 	bic.w	r1, r1, #12
 80040d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040de:	430b      	orrs	r3, r1
 80040e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ee:	6999      	ldr	r1, [r3, #24]
 80040f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	ea40 0301 	orr.w	r3, r0, r1
 80040f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4bc5      	ldr	r3, [pc, #788]	; (8004414 <UART_SetConfig+0x384>)
 8004100:	429a      	cmp	r2, r3
 8004102:	d004      	beq.n	800410e <UART_SetConfig+0x7e>
 8004104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4bc3      	ldr	r3, [pc, #780]	; (8004418 <UART_SetConfig+0x388>)
 800410a:	429a      	cmp	r2, r3
 800410c:	d103      	bne.n	8004116 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800410e:	f7fe f937 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8004112:	6778      	str	r0, [r7, #116]	; 0x74
 8004114:	e002      	b.n	800411c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004116:	f7fe f91f 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 800411a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800411c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004124:	f040 80b6 	bne.w	8004294 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412a:	461c      	mov	r4, r3
 800412c:	f04f 0500 	mov.w	r5, #0
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	1891      	adds	r1, r2, r2
 8004136:	6439      	str	r1, [r7, #64]	; 0x40
 8004138:	415b      	adcs	r3, r3
 800413a:	647b      	str	r3, [r7, #68]	; 0x44
 800413c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004140:	1912      	adds	r2, r2, r4
 8004142:	eb45 0303 	adc.w	r3, r5, r3
 8004146:	f04f 0000 	mov.w	r0, #0
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	00d9      	lsls	r1, r3, #3
 8004150:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004154:	00d0      	lsls	r0, r2, #3
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	1911      	adds	r1, r2, r4
 800415c:	6639      	str	r1, [r7, #96]	; 0x60
 800415e:	416b      	adcs	r3, r5
 8004160:	667b      	str	r3, [r7, #100]	; 0x64
 8004162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	461a      	mov	r2, r3
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	1891      	adds	r1, r2, r2
 800416e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004170:	415b      	adcs	r3, r3
 8004172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004178:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800417c:	f7fc fd84 	bl	8000c88 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4ba5      	ldr	r3, [pc, #660]	; (800441c <UART_SetConfig+0x38c>)
 8004186:	fba3 2302 	umull	r2, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	011e      	lsls	r6, r3, #4
 800418e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004190:	461c      	mov	r4, r3
 8004192:	f04f 0500 	mov.w	r5, #0
 8004196:	4622      	mov	r2, r4
 8004198:	462b      	mov	r3, r5
 800419a:	1891      	adds	r1, r2, r2
 800419c:	6339      	str	r1, [r7, #48]	; 0x30
 800419e:	415b      	adcs	r3, r3
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
 80041a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041a6:	1912      	adds	r2, r2, r4
 80041a8:	eb45 0303 	adc.w	r3, r5, r3
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	00d9      	lsls	r1, r3, #3
 80041b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041ba:	00d0      	lsls	r0, r2, #3
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	1911      	adds	r1, r2, r4
 80041c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80041c4:	416b      	adcs	r3, r5
 80041c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	461a      	mov	r2, r3
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	1891      	adds	r1, r2, r2
 80041d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80041d6:	415b      	adcs	r3, r3
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80041e2:	f7fc fd51 	bl	8000c88 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4b8c      	ldr	r3, [pc, #560]	; (800441c <UART_SetConfig+0x38c>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	; 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	3332      	adds	r3, #50	; 0x32
 80041fe:	4a87      	ldr	r2, [pc, #540]	; (800441c <UART_SetConfig+0x38c>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800420c:	441e      	add	r6, r3
 800420e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004210:	4618      	mov	r0, r3
 8004212:	f04f 0100 	mov.w	r1, #0
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	1894      	adds	r4, r2, r2
 800421c:	623c      	str	r4, [r7, #32]
 800421e:	415b      	adcs	r3, r3
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
 8004222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004226:	1812      	adds	r2, r2, r0
 8004228:	eb41 0303 	adc.w	r3, r1, r3
 800422c:	f04f 0400 	mov.w	r4, #0
 8004230:	f04f 0500 	mov.w	r5, #0
 8004234:	00dd      	lsls	r5, r3, #3
 8004236:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800423a:	00d4      	lsls	r4, r2, #3
 800423c:	4622      	mov	r2, r4
 800423e:	462b      	mov	r3, r5
 8004240:	1814      	adds	r4, r2, r0
 8004242:	653c      	str	r4, [r7, #80]	; 0x50
 8004244:	414b      	adcs	r3, r1
 8004246:	657b      	str	r3, [r7, #84]	; 0x54
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	461a      	mov	r2, r3
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	1891      	adds	r1, r2, r2
 8004254:	61b9      	str	r1, [r7, #24]
 8004256:	415b      	adcs	r3, r3
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800425e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004262:	f7fc fd11 	bl	8000c88 <__aeabi_uldivmod>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4b6c      	ldr	r3, [pc, #432]	; (800441c <UART_SetConfig+0x38c>)
 800426c:	fba3 1302 	umull	r1, r3, r3, r2
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	2164      	movs	r1, #100	; 0x64
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	3332      	adds	r3, #50	; 0x32
 800427e:	4a67      	ldr	r2, [pc, #412]	; (800441c <UART_SetConfig+0x38c>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	f003 0207 	and.w	r2, r3, #7
 800428a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4432      	add	r2, r6
 8004290:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004292:	e0b9      	b.n	8004408 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004296:	461c      	mov	r4, r3
 8004298:	f04f 0500 	mov.w	r5, #0
 800429c:	4622      	mov	r2, r4
 800429e:	462b      	mov	r3, r5
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	6139      	str	r1, [r7, #16]
 80042a4:	415b      	adcs	r3, r3
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042ac:	1912      	adds	r2, r2, r4
 80042ae:	eb45 0303 	adc.w	r3, r5, r3
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	00d9      	lsls	r1, r3, #3
 80042bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042c0:	00d0      	lsls	r0, r2, #3
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	eb12 0804 	adds.w	r8, r2, r4
 80042ca:	eb43 0905 	adc.w	r9, r3, r5
 80042ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	008b      	lsls	r3, r1, #2
 80042e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042e6:	0082      	lsls	r2, r0, #2
 80042e8:	4640      	mov	r0, r8
 80042ea:	4649      	mov	r1, r9
 80042ec:	f7fc fccc 	bl	8000c88 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4b49      	ldr	r3, [pc, #292]	; (800441c <UART_SetConfig+0x38c>)
 80042f6:	fba3 2302 	umull	r2, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	011e      	lsls	r6, r3, #4
 80042fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004300:	4618      	mov	r0, r3
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	1894      	adds	r4, r2, r2
 800430c:	60bc      	str	r4, [r7, #8]
 800430e:	415b      	adcs	r3, r3
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004316:	1812      	adds	r2, r2, r0
 8004318:	eb41 0303 	adc.w	r3, r1, r3
 800431c:	f04f 0400 	mov.w	r4, #0
 8004320:	f04f 0500 	mov.w	r5, #0
 8004324:	00dd      	lsls	r5, r3, #3
 8004326:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800432a:	00d4      	lsls	r4, r2, #3
 800432c:	4622      	mov	r2, r4
 800432e:	462b      	mov	r3, r5
 8004330:	1814      	adds	r4, r2, r0
 8004332:	64bc      	str	r4, [r7, #72]	; 0x48
 8004334:	414b      	adcs	r3, r1
 8004336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4618      	mov	r0, r3
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	008b      	lsls	r3, r1, #2
 800434c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004350:	0082      	lsls	r2, r0, #2
 8004352:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004356:	f7fc fc97 	bl	8000c88 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4b2f      	ldr	r3, [pc, #188]	; (800441c <UART_SetConfig+0x38c>)
 8004360:	fba3 1302 	umull	r1, r3, r3, r2
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	2164      	movs	r1, #100	; 0x64
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	3332      	adds	r3, #50	; 0x32
 8004372:	4a2a      	ldr	r2, [pc, #168]	; (800441c <UART_SetConfig+0x38c>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437e:	441e      	add	r6, r3
 8004380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004382:	4618      	mov	r0, r3
 8004384:	f04f 0100 	mov.w	r1, #0
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	1894      	adds	r4, r2, r2
 800438e:	603c      	str	r4, [r7, #0]
 8004390:	415b      	adcs	r3, r3
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004398:	1812      	adds	r2, r2, r0
 800439a:	eb41 0303 	adc.w	r3, r1, r3
 800439e:	f04f 0400 	mov.w	r4, #0
 80043a2:	f04f 0500 	mov.w	r5, #0
 80043a6:	00dd      	lsls	r5, r3, #3
 80043a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043ac:	00d4      	lsls	r4, r2, #3
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	eb12 0a00 	adds.w	sl, r2, r0
 80043b6:	eb43 0b01 	adc.w	fp, r3, r1
 80043ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4618      	mov	r0, r3
 80043c0:	f04f 0100 	mov.w	r1, #0
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	008b      	lsls	r3, r1, #2
 80043ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043d2:	0082      	lsls	r2, r0, #2
 80043d4:	4650      	mov	r0, sl
 80043d6:	4659      	mov	r1, fp
 80043d8:	f7fc fc56 	bl	8000c88 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <UART_SetConfig+0x38c>)
 80043e2:	fba3 1302 	umull	r1, r3, r3, r2
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	2164      	movs	r1, #100	; 0x64
 80043ea:	fb01 f303 	mul.w	r3, r1, r3
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	3332      	adds	r3, #50	; 0x32
 80043f4:	4a09      	ldr	r2, [pc, #36]	; (800441c <UART_SetConfig+0x38c>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4432      	add	r2, r6
 8004406:	609a      	str	r2, [r3, #8]
}
 8004408:	bf00      	nop
 800440a:	377c      	adds	r7, #124	; 0x7c
 800440c:	46bd      	mov	sp, r7
 800440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004412:	bf00      	nop
 8004414:	40011000 	.word	0x40011000
 8004418:	40011400 	.word	0x40011400
 800441c:	51eb851f 	.word	0x51eb851f

08004420 <__errno>:
 8004420:	4b01      	ldr	r3, [pc, #4]	; (8004428 <__errno+0x8>)
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	2000000c 	.word	0x2000000c

0800442c <__libc_init_array>:
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	4d0d      	ldr	r5, [pc, #52]	; (8004464 <__libc_init_array+0x38>)
 8004430:	4c0d      	ldr	r4, [pc, #52]	; (8004468 <__libc_init_array+0x3c>)
 8004432:	1b64      	subs	r4, r4, r5
 8004434:	10a4      	asrs	r4, r4, #2
 8004436:	2600      	movs	r6, #0
 8004438:	42a6      	cmp	r6, r4
 800443a:	d109      	bne.n	8004450 <__libc_init_array+0x24>
 800443c:	4d0b      	ldr	r5, [pc, #44]	; (800446c <__libc_init_array+0x40>)
 800443e:	4c0c      	ldr	r4, [pc, #48]	; (8004470 <__libc_init_array+0x44>)
 8004440:	f002 fd1c 	bl	8006e7c <_init>
 8004444:	1b64      	subs	r4, r4, r5
 8004446:	10a4      	asrs	r4, r4, #2
 8004448:	2600      	movs	r6, #0
 800444a:	42a6      	cmp	r6, r4
 800444c:	d105      	bne.n	800445a <__libc_init_array+0x2e>
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	f855 3b04 	ldr.w	r3, [r5], #4
 8004454:	4798      	blx	r3
 8004456:	3601      	adds	r6, #1
 8004458:	e7ee      	b.n	8004438 <__libc_init_array+0xc>
 800445a:	f855 3b04 	ldr.w	r3, [r5], #4
 800445e:	4798      	blx	r3
 8004460:	3601      	adds	r6, #1
 8004462:	e7f2      	b.n	800444a <__libc_init_array+0x1e>
 8004464:	0800729c 	.word	0x0800729c
 8004468:	0800729c 	.word	0x0800729c
 800446c:	0800729c 	.word	0x0800729c
 8004470:	080072a0 	.word	0x080072a0

08004474 <memset>:
 8004474:	4402      	add	r2, r0
 8004476:	4603      	mov	r3, r0
 8004478:	4293      	cmp	r3, r2
 800447a:	d100      	bne.n	800447e <memset+0xa>
 800447c:	4770      	bx	lr
 800447e:	f803 1b01 	strb.w	r1, [r3], #1
 8004482:	e7f9      	b.n	8004478 <memset+0x4>

08004484 <__cvt>:
 8004484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	ec55 4b10 	vmov	r4, r5, d0
 800448c:	2d00      	cmp	r5, #0
 800448e:	460e      	mov	r6, r1
 8004490:	4619      	mov	r1, r3
 8004492:	462b      	mov	r3, r5
 8004494:	bfbb      	ittet	lt
 8004496:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800449a:	461d      	movlt	r5, r3
 800449c:	2300      	movge	r3, #0
 800449e:	232d      	movlt	r3, #45	; 0x2d
 80044a0:	700b      	strb	r3, [r1, #0]
 80044a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044a8:	4691      	mov	r9, r2
 80044aa:	f023 0820 	bic.w	r8, r3, #32
 80044ae:	bfbc      	itt	lt
 80044b0:	4622      	movlt	r2, r4
 80044b2:	4614      	movlt	r4, r2
 80044b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044b8:	d005      	beq.n	80044c6 <__cvt+0x42>
 80044ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044be:	d100      	bne.n	80044c2 <__cvt+0x3e>
 80044c0:	3601      	adds	r6, #1
 80044c2:	2102      	movs	r1, #2
 80044c4:	e000      	b.n	80044c8 <__cvt+0x44>
 80044c6:	2103      	movs	r1, #3
 80044c8:	ab03      	add	r3, sp, #12
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	ab02      	add	r3, sp, #8
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	ec45 4b10 	vmov	d0, r4, r5
 80044d4:	4653      	mov	r3, sl
 80044d6:	4632      	mov	r2, r6
 80044d8:	f000 fcca 	bl	8004e70 <_dtoa_r>
 80044dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044e0:	4607      	mov	r7, r0
 80044e2:	d102      	bne.n	80044ea <__cvt+0x66>
 80044e4:	f019 0f01 	tst.w	r9, #1
 80044e8:	d022      	beq.n	8004530 <__cvt+0xac>
 80044ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044ee:	eb07 0906 	add.w	r9, r7, r6
 80044f2:	d110      	bne.n	8004516 <__cvt+0x92>
 80044f4:	783b      	ldrb	r3, [r7, #0]
 80044f6:	2b30      	cmp	r3, #48	; 0x30
 80044f8:	d10a      	bne.n	8004510 <__cvt+0x8c>
 80044fa:	2200      	movs	r2, #0
 80044fc:	2300      	movs	r3, #0
 80044fe:	4620      	mov	r0, r4
 8004500:	4629      	mov	r1, r5
 8004502:	f7fc fb01 	bl	8000b08 <__aeabi_dcmpeq>
 8004506:	b918      	cbnz	r0, 8004510 <__cvt+0x8c>
 8004508:	f1c6 0601 	rsb	r6, r6, #1
 800450c:	f8ca 6000 	str.w	r6, [sl]
 8004510:	f8da 3000 	ldr.w	r3, [sl]
 8004514:	4499      	add	r9, r3
 8004516:	2200      	movs	r2, #0
 8004518:	2300      	movs	r3, #0
 800451a:	4620      	mov	r0, r4
 800451c:	4629      	mov	r1, r5
 800451e:	f7fc faf3 	bl	8000b08 <__aeabi_dcmpeq>
 8004522:	b108      	cbz	r0, 8004528 <__cvt+0xa4>
 8004524:	f8cd 900c 	str.w	r9, [sp, #12]
 8004528:	2230      	movs	r2, #48	; 0x30
 800452a:	9b03      	ldr	r3, [sp, #12]
 800452c:	454b      	cmp	r3, r9
 800452e:	d307      	bcc.n	8004540 <__cvt+0xbc>
 8004530:	9b03      	ldr	r3, [sp, #12]
 8004532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004534:	1bdb      	subs	r3, r3, r7
 8004536:	4638      	mov	r0, r7
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	b004      	add	sp, #16
 800453c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	9103      	str	r1, [sp, #12]
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	e7f0      	b.n	800452a <__cvt+0xa6>

08004548 <__exponent>:
 8004548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800454a:	4603      	mov	r3, r0
 800454c:	2900      	cmp	r1, #0
 800454e:	bfb8      	it	lt
 8004550:	4249      	neglt	r1, r1
 8004552:	f803 2b02 	strb.w	r2, [r3], #2
 8004556:	bfb4      	ite	lt
 8004558:	222d      	movlt	r2, #45	; 0x2d
 800455a:	222b      	movge	r2, #43	; 0x2b
 800455c:	2909      	cmp	r1, #9
 800455e:	7042      	strb	r2, [r0, #1]
 8004560:	dd2a      	ble.n	80045b8 <__exponent+0x70>
 8004562:	f10d 0407 	add.w	r4, sp, #7
 8004566:	46a4      	mov	ip, r4
 8004568:	270a      	movs	r7, #10
 800456a:	46a6      	mov	lr, r4
 800456c:	460a      	mov	r2, r1
 800456e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004572:	fb07 1516 	mls	r5, r7, r6, r1
 8004576:	3530      	adds	r5, #48	; 0x30
 8004578:	2a63      	cmp	r2, #99	; 0x63
 800457a:	f104 34ff 	add.w	r4, r4, #4294967295
 800457e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004582:	4631      	mov	r1, r6
 8004584:	dcf1      	bgt.n	800456a <__exponent+0x22>
 8004586:	3130      	adds	r1, #48	; 0x30
 8004588:	f1ae 0502 	sub.w	r5, lr, #2
 800458c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004590:	1c44      	adds	r4, r0, #1
 8004592:	4629      	mov	r1, r5
 8004594:	4561      	cmp	r1, ip
 8004596:	d30a      	bcc.n	80045ae <__exponent+0x66>
 8004598:	f10d 0209 	add.w	r2, sp, #9
 800459c:	eba2 020e 	sub.w	r2, r2, lr
 80045a0:	4565      	cmp	r5, ip
 80045a2:	bf88      	it	hi
 80045a4:	2200      	movhi	r2, #0
 80045a6:	4413      	add	r3, r2
 80045a8:	1a18      	subs	r0, r3, r0
 80045aa:	b003      	add	sp, #12
 80045ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045b6:	e7ed      	b.n	8004594 <__exponent+0x4c>
 80045b8:	2330      	movs	r3, #48	; 0x30
 80045ba:	3130      	adds	r1, #48	; 0x30
 80045bc:	7083      	strb	r3, [r0, #2]
 80045be:	70c1      	strb	r1, [r0, #3]
 80045c0:	1d03      	adds	r3, r0, #4
 80045c2:	e7f1      	b.n	80045a8 <__exponent+0x60>

080045c4 <_printf_float>:
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	ed2d 8b02 	vpush	{d8}
 80045cc:	b08d      	sub	sp, #52	; 0x34
 80045ce:	460c      	mov	r4, r1
 80045d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045d4:	4616      	mov	r6, r2
 80045d6:	461f      	mov	r7, r3
 80045d8:	4605      	mov	r5, r0
 80045da:	f001 fa35 	bl	8005a48 <_localeconv_r>
 80045de:	f8d0 a000 	ldr.w	sl, [r0]
 80045e2:	4650      	mov	r0, sl
 80045e4:	f7fb fe14 	bl	8000210 <strlen>
 80045e8:	2300      	movs	r3, #0
 80045ea:	930a      	str	r3, [sp, #40]	; 0x28
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	9305      	str	r3, [sp, #20]
 80045f0:	f8d8 3000 	ldr.w	r3, [r8]
 80045f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80045f8:	3307      	adds	r3, #7
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	f103 0208 	add.w	r2, r3, #8
 8004602:	f8c8 2000 	str.w	r2, [r8]
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800460e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004612:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004616:	9307      	str	r3, [sp, #28]
 8004618:	f8cd 8018 	str.w	r8, [sp, #24]
 800461c:	ee08 0a10 	vmov	s16, r0
 8004620:	4b9f      	ldr	r3, [pc, #636]	; (80048a0 <_printf_float+0x2dc>)
 8004622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004626:	f04f 32ff 	mov.w	r2, #4294967295
 800462a:	f7fc fa9f 	bl	8000b6c <__aeabi_dcmpun>
 800462e:	bb88      	cbnz	r0, 8004694 <_printf_float+0xd0>
 8004630:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004634:	4b9a      	ldr	r3, [pc, #616]	; (80048a0 <_printf_float+0x2dc>)
 8004636:	f04f 32ff 	mov.w	r2, #4294967295
 800463a:	f7fc fa79 	bl	8000b30 <__aeabi_dcmple>
 800463e:	bb48      	cbnz	r0, 8004694 <_printf_float+0xd0>
 8004640:	2200      	movs	r2, #0
 8004642:	2300      	movs	r3, #0
 8004644:	4640      	mov	r0, r8
 8004646:	4649      	mov	r1, r9
 8004648:	f7fc fa68 	bl	8000b1c <__aeabi_dcmplt>
 800464c:	b110      	cbz	r0, 8004654 <_printf_float+0x90>
 800464e:	232d      	movs	r3, #45	; 0x2d
 8004650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004654:	4b93      	ldr	r3, [pc, #588]	; (80048a4 <_printf_float+0x2e0>)
 8004656:	4894      	ldr	r0, [pc, #592]	; (80048a8 <_printf_float+0x2e4>)
 8004658:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800465c:	bf94      	ite	ls
 800465e:	4698      	movls	r8, r3
 8004660:	4680      	movhi	r8, r0
 8004662:	2303      	movs	r3, #3
 8004664:	6123      	str	r3, [r4, #16]
 8004666:	9b05      	ldr	r3, [sp, #20]
 8004668:	f023 0204 	bic.w	r2, r3, #4
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	f04f 0900 	mov.w	r9, #0
 8004672:	9700      	str	r7, [sp, #0]
 8004674:	4633      	mov	r3, r6
 8004676:	aa0b      	add	r2, sp, #44	; 0x2c
 8004678:	4621      	mov	r1, r4
 800467a:	4628      	mov	r0, r5
 800467c:	f000 f9d8 	bl	8004a30 <_printf_common>
 8004680:	3001      	adds	r0, #1
 8004682:	f040 8090 	bne.w	80047a6 <_printf_float+0x1e2>
 8004686:	f04f 30ff 	mov.w	r0, #4294967295
 800468a:	b00d      	add	sp, #52	; 0x34
 800468c:	ecbd 8b02 	vpop	{d8}
 8004690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004694:	4642      	mov	r2, r8
 8004696:	464b      	mov	r3, r9
 8004698:	4640      	mov	r0, r8
 800469a:	4649      	mov	r1, r9
 800469c:	f7fc fa66 	bl	8000b6c <__aeabi_dcmpun>
 80046a0:	b140      	cbz	r0, 80046b4 <_printf_float+0xf0>
 80046a2:	464b      	mov	r3, r9
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bfbc      	itt	lt
 80046a8:	232d      	movlt	r3, #45	; 0x2d
 80046aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046ae:	487f      	ldr	r0, [pc, #508]	; (80048ac <_printf_float+0x2e8>)
 80046b0:	4b7f      	ldr	r3, [pc, #508]	; (80048b0 <_printf_float+0x2ec>)
 80046b2:	e7d1      	b.n	8004658 <_printf_float+0x94>
 80046b4:	6863      	ldr	r3, [r4, #4]
 80046b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046ba:	9206      	str	r2, [sp, #24]
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	d13f      	bne.n	8004740 <_printf_float+0x17c>
 80046c0:	2306      	movs	r3, #6
 80046c2:	6063      	str	r3, [r4, #4]
 80046c4:	9b05      	ldr	r3, [sp, #20]
 80046c6:	6861      	ldr	r1, [r4, #4]
 80046c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046cc:	2300      	movs	r3, #0
 80046ce:	9303      	str	r3, [sp, #12]
 80046d0:	ab0a      	add	r3, sp, #40	; 0x28
 80046d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046d6:	ab09      	add	r3, sp, #36	; 0x24
 80046d8:	ec49 8b10 	vmov	d0, r8, r9
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	6022      	str	r2, [r4, #0]
 80046e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046e4:	4628      	mov	r0, r5
 80046e6:	f7ff fecd 	bl	8004484 <__cvt>
 80046ea:	9b06      	ldr	r3, [sp, #24]
 80046ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046ee:	2b47      	cmp	r3, #71	; 0x47
 80046f0:	4680      	mov	r8, r0
 80046f2:	d108      	bne.n	8004706 <_printf_float+0x142>
 80046f4:	1cc8      	adds	r0, r1, #3
 80046f6:	db02      	blt.n	80046fe <_printf_float+0x13a>
 80046f8:	6863      	ldr	r3, [r4, #4]
 80046fa:	4299      	cmp	r1, r3
 80046fc:	dd41      	ble.n	8004782 <_printf_float+0x1be>
 80046fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004702:	fa5f fb8b 	uxtb.w	fp, fp
 8004706:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800470a:	d820      	bhi.n	800474e <_printf_float+0x18a>
 800470c:	3901      	subs	r1, #1
 800470e:	465a      	mov	r2, fp
 8004710:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004714:	9109      	str	r1, [sp, #36]	; 0x24
 8004716:	f7ff ff17 	bl	8004548 <__exponent>
 800471a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800471c:	1813      	adds	r3, r2, r0
 800471e:	2a01      	cmp	r2, #1
 8004720:	4681      	mov	r9, r0
 8004722:	6123      	str	r3, [r4, #16]
 8004724:	dc02      	bgt.n	800472c <_printf_float+0x168>
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	07d2      	lsls	r2, r2, #31
 800472a:	d501      	bpl.n	8004730 <_printf_float+0x16c>
 800472c:	3301      	adds	r3, #1
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004734:	2b00      	cmp	r3, #0
 8004736:	d09c      	beq.n	8004672 <_printf_float+0xae>
 8004738:	232d      	movs	r3, #45	; 0x2d
 800473a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473e:	e798      	b.n	8004672 <_printf_float+0xae>
 8004740:	9a06      	ldr	r2, [sp, #24]
 8004742:	2a47      	cmp	r2, #71	; 0x47
 8004744:	d1be      	bne.n	80046c4 <_printf_float+0x100>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1bc      	bne.n	80046c4 <_printf_float+0x100>
 800474a:	2301      	movs	r3, #1
 800474c:	e7b9      	b.n	80046c2 <_printf_float+0xfe>
 800474e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004752:	d118      	bne.n	8004786 <_printf_float+0x1c2>
 8004754:	2900      	cmp	r1, #0
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	dd0b      	ble.n	8004772 <_printf_float+0x1ae>
 800475a:	6121      	str	r1, [r4, #16]
 800475c:	b913      	cbnz	r3, 8004764 <_printf_float+0x1a0>
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	07d0      	lsls	r0, r2, #31
 8004762:	d502      	bpl.n	800476a <_printf_float+0x1a6>
 8004764:	3301      	adds	r3, #1
 8004766:	440b      	add	r3, r1
 8004768:	6123      	str	r3, [r4, #16]
 800476a:	65a1      	str	r1, [r4, #88]	; 0x58
 800476c:	f04f 0900 	mov.w	r9, #0
 8004770:	e7de      	b.n	8004730 <_printf_float+0x16c>
 8004772:	b913      	cbnz	r3, 800477a <_printf_float+0x1b6>
 8004774:	6822      	ldr	r2, [r4, #0]
 8004776:	07d2      	lsls	r2, r2, #31
 8004778:	d501      	bpl.n	800477e <_printf_float+0x1ba>
 800477a:	3302      	adds	r3, #2
 800477c:	e7f4      	b.n	8004768 <_printf_float+0x1a4>
 800477e:	2301      	movs	r3, #1
 8004780:	e7f2      	b.n	8004768 <_printf_float+0x1a4>
 8004782:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004788:	4299      	cmp	r1, r3
 800478a:	db05      	blt.n	8004798 <_printf_float+0x1d4>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	6121      	str	r1, [r4, #16]
 8004790:	07d8      	lsls	r0, r3, #31
 8004792:	d5ea      	bpl.n	800476a <_printf_float+0x1a6>
 8004794:	1c4b      	adds	r3, r1, #1
 8004796:	e7e7      	b.n	8004768 <_printf_float+0x1a4>
 8004798:	2900      	cmp	r1, #0
 800479a:	bfd4      	ite	le
 800479c:	f1c1 0202 	rsble	r2, r1, #2
 80047a0:	2201      	movgt	r2, #1
 80047a2:	4413      	add	r3, r2
 80047a4:	e7e0      	b.n	8004768 <_printf_float+0x1a4>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	055a      	lsls	r2, r3, #21
 80047aa:	d407      	bmi.n	80047bc <_printf_float+0x1f8>
 80047ac:	6923      	ldr	r3, [r4, #16]
 80047ae:	4642      	mov	r2, r8
 80047b0:	4631      	mov	r1, r6
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b8      	blx	r7
 80047b6:	3001      	adds	r0, #1
 80047b8:	d12c      	bne.n	8004814 <_printf_float+0x250>
 80047ba:	e764      	b.n	8004686 <_printf_float+0xc2>
 80047bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047c0:	f240 80e0 	bls.w	8004984 <_printf_float+0x3c0>
 80047c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047c8:	2200      	movs	r2, #0
 80047ca:	2300      	movs	r3, #0
 80047cc:	f7fc f99c 	bl	8000b08 <__aeabi_dcmpeq>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d034      	beq.n	800483e <_printf_float+0x27a>
 80047d4:	4a37      	ldr	r2, [pc, #220]	; (80048b4 <_printf_float+0x2f0>)
 80047d6:	2301      	movs	r3, #1
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f af51 	beq.w	8004686 <_printf_float+0xc2>
 80047e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047e8:	429a      	cmp	r2, r3
 80047ea:	db02      	blt.n	80047f2 <_printf_float+0x22e>
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	07d8      	lsls	r0, r3, #31
 80047f0:	d510      	bpl.n	8004814 <_printf_float+0x250>
 80047f2:	ee18 3a10 	vmov	r3, s16
 80047f6:	4652      	mov	r2, sl
 80047f8:	4631      	mov	r1, r6
 80047fa:	4628      	mov	r0, r5
 80047fc:	47b8      	blx	r7
 80047fe:	3001      	adds	r0, #1
 8004800:	f43f af41 	beq.w	8004686 <_printf_float+0xc2>
 8004804:	f04f 0800 	mov.w	r8, #0
 8004808:	f104 091a 	add.w	r9, r4, #26
 800480c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800480e:	3b01      	subs	r3, #1
 8004810:	4543      	cmp	r3, r8
 8004812:	dc09      	bgt.n	8004828 <_printf_float+0x264>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	079b      	lsls	r3, r3, #30
 8004818:	f100 8105 	bmi.w	8004a26 <_printf_float+0x462>
 800481c:	68e0      	ldr	r0, [r4, #12]
 800481e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004820:	4298      	cmp	r0, r3
 8004822:	bfb8      	it	lt
 8004824:	4618      	movlt	r0, r3
 8004826:	e730      	b.n	800468a <_printf_float+0xc6>
 8004828:	2301      	movs	r3, #1
 800482a:	464a      	mov	r2, r9
 800482c:	4631      	mov	r1, r6
 800482e:	4628      	mov	r0, r5
 8004830:	47b8      	blx	r7
 8004832:	3001      	adds	r0, #1
 8004834:	f43f af27 	beq.w	8004686 <_printf_float+0xc2>
 8004838:	f108 0801 	add.w	r8, r8, #1
 800483c:	e7e6      	b.n	800480c <_printf_float+0x248>
 800483e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	dc39      	bgt.n	80048b8 <_printf_float+0x2f4>
 8004844:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <_printf_float+0x2f0>)
 8004846:	2301      	movs	r3, #1
 8004848:	4631      	mov	r1, r6
 800484a:	4628      	mov	r0, r5
 800484c:	47b8      	blx	r7
 800484e:	3001      	adds	r0, #1
 8004850:	f43f af19 	beq.w	8004686 <_printf_float+0xc2>
 8004854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004858:	4313      	orrs	r3, r2
 800485a:	d102      	bne.n	8004862 <_printf_float+0x29e>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	07d9      	lsls	r1, r3, #31
 8004860:	d5d8      	bpl.n	8004814 <_printf_float+0x250>
 8004862:	ee18 3a10 	vmov	r3, s16
 8004866:	4652      	mov	r2, sl
 8004868:	4631      	mov	r1, r6
 800486a:	4628      	mov	r0, r5
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	f43f af09 	beq.w	8004686 <_printf_float+0xc2>
 8004874:	f04f 0900 	mov.w	r9, #0
 8004878:	f104 0a1a 	add.w	sl, r4, #26
 800487c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487e:	425b      	negs	r3, r3
 8004880:	454b      	cmp	r3, r9
 8004882:	dc01      	bgt.n	8004888 <_printf_float+0x2c4>
 8004884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004886:	e792      	b.n	80047ae <_printf_float+0x1ea>
 8004888:	2301      	movs	r3, #1
 800488a:	4652      	mov	r2, sl
 800488c:	4631      	mov	r1, r6
 800488e:	4628      	mov	r0, r5
 8004890:	47b8      	blx	r7
 8004892:	3001      	adds	r0, #1
 8004894:	f43f aef7 	beq.w	8004686 <_printf_float+0xc2>
 8004898:	f109 0901 	add.w	r9, r9, #1
 800489c:	e7ee      	b.n	800487c <_printf_float+0x2b8>
 800489e:	bf00      	nop
 80048a0:	7fefffff 	.word	0x7fefffff
 80048a4:	08006eb4 	.word	0x08006eb4
 80048a8:	08006eb8 	.word	0x08006eb8
 80048ac:	08006ec0 	.word	0x08006ec0
 80048b0:	08006ebc 	.word	0x08006ebc
 80048b4:	08006ec4 	.word	0x08006ec4
 80048b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048bc:	429a      	cmp	r2, r3
 80048be:	bfa8      	it	ge
 80048c0:	461a      	movge	r2, r3
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	4691      	mov	r9, r2
 80048c6:	dc37      	bgt.n	8004938 <_printf_float+0x374>
 80048c8:	f04f 0b00 	mov.w	fp, #0
 80048cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048d0:	f104 021a 	add.w	r2, r4, #26
 80048d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048d6:	9305      	str	r3, [sp, #20]
 80048d8:	eba3 0309 	sub.w	r3, r3, r9
 80048dc:	455b      	cmp	r3, fp
 80048de:	dc33      	bgt.n	8004948 <_printf_float+0x384>
 80048e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e4:	429a      	cmp	r2, r3
 80048e6:	db3b      	blt.n	8004960 <_printf_float+0x39c>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	07da      	lsls	r2, r3, #31
 80048ec:	d438      	bmi.n	8004960 <_printf_float+0x39c>
 80048ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048f0:	9b05      	ldr	r3, [sp, #20]
 80048f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	eba2 0901 	sub.w	r9, r2, r1
 80048fa:	4599      	cmp	r9, r3
 80048fc:	bfa8      	it	ge
 80048fe:	4699      	movge	r9, r3
 8004900:	f1b9 0f00 	cmp.w	r9, #0
 8004904:	dc35      	bgt.n	8004972 <_printf_float+0x3ae>
 8004906:	f04f 0800 	mov.w	r8, #0
 800490a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800490e:	f104 0a1a 	add.w	sl, r4, #26
 8004912:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004916:	1a9b      	subs	r3, r3, r2
 8004918:	eba3 0309 	sub.w	r3, r3, r9
 800491c:	4543      	cmp	r3, r8
 800491e:	f77f af79 	ble.w	8004814 <_printf_float+0x250>
 8004922:	2301      	movs	r3, #1
 8004924:	4652      	mov	r2, sl
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	47b8      	blx	r7
 800492c:	3001      	adds	r0, #1
 800492e:	f43f aeaa 	beq.w	8004686 <_printf_float+0xc2>
 8004932:	f108 0801 	add.w	r8, r8, #1
 8004936:	e7ec      	b.n	8004912 <_printf_float+0x34e>
 8004938:	4613      	mov	r3, r2
 800493a:	4631      	mov	r1, r6
 800493c:	4642      	mov	r2, r8
 800493e:	4628      	mov	r0, r5
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	d1c0      	bne.n	80048c8 <_printf_float+0x304>
 8004946:	e69e      	b.n	8004686 <_printf_float+0xc2>
 8004948:	2301      	movs	r3, #1
 800494a:	4631      	mov	r1, r6
 800494c:	4628      	mov	r0, r5
 800494e:	9205      	str	r2, [sp, #20]
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f ae97 	beq.w	8004686 <_printf_float+0xc2>
 8004958:	9a05      	ldr	r2, [sp, #20]
 800495a:	f10b 0b01 	add.w	fp, fp, #1
 800495e:	e7b9      	b.n	80048d4 <_printf_float+0x310>
 8004960:	ee18 3a10 	vmov	r3, s16
 8004964:	4652      	mov	r2, sl
 8004966:	4631      	mov	r1, r6
 8004968:	4628      	mov	r0, r5
 800496a:	47b8      	blx	r7
 800496c:	3001      	adds	r0, #1
 800496e:	d1be      	bne.n	80048ee <_printf_float+0x32a>
 8004970:	e689      	b.n	8004686 <_printf_float+0xc2>
 8004972:	9a05      	ldr	r2, [sp, #20]
 8004974:	464b      	mov	r3, r9
 8004976:	4442      	add	r2, r8
 8004978:	4631      	mov	r1, r6
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	d1c1      	bne.n	8004906 <_printf_float+0x342>
 8004982:	e680      	b.n	8004686 <_printf_float+0xc2>
 8004984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004986:	2a01      	cmp	r2, #1
 8004988:	dc01      	bgt.n	800498e <_printf_float+0x3ca>
 800498a:	07db      	lsls	r3, r3, #31
 800498c:	d538      	bpl.n	8004a00 <_printf_float+0x43c>
 800498e:	2301      	movs	r3, #1
 8004990:	4642      	mov	r2, r8
 8004992:	4631      	mov	r1, r6
 8004994:	4628      	mov	r0, r5
 8004996:	47b8      	blx	r7
 8004998:	3001      	adds	r0, #1
 800499a:	f43f ae74 	beq.w	8004686 <_printf_float+0xc2>
 800499e:	ee18 3a10 	vmov	r3, s16
 80049a2:	4652      	mov	r2, sl
 80049a4:	4631      	mov	r1, r6
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	f43f ae6b 	beq.w	8004686 <_printf_float+0xc2>
 80049b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049b4:	2200      	movs	r2, #0
 80049b6:	2300      	movs	r3, #0
 80049b8:	f7fc f8a6 	bl	8000b08 <__aeabi_dcmpeq>
 80049bc:	b9d8      	cbnz	r0, 80049f6 <_printf_float+0x432>
 80049be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049c0:	f108 0201 	add.w	r2, r8, #1
 80049c4:	3b01      	subs	r3, #1
 80049c6:	4631      	mov	r1, r6
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b8      	blx	r7
 80049cc:	3001      	adds	r0, #1
 80049ce:	d10e      	bne.n	80049ee <_printf_float+0x42a>
 80049d0:	e659      	b.n	8004686 <_printf_float+0xc2>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4631      	mov	r1, r6
 80049d8:	4628      	mov	r0, r5
 80049da:	47b8      	blx	r7
 80049dc:	3001      	adds	r0, #1
 80049de:	f43f ae52 	beq.w	8004686 <_printf_float+0xc2>
 80049e2:	f108 0801 	add.w	r8, r8, #1
 80049e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e8:	3b01      	subs	r3, #1
 80049ea:	4543      	cmp	r3, r8
 80049ec:	dcf1      	bgt.n	80049d2 <_printf_float+0x40e>
 80049ee:	464b      	mov	r3, r9
 80049f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049f4:	e6dc      	b.n	80047b0 <_printf_float+0x1ec>
 80049f6:	f04f 0800 	mov.w	r8, #0
 80049fa:	f104 0a1a 	add.w	sl, r4, #26
 80049fe:	e7f2      	b.n	80049e6 <_printf_float+0x422>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4642      	mov	r2, r8
 8004a04:	e7df      	b.n	80049c6 <_printf_float+0x402>
 8004a06:	2301      	movs	r3, #1
 8004a08:	464a      	mov	r2, r9
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	47b8      	blx	r7
 8004a10:	3001      	adds	r0, #1
 8004a12:	f43f ae38 	beq.w	8004686 <_printf_float+0xc2>
 8004a16:	f108 0801 	add.w	r8, r8, #1
 8004a1a:	68e3      	ldr	r3, [r4, #12]
 8004a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a1e:	1a5b      	subs	r3, r3, r1
 8004a20:	4543      	cmp	r3, r8
 8004a22:	dcf0      	bgt.n	8004a06 <_printf_float+0x442>
 8004a24:	e6fa      	b.n	800481c <_printf_float+0x258>
 8004a26:	f04f 0800 	mov.w	r8, #0
 8004a2a:	f104 0919 	add.w	r9, r4, #25
 8004a2e:	e7f4      	b.n	8004a1a <_printf_float+0x456>

08004a30 <_printf_common>:
 8004a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a34:	4616      	mov	r6, r2
 8004a36:	4699      	mov	r9, r3
 8004a38:	688a      	ldr	r2, [r1, #8]
 8004a3a:	690b      	ldr	r3, [r1, #16]
 8004a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a40:	4293      	cmp	r3, r2
 8004a42:	bfb8      	it	lt
 8004a44:	4613      	movlt	r3, r2
 8004a46:	6033      	str	r3, [r6, #0]
 8004a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a4c:	4607      	mov	r7, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	b10a      	cbz	r2, 8004a56 <_printf_common+0x26>
 8004a52:	3301      	adds	r3, #1
 8004a54:	6033      	str	r3, [r6, #0]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	0699      	lsls	r1, r3, #26
 8004a5a:	bf42      	ittt	mi
 8004a5c:	6833      	ldrmi	r3, [r6, #0]
 8004a5e:	3302      	addmi	r3, #2
 8004a60:	6033      	strmi	r3, [r6, #0]
 8004a62:	6825      	ldr	r5, [r4, #0]
 8004a64:	f015 0506 	ands.w	r5, r5, #6
 8004a68:	d106      	bne.n	8004a78 <_printf_common+0x48>
 8004a6a:	f104 0a19 	add.w	sl, r4, #25
 8004a6e:	68e3      	ldr	r3, [r4, #12]
 8004a70:	6832      	ldr	r2, [r6, #0]
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	42ab      	cmp	r3, r5
 8004a76:	dc26      	bgt.n	8004ac6 <_printf_common+0x96>
 8004a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a7c:	1e13      	subs	r3, r2, #0
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	bf18      	it	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	0692      	lsls	r2, r2, #26
 8004a86:	d42b      	bmi.n	8004ae0 <_printf_common+0xb0>
 8004a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c0      	blx	r8
 8004a92:	3001      	adds	r0, #1
 8004a94:	d01e      	beq.n	8004ad4 <_printf_common+0xa4>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	68e5      	ldr	r5, [r4, #12]
 8004a9a:	6832      	ldr	r2, [r6, #0]
 8004a9c:	f003 0306 	and.w	r3, r3, #6
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	bf08      	it	eq
 8004aa4:	1aad      	subeq	r5, r5, r2
 8004aa6:	68a3      	ldr	r3, [r4, #8]
 8004aa8:	6922      	ldr	r2, [r4, #16]
 8004aaa:	bf0c      	ite	eq
 8004aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab0:	2500      	movne	r5, #0
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	bfc4      	itt	gt
 8004ab6:	1a9b      	subgt	r3, r3, r2
 8004ab8:	18ed      	addgt	r5, r5, r3
 8004aba:	2600      	movs	r6, #0
 8004abc:	341a      	adds	r4, #26
 8004abe:	42b5      	cmp	r5, r6
 8004ac0:	d11a      	bne.n	8004af8 <_printf_common+0xc8>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e008      	b.n	8004ad8 <_printf_common+0xa8>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4652      	mov	r2, sl
 8004aca:	4649      	mov	r1, r9
 8004acc:	4638      	mov	r0, r7
 8004ace:	47c0      	blx	r8
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d103      	bne.n	8004adc <_printf_common+0xac>
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004adc:	3501      	adds	r5, #1
 8004ade:	e7c6      	b.n	8004a6e <_printf_common+0x3e>
 8004ae0:	18e1      	adds	r1, r4, r3
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	2030      	movs	r0, #48	; 0x30
 8004ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aea:	4422      	add	r2, r4
 8004aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af4:	3302      	adds	r3, #2
 8004af6:	e7c7      	b.n	8004a88 <_printf_common+0x58>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4622      	mov	r2, r4
 8004afc:	4649      	mov	r1, r9
 8004afe:	4638      	mov	r0, r7
 8004b00:	47c0      	blx	r8
 8004b02:	3001      	adds	r0, #1
 8004b04:	d0e6      	beq.n	8004ad4 <_printf_common+0xa4>
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7d9      	b.n	8004abe <_printf_common+0x8e>
	...

08004b0c <_printf_i>:
 8004b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	460c      	mov	r4, r1
 8004b12:	4691      	mov	r9, r2
 8004b14:	7e27      	ldrb	r7, [r4, #24]
 8004b16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b18:	2f78      	cmp	r7, #120	; 0x78
 8004b1a:	4680      	mov	r8, r0
 8004b1c:	469a      	mov	sl, r3
 8004b1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b22:	d807      	bhi.n	8004b34 <_printf_i+0x28>
 8004b24:	2f62      	cmp	r7, #98	; 0x62
 8004b26:	d80a      	bhi.n	8004b3e <_printf_i+0x32>
 8004b28:	2f00      	cmp	r7, #0
 8004b2a:	f000 80d8 	beq.w	8004cde <_printf_i+0x1d2>
 8004b2e:	2f58      	cmp	r7, #88	; 0x58
 8004b30:	f000 80a3 	beq.w	8004c7a <_printf_i+0x16e>
 8004b34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b3c:	e03a      	b.n	8004bb4 <_printf_i+0xa8>
 8004b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b42:	2b15      	cmp	r3, #21
 8004b44:	d8f6      	bhi.n	8004b34 <_printf_i+0x28>
 8004b46:	a001      	add	r0, pc, #4	; (adr r0, 8004b4c <_printf_i+0x40>)
 8004b48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004bb9 	.word	0x08004bb9
 8004b54:	08004b35 	.word	0x08004b35
 8004b58:	08004b35 	.word	0x08004b35
 8004b5c:	08004b35 	.word	0x08004b35
 8004b60:	08004b35 	.word	0x08004b35
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004b35 	.word	0x08004b35
 8004b6c:	08004b35 	.word	0x08004b35
 8004b70:	08004b35 	.word	0x08004b35
 8004b74:	08004b35 	.word	0x08004b35
 8004b78:	08004cc5 	.word	0x08004cc5
 8004b7c:	08004be9 	.word	0x08004be9
 8004b80:	08004ca7 	.word	0x08004ca7
 8004b84:	08004b35 	.word	0x08004b35
 8004b88:	08004b35 	.word	0x08004b35
 8004b8c:	08004ce7 	.word	0x08004ce7
 8004b90:	08004b35 	.word	0x08004b35
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004b35 	.word	0x08004b35
 8004b9c:	08004b35 	.word	0x08004b35
 8004ba0:	08004caf 	.word	0x08004caf
 8004ba4:	680b      	ldr	r3, [r1, #0]
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	600a      	str	r2, [r1, #0]
 8004bac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0a3      	b.n	8004d00 <_printf_i+0x1f4>
 8004bb8:	6825      	ldr	r5, [r4, #0]
 8004bba:	6808      	ldr	r0, [r1, #0]
 8004bbc:	062e      	lsls	r6, r5, #24
 8004bbe:	f100 0304 	add.w	r3, r0, #4
 8004bc2:	d50a      	bpl.n	8004bda <_printf_i+0xce>
 8004bc4:	6805      	ldr	r5, [r0, #0]
 8004bc6:	600b      	str	r3, [r1, #0]
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	da03      	bge.n	8004bd4 <_printf_i+0xc8>
 8004bcc:	232d      	movs	r3, #45	; 0x2d
 8004bce:	426d      	negs	r5, r5
 8004bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd4:	485e      	ldr	r0, [pc, #376]	; (8004d50 <_printf_i+0x244>)
 8004bd6:	230a      	movs	r3, #10
 8004bd8:	e019      	b.n	8004c0e <_printf_i+0x102>
 8004bda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004bde:	6805      	ldr	r5, [r0, #0]
 8004be0:	600b      	str	r3, [r1, #0]
 8004be2:	bf18      	it	ne
 8004be4:	b22d      	sxthne	r5, r5
 8004be6:	e7ef      	b.n	8004bc8 <_printf_i+0xbc>
 8004be8:	680b      	ldr	r3, [r1, #0]
 8004bea:	6825      	ldr	r5, [r4, #0]
 8004bec:	1d18      	adds	r0, r3, #4
 8004bee:	6008      	str	r0, [r1, #0]
 8004bf0:	0628      	lsls	r0, r5, #24
 8004bf2:	d501      	bpl.n	8004bf8 <_printf_i+0xec>
 8004bf4:	681d      	ldr	r5, [r3, #0]
 8004bf6:	e002      	b.n	8004bfe <_printf_i+0xf2>
 8004bf8:	0669      	lsls	r1, r5, #25
 8004bfa:	d5fb      	bpl.n	8004bf4 <_printf_i+0xe8>
 8004bfc:	881d      	ldrh	r5, [r3, #0]
 8004bfe:	4854      	ldr	r0, [pc, #336]	; (8004d50 <_printf_i+0x244>)
 8004c00:	2f6f      	cmp	r7, #111	; 0x6f
 8004c02:	bf0c      	ite	eq
 8004c04:	2308      	moveq	r3, #8
 8004c06:	230a      	movne	r3, #10
 8004c08:	2100      	movs	r1, #0
 8004c0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c0e:	6866      	ldr	r6, [r4, #4]
 8004c10:	60a6      	str	r6, [r4, #8]
 8004c12:	2e00      	cmp	r6, #0
 8004c14:	bfa2      	ittt	ge
 8004c16:	6821      	ldrge	r1, [r4, #0]
 8004c18:	f021 0104 	bicge.w	r1, r1, #4
 8004c1c:	6021      	strge	r1, [r4, #0]
 8004c1e:	b90d      	cbnz	r5, 8004c24 <_printf_i+0x118>
 8004c20:	2e00      	cmp	r6, #0
 8004c22:	d04d      	beq.n	8004cc0 <_printf_i+0x1b4>
 8004c24:	4616      	mov	r6, r2
 8004c26:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c2a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c2e:	5dc7      	ldrb	r7, [r0, r7]
 8004c30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c34:	462f      	mov	r7, r5
 8004c36:	42bb      	cmp	r3, r7
 8004c38:	460d      	mov	r5, r1
 8004c3a:	d9f4      	bls.n	8004c26 <_printf_i+0x11a>
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d10b      	bne.n	8004c58 <_printf_i+0x14c>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	07df      	lsls	r7, r3, #31
 8004c44:	d508      	bpl.n	8004c58 <_printf_i+0x14c>
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	6861      	ldr	r1, [r4, #4]
 8004c4a:	4299      	cmp	r1, r3
 8004c4c:	bfde      	ittt	le
 8004c4e:	2330      	movle	r3, #48	; 0x30
 8004c50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c58:	1b92      	subs	r2, r2, r6
 8004c5a:	6122      	str	r2, [r4, #16]
 8004c5c:	f8cd a000 	str.w	sl, [sp]
 8004c60:	464b      	mov	r3, r9
 8004c62:	aa03      	add	r2, sp, #12
 8004c64:	4621      	mov	r1, r4
 8004c66:	4640      	mov	r0, r8
 8004c68:	f7ff fee2 	bl	8004a30 <_printf_common>
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d14c      	bne.n	8004d0a <_printf_i+0x1fe>
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	b004      	add	sp, #16
 8004c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7a:	4835      	ldr	r0, [pc, #212]	; (8004d50 <_printf_i+0x244>)
 8004c7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	680e      	ldr	r6, [r1, #0]
 8004c84:	061f      	lsls	r7, r3, #24
 8004c86:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c8a:	600e      	str	r6, [r1, #0]
 8004c8c:	d514      	bpl.n	8004cb8 <_printf_i+0x1ac>
 8004c8e:	07d9      	lsls	r1, r3, #31
 8004c90:	bf44      	itt	mi
 8004c92:	f043 0320 	orrmi.w	r3, r3, #32
 8004c96:	6023      	strmi	r3, [r4, #0]
 8004c98:	b91d      	cbnz	r5, 8004ca2 <_printf_i+0x196>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	f023 0320 	bic.w	r3, r3, #32
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	e7b0      	b.n	8004c08 <_printf_i+0xfc>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	f043 0320 	orr.w	r3, r3, #32
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	2378      	movs	r3, #120	; 0x78
 8004cb0:	4828      	ldr	r0, [pc, #160]	; (8004d54 <_printf_i+0x248>)
 8004cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cb6:	e7e3      	b.n	8004c80 <_printf_i+0x174>
 8004cb8:	065e      	lsls	r6, r3, #25
 8004cba:	bf48      	it	mi
 8004cbc:	b2ad      	uxthmi	r5, r5
 8004cbe:	e7e6      	b.n	8004c8e <_printf_i+0x182>
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	e7bb      	b.n	8004c3c <_printf_i+0x130>
 8004cc4:	680b      	ldr	r3, [r1, #0]
 8004cc6:	6826      	ldr	r6, [r4, #0]
 8004cc8:	6960      	ldr	r0, [r4, #20]
 8004cca:	1d1d      	adds	r5, r3, #4
 8004ccc:	600d      	str	r5, [r1, #0]
 8004cce:	0635      	lsls	r5, r6, #24
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	d501      	bpl.n	8004cd8 <_printf_i+0x1cc>
 8004cd4:	6018      	str	r0, [r3, #0]
 8004cd6:	e002      	b.n	8004cde <_printf_i+0x1d2>
 8004cd8:	0671      	lsls	r1, r6, #25
 8004cda:	d5fb      	bpl.n	8004cd4 <_printf_i+0x1c8>
 8004cdc:	8018      	strh	r0, [r3, #0]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	4616      	mov	r6, r2
 8004ce4:	e7ba      	b.n	8004c5c <_printf_i+0x150>
 8004ce6:	680b      	ldr	r3, [r1, #0]
 8004ce8:	1d1a      	adds	r2, r3, #4
 8004cea:	600a      	str	r2, [r1, #0]
 8004cec:	681e      	ldr	r6, [r3, #0]
 8004cee:	6862      	ldr	r2, [r4, #4]
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f7fb fa94 	bl	8000220 <memchr>
 8004cf8:	b108      	cbz	r0, 8004cfe <_printf_i+0x1f2>
 8004cfa:	1b80      	subs	r0, r0, r6
 8004cfc:	6060      	str	r0, [r4, #4]
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	2300      	movs	r3, #0
 8004d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d08:	e7a8      	b.n	8004c5c <_printf_i+0x150>
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	4632      	mov	r2, r6
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4640      	mov	r0, r8
 8004d12:	47d0      	blx	sl
 8004d14:	3001      	adds	r0, #1
 8004d16:	d0ab      	beq.n	8004c70 <_printf_i+0x164>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	079b      	lsls	r3, r3, #30
 8004d1c:	d413      	bmi.n	8004d46 <_printf_i+0x23a>
 8004d1e:	68e0      	ldr	r0, [r4, #12]
 8004d20:	9b03      	ldr	r3, [sp, #12]
 8004d22:	4298      	cmp	r0, r3
 8004d24:	bfb8      	it	lt
 8004d26:	4618      	movlt	r0, r3
 8004d28:	e7a4      	b.n	8004c74 <_printf_i+0x168>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	47d0      	blx	sl
 8004d34:	3001      	adds	r0, #1
 8004d36:	d09b      	beq.n	8004c70 <_printf_i+0x164>
 8004d38:	3501      	adds	r5, #1
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	9903      	ldr	r1, [sp, #12]
 8004d3e:	1a5b      	subs	r3, r3, r1
 8004d40:	42ab      	cmp	r3, r5
 8004d42:	dcf2      	bgt.n	8004d2a <_printf_i+0x21e>
 8004d44:	e7eb      	b.n	8004d1e <_printf_i+0x212>
 8004d46:	2500      	movs	r5, #0
 8004d48:	f104 0619 	add.w	r6, r4, #25
 8004d4c:	e7f5      	b.n	8004d3a <_printf_i+0x22e>
 8004d4e:	bf00      	nop
 8004d50:	08006ec6 	.word	0x08006ec6
 8004d54:	08006ed7 	.word	0x08006ed7

08004d58 <quorem>:
 8004d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5c:	6903      	ldr	r3, [r0, #16]
 8004d5e:	690c      	ldr	r4, [r1, #16]
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	4607      	mov	r7, r0
 8004d64:	f2c0 8081 	blt.w	8004e6a <quorem+0x112>
 8004d68:	3c01      	subs	r4, #1
 8004d6a:	f101 0814 	add.w	r8, r1, #20
 8004d6e:	f100 0514 	add.w	r5, r0, #20
 8004d72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d80:	3301      	adds	r3, #1
 8004d82:	429a      	cmp	r2, r3
 8004d84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d90:	d331      	bcc.n	8004df6 <quorem+0x9e>
 8004d92:	f04f 0e00 	mov.w	lr, #0
 8004d96:	4640      	mov	r0, r8
 8004d98:	46ac      	mov	ip, r5
 8004d9a:	46f2      	mov	sl, lr
 8004d9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004da0:	b293      	uxth	r3, r2
 8004da2:	fb06 e303 	mla	r3, r6, r3, lr
 8004da6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	ebaa 0303 	sub.w	r3, sl, r3
 8004db0:	0c12      	lsrs	r2, r2, #16
 8004db2:	f8dc a000 	ldr.w	sl, [ip]
 8004db6:	fb06 e202 	mla	r2, r6, r2, lr
 8004dba:	fa13 f38a 	uxtah	r3, r3, sl
 8004dbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dc2:	fa1f fa82 	uxth.w	sl, r2
 8004dc6:	f8dc 2000 	ldr.w	r2, [ip]
 8004dca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004dce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dd8:	4581      	cmp	r9, r0
 8004dda:	f84c 3b04 	str.w	r3, [ip], #4
 8004dde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004de2:	d2db      	bcs.n	8004d9c <quorem+0x44>
 8004de4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004de8:	b92b      	cbnz	r3, 8004df6 <quorem+0x9e>
 8004dea:	9b01      	ldr	r3, [sp, #4]
 8004dec:	3b04      	subs	r3, #4
 8004dee:	429d      	cmp	r5, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	d32e      	bcc.n	8004e52 <quorem+0xfa>
 8004df4:	613c      	str	r4, [r7, #16]
 8004df6:	4638      	mov	r0, r7
 8004df8:	f001 f8be 	bl	8005f78 <__mcmp>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	db24      	blt.n	8004e4a <quorem+0xf2>
 8004e00:	3601      	adds	r6, #1
 8004e02:	4628      	mov	r0, r5
 8004e04:	f04f 0c00 	mov.w	ip, #0
 8004e08:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e0c:	f8d0 e000 	ldr.w	lr, [r0]
 8004e10:	b293      	uxth	r3, r2
 8004e12:	ebac 0303 	sub.w	r3, ip, r3
 8004e16:	0c12      	lsrs	r2, r2, #16
 8004e18:	fa13 f38e 	uxtah	r3, r3, lr
 8004e1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e2a:	45c1      	cmp	r9, r8
 8004e2c:	f840 3b04 	str.w	r3, [r0], #4
 8004e30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e34:	d2e8      	bcs.n	8004e08 <quorem+0xb0>
 8004e36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e3e:	b922      	cbnz	r2, 8004e4a <quorem+0xf2>
 8004e40:	3b04      	subs	r3, #4
 8004e42:	429d      	cmp	r5, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	d30a      	bcc.n	8004e5e <quorem+0x106>
 8004e48:	613c      	str	r4, [r7, #16]
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	b003      	add	sp, #12
 8004e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	d1cc      	bne.n	8004df4 <quorem+0x9c>
 8004e5a:	3c01      	subs	r4, #1
 8004e5c:	e7c7      	b.n	8004dee <quorem+0x96>
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	d1f0      	bne.n	8004e48 <quorem+0xf0>
 8004e66:	3c01      	subs	r4, #1
 8004e68:	e7eb      	b.n	8004e42 <quorem+0xea>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e7ee      	b.n	8004e4c <quorem+0xf4>
	...

08004e70 <_dtoa_r>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	ed2d 8b02 	vpush	{d8}
 8004e78:	ec57 6b10 	vmov	r6, r7, d0
 8004e7c:	b095      	sub	sp, #84	; 0x54
 8004e7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e84:	9105      	str	r1, [sp, #20]
 8004e86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e90:	b975      	cbnz	r5, 8004eb0 <_dtoa_r+0x40>
 8004e92:	2010      	movs	r0, #16
 8004e94:	f000 fddc 	bl	8005a50 <malloc>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8004e9c:	b920      	cbnz	r0, 8004ea8 <_dtoa_r+0x38>
 8004e9e:	4bb2      	ldr	r3, [pc, #712]	; (8005168 <_dtoa_r+0x2f8>)
 8004ea0:	21ea      	movs	r1, #234	; 0xea
 8004ea2:	48b2      	ldr	r0, [pc, #712]	; (800516c <_dtoa_r+0x2fc>)
 8004ea4:	f001 fa32 	bl	800630c <__assert_func>
 8004ea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004eac:	6005      	str	r5, [r0, #0]
 8004eae:	60c5      	str	r5, [r0, #12]
 8004eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	b151      	cbz	r1, 8004ecc <_dtoa_r+0x5c>
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	604a      	str	r2, [r1, #4]
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4093      	lsls	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 fe1b 	bl	8005afc <_Bfree>
 8004ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	1e3b      	subs	r3, r7, #0
 8004ece:	bfb9      	ittee	lt
 8004ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ed4:	9303      	strlt	r3, [sp, #12]
 8004ed6:	2300      	movge	r3, #0
 8004ed8:	f8c8 3000 	strge.w	r3, [r8]
 8004edc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004ee0:	4ba3      	ldr	r3, [pc, #652]	; (8005170 <_dtoa_r+0x300>)
 8004ee2:	bfbc      	itt	lt
 8004ee4:	2201      	movlt	r2, #1
 8004ee6:	f8c8 2000 	strlt.w	r2, [r8]
 8004eea:	ea33 0309 	bics.w	r3, r3, r9
 8004eee:	d11b      	bne.n	8004f28 <_dtoa_r+0xb8>
 8004ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ef2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004efc:	4333      	orrs	r3, r6
 8004efe:	f000 857a 	beq.w	80059f6 <_dtoa_r+0xb86>
 8004f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f04:	b963      	cbnz	r3, 8004f20 <_dtoa_r+0xb0>
 8004f06:	4b9b      	ldr	r3, [pc, #620]	; (8005174 <_dtoa_r+0x304>)
 8004f08:	e024      	b.n	8004f54 <_dtoa_r+0xe4>
 8004f0a:	4b9b      	ldr	r3, [pc, #620]	; (8005178 <_dtoa_r+0x308>)
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	9800      	ldr	r0, [sp, #0]
 8004f16:	b015      	add	sp, #84	; 0x54
 8004f18:	ecbd 8b02 	vpop	{d8}
 8004f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f20:	4b94      	ldr	r3, [pc, #592]	; (8005174 <_dtoa_r+0x304>)
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	3303      	adds	r3, #3
 8004f26:	e7f3      	b.n	8004f10 <_dtoa_r+0xa0>
 8004f28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	ec51 0b17 	vmov	r0, r1, d7
 8004f32:	2300      	movs	r3, #0
 8004f34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004f38:	f7fb fde6 	bl	8000b08 <__aeabi_dcmpeq>
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	b158      	cbz	r0, 8004f58 <_dtoa_r+0xe8>
 8004f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f42:	2301      	movs	r3, #1
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8551 	beq.w	80059f0 <_dtoa_r+0xb80>
 8004f4e:	488b      	ldr	r0, [pc, #556]	; (800517c <_dtoa_r+0x30c>)
 8004f50:	6018      	str	r0, [r3, #0]
 8004f52:	1e43      	subs	r3, r0, #1
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	e7dd      	b.n	8004f14 <_dtoa_r+0xa4>
 8004f58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004f5c:	aa12      	add	r2, sp, #72	; 0x48
 8004f5e:	a913      	add	r1, sp, #76	; 0x4c
 8004f60:	4620      	mov	r0, r4
 8004f62:	f001 f8ad 	bl	80060c0 <__d2b>
 8004f66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004f6a:	4683      	mov	fp, r0
 8004f6c:	2d00      	cmp	r5, #0
 8004f6e:	d07c      	beq.n	800506a <_dtoa_r+0x1fa>
 8004f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004f7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f8a:	4b7d      	ldr	r3, [pc, #500]	; (8005180 <_dtoa_r+0x310>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4639      	mov	r1, r7
 8004f92:	f7fb f999 	bl	80002c8 <__aeabi_dsub>
 8004f96:	a36e      	add	r3, pc, #440	; (adr r3, 8005150 <_dtoa_r+0x2e0>)
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f7fb fb4c 	bl	8000638 <__aeabi_dmul>
 8004fa0:	a36d      	add	r3, pc, #436	; (adr r3, 8005158 <_dtoa_r+0x2e8>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f7fb f991 	bl	80002cc <__adddf3>
 8004faa:	4606      	mov	r6, r0
 8004fac:	4628      	mov	r0, r5
 8004fae:	460f      	mov	r7, r1
 8004fb0:	f7fb fad8 	bl	8000564 <__aeabi_i2d>
 8004fb4:	a36a      	add	r3, pc, #424	; (adr r3, 8005160 <_dtoa_r+0x2f0>)
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	f7fb fb3d 	bl	8000638 <__aeabi_dmul>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	f7fb f981 	bl	80002cc <__adddf3>
 8004fca:	4606      	mov	r6, r0
 8004fcc:	460f      	mov	r7, r1
 8004fce:	f7fb fde3 	bl	8000b98 <__aeabi_d2iz>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	4682      	mov	sl, r0
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	4630      	mov	r0, r6
 8004fda:	4639      	mov	r1, r7
 8004fdc:	f7fb fd9e 	bl	8000b1c <__aeabi_dcmplt>
 8004fe0:	b148      	cbz	r0, 8004ff6 <_dtoa_r+0x186>
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	f7fb fabe 	bl	8000564 <__aeabi_i2d>
 8004fe8:	4632      	mov	r2, r6
 8004fea:	463b      	mov	r3, r7
 8004fec:	f7fb fd8c 	bl	8000b08 <__aeabi_dcmpeq>
 8004ff0:	b908      	cbnz	r0, 8004ff6 <_dtoa_r+0x186>
 8004ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ff6:	f1ba 0f16 	cmp.w	sl, #22
 8004ffa:	d854      	bhi.n	80050a6 <_dtoa_r+0x236>
 8004ffc:	4b61      	ldr	r3, [pc, #388]	; (8005184 <_dtoa_r+0x314>)
 8004ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800500a:	f7fb fd87 	bl	8000b1c <__aeabi_dcmplt>
 800500e:	2800      	cmp	r0, #0
 8005010:	d04b      	beq.n	80050aa <_dtoa_r+0x23a>
 8005012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005016:	2300      	movs	r3, #0
 8005018:	930e      	str	r3, [sp, #56]	; 0x38
 800501a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800501c:	1b5d      	subs	r5, r3, r5
 800501e:	1e6b      	subs	r3, r5, #1
 8005020:	9304      	str	r3, [sp, #16]
 8005022:	bf43      	ittte	mi
 8005024:	2300      	movmi	r3, #0
 8005026:	f1c5 0801 	rsbmi	r8, r5, #1
 800502a:	9304      	strmi	r3, [sp, #16]
 800502c:	f04f 0800 	movpl.w	r8, #0
 8005030:	f1ba 0f00 	cmp.w	sl, #0
 8005034:	db3b      	blt.n	80050ae <_dtoa_r+0x23e>
 8005036:	9b04      	ldr	r3, [sp, #16]
 8005038:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800503c:	4453      	add	r3, sl
 800503e:	9304      	str	r3, [sp, #16]
 8005040:	2300      	movs	r3, #0
 8005042:	9306      	str	r3, [sp, #24]
 8005044:	9b05      	ldr	r3, [sp, #20]
 8005046:	2b09      	cmp	r3, #9
 8005048:	d869      	bhi.n	800511e <_dtoa_r+0x2ae>
 800504a:	2b05      	cmp	r3, #5
 800504c:	bfc4      	itt	gt
 800504e:	3b04      	subgt	r3, #4
 8005050:	9305      	strgt	r3, [sp, #20]
 8005052:	9b05      	ldr	r3, [sp, #20]
 8005054:	f1a3 0302 	sub.w	r3, r3, #2
 8005058:	bfcc      	ite	gt
 800505a:	2500      	movgt	r5, #0
 800505c:	2501      	movle	r5, #1
 800505e:	2b03      	cmp	r3, #3
 8005060:	d869      	bhi.n	8005136 <_dtoa_r+0x2c6>
 8005062:	e8df f003 	tbb	[pc, r3]
 8005066:	4e2c      	.short	0x4e2c
 8005068:	5a4c      	.short	0x5a4c
 800506a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800506e:	441d      	add	r5, r3
 8005070:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005074:	2b20      	cmp	r3, #32
 8005076:	bfc1      	itttt	gt
 8005078:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800507c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005080:	fa09 f303 	lslgt.w	r3, r9, r3
 8005084:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005088:	bfda      	itte	le
 800508a:	f1c3 0320 	rsble	r3, r3, #32
 800508e:	fa06 f003 	lslle.w	r0, r6, r3
 8005092:	4318      	orrgt	r0, r3
 8005094:	f7fb fa56 	bl	8000544 <__aeabi_ui2d>
 8005098:	2301      	movs	r3, #1
 800509a:	4606      	mov	r6, r0
 800509c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80050a0:	3d01      	subs	r5, #1
 80050a2:	9310      	str	r3, [sp, #64]	; 0x40
 80050a4:	e771      	b.n	8004f8a <_dtoa_r+0x11a>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e7b6      	b.n	8005018 <_dtoa_r+0x1a8>
 80050aa:	900e      	str	r0, [sp, #56]	; 0x38
 80050ac:	e7b5      	b.n	800501a <_dtoa_r+0x1aa>
 80050ae:	f1ca 0300 	rsb	r3, sl, #0
 80050b2:	9306      	str	r3, [sp, #24]
 80050b4:	2300      	movs	r3, #0
 80050b6:	eba8 080a 	sub.w	r8, r8, sl
 80050ba:	930d      	str	r3, [sp, #52]	; 0x34
 80050bc:	e7c2      	b.n	8005044 <_dtoa_r+0x1d4>
 80050be:	2300      	movs	r3, #0
 80050c0:	9308      	str	r3, [sp, #32]
 80050c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dc39      	bgt.n	800513c <_dtoa_r+0x2cc>
 80050c8:	f04f 0901 	mov.w	r9, #1
 80050cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80050d0:	464b      	mov	r3, r9
 80050d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80050d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80050d8:	2200      	movs	r2, #0
 80050da:	6042      	str	r2, [r0, #4]
 80050dc:	2204      	movs	r2, #4
 80050de:	f102 0614 	add.w	r6, r2, #20
 80050e2:	429e      	cmp	r6, r3
 80050e4:	6841      	ldr	r1, [r0, #4]
 80050e6:	d92f      	bls.n	8005148 <_dtoa_r+0x2d8>
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 fcc7 	bl	8005a7c <_Balloc>
 80050ee:	9000      	str	r0, [sp, #0]
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d14b      	bne.n	800518c <_dtoa_r+0x31c>
 80050f4:	4b24      	ldr	r3, [pc, #144]	; (8005188 <_dtoa_r+0x318>)
 80050f6:	4602      	mov	r2, r0
 80050f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050fc:	e6d1      	b.n	8004ea2 <_dtoa_r+0x32>
 80050fe:	2301      	movs	r3, #1
 8005100:	e7de      	b.n	80050c0 <_dtoa_r+0x250>
 8005102:	2300      	movs	r3, #0
 8005104:	9308      	str	r3, [sp, #32]
 8005106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005108:	eb0a 0903 	add.w	r9, sl, r3
 800510c:	f109 0301 	add.w	r3, r9, #1
 8005110:	2b01      	cmp	r3, #1
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	bfb8      	it	lt
 8005116:	2301      	movlt	r3, #1
 8005118:	e7dd      	b.n	80050d6 <_dtoa_r+0x266>
 800511a:	2301      	movs	r3, #1
 800511c:	e7f2      	b.n	8005104 <_dtoa_r+0x294>
 800511e:	2501      	movs	r5, #1
 8005120:	2300      	movs	r3, #0
 8005122:	9305      	str	r3, [sp, #20]
 8005124:	9508      	str	r5, [sp, #32]
 8005126:	f04f 39ff 	mov.w	r9, #4294967295
 800512a:	2200      	movs	r2, #0
 800512c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005130:	2312      	movs	r3, #18
 8005132:	9209      	str	r2, [sp, #36]	; 0x24
 8005134:	e7cf      	b.n	80050d6 <_dtoa_r+0x266>
 8005136:	2301      	movs	r3, #1
 8005138:	9308      	str	r3, [sp, #32]
 800513a:	e7f4      	b.n	8005126 <_dtoa_r+0x2b6>
 800513c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005140:	f8cd 9004 	str.w	r9, [sp, #4]
 8005144:	464b      	mov	r3, r9
 8005146:	e7c6      	b.n	80050d6 <_dtoa_r+0x266>
 8005148:	3101      	adds	r1, #1
 800514a:	6041      	str	r1, [r0, #4]
 800514c:	0052      	lsls	r2, r2, #1
 800514e:	e7c6      	b.n	80050de <_dtoa_r+0x26e>
 8005150:	636f4361 	.word	0x636f4361
 8005154:	3fd287a7 	.word	0x3fd287a7
 8005158:	8b60c8b3 	.word	0x8b60c8b3
 800515c:	3fc68a28 	.word	0x3fc68a28
 8005160:	509f79fb 	.word	0x509f79fb
 8005164:	3fd34413 	.word	0x3fd34413
 8005168:	08006ef5 	.word	0x08006ef5
 800516c:	08006f0c 	.word	0x08006f0c
 8005170:	7ff00000 	.word	0x7ff00000
 8005174:	08006ef1 	.word	0x08006ef1
 8005178:	08006ee8 	.word	0x08006ee8
 800517c:	08006ec5 	.word	0x08006ec5
 8005180:	3ff80000 	.word	0x3ff80000
 8005184:	08007008 	.word	0x08007008
 8005188:	08006f6b 	.word	0x08006f6b
 800518c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800518e:	9a00      	ldr	r2, [sp, #0]
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	9b01      	ldr	r3, [sp, #4]
 8005194:	2b0e      	cmp	r3, #14
 8005196:	f200 80ad 	bhi.w	80052f4 <_dtoa_r+0x484>
 800519a:	2d00      	cmp	r5, #0
 800519c:	f000 80aa 	beq.w	80052f4 <_dtoa_r+0x484>
 80051a0:	f1ba 0f00 	cmp.w	sl, #0
 80051a4:	dd36      	ble.n	8005214 <_dtoa_r+0x3a4>
 80051a6:	4ac3      	ldr	r2, [pc, #780]	; (80054b4 <_dtoa_r+0x644>)
 80051a8:	f00a 030f 	and.w	r3, sl, #15
 80051ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051b0:	ed93 7b00 	vldr	d7, [r3]
 80051b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80051b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80051bc:	eeb0 8a47 	vmov.f32	s16, s14
 80051c0:	eef0 8a67 	vmov.f32	s17, s15
 80051c4:	d016      	beq.n	80051f4 <_dtoa_r+0x384>
 80051c6:	4bbc      	ldr	r3, [pc, #752]	; (80054b8 <_dtoa_r+0x648>)
 80051c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051d0:	f7fb fb5c 	bl	800088c <__aeabi_ddiv>
 80051d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051d8:	f007 070f 	and.w	r7, r7, #15
 80051dc:	2503      	movs	r5, #3
 80051de:	4eb6      	ldr	r6, [pc, #728]	; (80054b8 <_dtoa_r+0x648>)
 80051e0:	b957      	cbnz	r7, 80051f8 <_dtoa_r+0x388>
 80051e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051e6:	ec53 2b18 	vmov	r2, r3, d8
 80051ea:	f7fb fb4f 	bl	800088c <__aeabi_ddiv>
 80051ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051f2:	e029      	b.n	8005248 <_dtoa_r+0x3d8>
 80051f4:	2502      	movs	r5, #2
 80051f6:	e7f2      	b.n	80051de <_dtoa_r+0x36e>
 80051f8:	07f9      	lsls	r1, r7, #31
 80051fa:	d508      	bpl.n	800520e <_dtoa_r+0x39e>
 80051fc:	ec51 0b18 	vmov	r0, r1, d8
 8005200:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005204:	f7fb fa18 	bl	8000638 <__aeabi_dmul>
 8005208:	ec41 0b18 	vmov	d8, r0, r1
 800520c:	3501      	adds	r5, #1
 800520e:	107f      	asrs	r7, r7, #1
 8005210:	3608      	adds	r6, #8
 8005212:	e7e5      	b.n	80051e0 <_dtoa_r+0x370>
 8005214:	f000 80a6 	beq.w	8005364 <_dtoa_r+0x4f4>
 8005218:	f1ca 0600 	rsb	r6, sl, #0
 800521c:	4ba5      	ldr	r3, [pc, #660]	; (80054b4 <_dtoa_r+0x644>)
 800521e:	4fa6      	ldr	r7, [pc, #664]	; (80054b8 <_dtoa_r+0x648>)
 8005220:	f006 020f 	and.w	r2, r6, #15
 8005224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005230:	f7fb fa02 	bl	8000638 <__aeabi_dmul>
 8005234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005238:	1136      	asrs	r6, r6, #4
 800523a:	2300      	movs	r3, #0
 800523c:	2502      	movs	r5, #2
 800523e:	2e00      	cmp	r6, #0
 8005240:	f040 8085 	bne.w	800534e <_dtoa_r+0x4de>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1d2      	bne.n	80051ee <_dtoa_r+0x37e>
 8005248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 808c 	beq.w	8005368 <_dtoa_r+0x4f8>
 8005250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005254:	4b99      	ldr	r3, [pc, #612]	; (80054bc <_dtoa_r+0x64c>)
 8005256:	2200      	movs	r2, #0
 8005258:	4630      	mov	r0, r6
 800525a:	4639      	mov	r1, r7
 800525c:	f7fb fc5e 	bl	8000b1c <__aeabi_dcmplt>
 8005260:	2800      	cmp	r0, #0
 8005262:	f000 8081 	beq.w	8005368 <_dtoa_r+0x4f8>
 8005266:	9b01      	ldr	r3, [sp, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d07d      	beq.n	8005368 <_dtoa_r+0x4f8>
 800526c:	f1b9 0f00 	cmp.w	r9, #0
 8005270:	dd3c      	ble.n	80052ec <_dtoa_r+0x47c>
 8005272:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005276:	9307      	str	r3, [sp, #28]
 8005278:	2200      	movs	r2, #0
 800527a:	4b91      	ldr	r3, [pc, #580]	; (80054c0 <_dtoa_r+0x650>)
 800527c:	4630      	mov	r0, r6
 800527e:	4639      	mov	r1, r7
 8005280:	f7fb f9da 	bl	8000638 <__aeabi_dmul>
 8005284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005288:	3501      	adds	r5, #1
 800528a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800528e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005292:	4628      	mov	r0, r5
 8005294:	f7fb f966 	bl	8000564 <__aeabi_i2d>
 8005298:	4632      	mov	r2, r6
 800529a:	463b      	mov	r3, r7
 800529c:	f7fb f9cc 	bl	8000638 <__aeabi_dmul>
 80052a0:	4b88      	ldr	r3, [pc, #544]	; (80054c4 <_dtoa_r+0x654>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	f7fb f812 	bl	80002cc <__adddf3>
 80052a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80052ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052b0:	9303      	str	r3, [sp, #12]
 80052b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d15c      	bne.n	8005372 <_dtoa_r+0x502>
 80052b8:	4b83      	ldr	r3, [pc, #524]	; (80054c8 <_dtoa_r+0x658>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	f7fb f802 	bl	80002c8 <__aeabi_dsub>
 80052c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	f7fb fc44 	bl	8000b58 <__aeabi_dcmpgt>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f040 8296 	bne.w	8005802 <_dtoa_r+0x992>
 80052d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80052da:	4630      	mov	r0, r6
 80052dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052e0:	4639      	mov	r1, r7
 80052e2:	f7fb fc1b 	bl	8000b1c <__aeabi_dcmplt>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f040 8288 	bne.w	80057fc <_dtoa_r+0x98c>
 80052ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f2c0 8158 	blt.w	80055ac <_dtoa_r+0x73c>
 80052fc:	f1ba 0f0e 	cmp.w	sl, #14
 8005300:	f300 8154 	bgt.w	80055ac <_dtoa_r+0x73c>
 8005304:	4b6b      	ldr	r3, [pc, #428]	; (80054b4 <_dtoa_r+0x644>)
 8005306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800530a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800530e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	f280 80e3 	bge.w	80054dc <_dtoa_r+0x66c>
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f300 80df 	bgt.w	80054dc <_dtoa_r+0x66c>
 800531e:	f040 826d 	bne.w	80057fc <_dtoa_r+0x98c>
 8005322:	4b69      	ldr	r3, [pc, #420]	; (80054c8 <_dtoa_r+0x658>)
 8005324:	2200      	movs	r2, #0
 8005326:	4640      	mov	r0, r8
 8005328:	4649      	mov	r1, r9
 800532a:	f7fb f985 	bl	8000638 <__aeabi_dmul>
 800532e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005332:	f7fb fc07 	bl	8000b44 <__aeabi_dcmpge>
 8005336:	9e01      	ldr	r6, [sp, #4]
 8005338:	4637      	mov	r7, r6
 800533a:	2800      	cmp	r0, #0
 800533c:	f040 8243 	bne.w	80057c6 <_dtoa_r+0x956>
 8005340:	9d00      	ldr	r5, [sp, #0]
 8005342:	2331      	movs	r3, #49	; 0x31
 8005344:	f805 3b01 	strb.w	r3, [r5], #1
 8005348:	f10a 0a01 	add.w	sl, sl, #1
 800534c:	e23f      	b.n	80057ce <_dtoa_r+0x95e>
 800534e:	07f2      	lsls	r2, r6, #31
 8005350:	d505      	bpl.n	800535e <_dtoa_r+0x4ee>
 8005352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005356:	f7fb f96f 	bl	8000638 <__aeabi_dmul>
 800535a:	3501      	adds	r5, #1
 800535c:	2301      	movs	r3, #1
 800535e:	1076      	asrs	r6, r6, #1
 8005360:	3708      	adds	r7, #8
 8005362:	e76c      	b.n	800523e <_dtoa_r+0x3ce>
 8005364:	2502      	movs	r5, #2
 8005366:	e76f      	b.n	8005248 <_dtoa_r+0x3d8>
 8005368:	9b01      	ldr	r3, [sp, #4]
 800536a:	f8cd a01c 	str.w	sl, [sp, #28]
 800536e:	930c      	str	r3, [sp, #48]	; 0x30
 8005370:	e78d      	b.n	800528e <_dtoa_r+0x41e>
 8005372:	9900      	ldr	r1, [sp, #0]
 8005374:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005378:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <_dtoa_r+0x644>)
 800537a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800537e:	4401      	add	r1, r0
 8005380:	9102      	str	r1, [sp, #8]
 8005382:	9908      	ldr	r1, [sp, #32]
 8005384:	eeb0 8a47 	vmov.f32	s16, s14
 8005388:	eef0 8a67 	vmov.f32	s17, s15
 800538c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005394:	2900      	cmp	r1, #0
 8005396:	d045      	beq.n	8005424 <_dtoa_r+0x5b4>
 8005398:	494c      	ldr	r1, [pc, #304]	; (80054cc <_dtoa_r+0x65c>)
 800539a:	2000      	movs	r0, #0
 800539c:	f7fb fa76 	bl	800088c <__aeabi_ddiv>
 80053a0:	ec53 2b18 	vmov	r2, r3, d8
 80053a4:	f7fa ff90 	bl	80002c8 <__aeabi_dsub>
 80053a8:	9d00      	ldr	r5, [sp, #0]
 80053aa:	ec41 0b18 	vmov	d8, r0, r1
 80053ae:	4639      	mov	r1, r7
 80053b0:	4630      	mov	r0, r6
 80053b2:	f7fb fbf1 	bl	8000b98 <__aeabi_d2iz>
 80053b6:	900c      	str	r0, [sp, #48]	; 0x30
 80053b8:	f7fb f8d4 	bl	8000564 <__aeabi_i2d>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4630      	mov	r0, r6
 80053c2:	4639      	mov	r1, r7
 80053c4:	f7fa ff80 	bl	80002c8 <__aeabi_dsub>
 80053c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053ca:	3330      	adds	r3, #48	; 0x30
 80053cc:	f805 3b01 	strb.w	r3, [r5], #1
 80053d0:	ec53 2b18 	vmov	r2, r3, d8
 80053d4:	4606      	mov	r6, r0
 80053d6:	460f      	mov	r7, r1
 80053d8:	f7fb fba0 	bl	8000b1c <__aeabi_dcmplt>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d165      	bne.n	80054ac <_dtoa_r+0x63c>
 80053e0:	4632      	mov	r2, r6
 80053e2:	463b      	mov	r3, r7
 80053e4:	4935      	ldr	r1, [pc, #212]	; (80054bc <_dtoa_r+0x64c>)
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7fa ff6e 	bl	80002c8 <__aeabi_dsub>
 80053ec:	ec53 2b18 	vmov	r2, r3, d8
 80053f0:	f7fb fb94 	bl	8000b1c <__aeabi_dcmplt>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f040 80b9 	bne.w	800556c <_dtoa_r+0x6fc>
 80053fa:	9b02      	ldr	r3, [sp, #8]
 80053fc:	429d      	cmp	r5, r3
 80053fe:	f43f af75 	beq.w	80052ec <_dtoa_r+0x47c>
 8005402:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <_dtoa_r+0x650>)
 8005404:	ec51 0b18 	vmov	r0, r1, d8
 8005408:	2200      	movs	r2, #0
 800540a:	f7fb f915 	bl	8000638 <__aeabi_dmul>
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <_dtoa_r+0x650>)
 8005410:	ec41 0b18 	vmov	d8, r0, r1
 8005414:	2200      	movs	r2, #0
 8005416:	4630      	mov	r0, r6
 8005418:	4639      	mov	r1, r7
 800541a:	f7fb f90d 	bl	8000638 <__aeabi_dmul>
 800541e:	4606      	mov	r6, r0
 8005420:	460f      	mov	r7, r1
 8005422:	e7c4      	b.n	80053ae <_dtoa_r+0x53e>
 8005424:	ec51 0b17 	vmov	r0, r1, d7
 8005428:	f7fb f906 	bl	8000638 <__aeabi_dmul>
 800542c:	9b02      	ldr	r3, [sp, #8]
 800542e:	9d00      	ldr	r5, [sp, #0]
 8005430:	930c      	str	r3, [sp, #48]	; 0x30
 8005432:	ec41 0b18 	vmov	d8, r0, r1
 8005436:	4639      	mov	r1, r7
 8005438:	4630      	mov	r0, r6
 800543a:	f7fb fbad 	bl	8000b98 <__aeabi_d2iz>
 800543e:	9011      	str	r0, [sp, #68]	; 0x44
 8005440:	f7fb f890 	bl	8000564 <__aeabi_i2d>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4630      	mov	r0, r6
 800544a:	4639      	mov	r1, r7
 800544c:	f7fa ff3c 	bl	80002c8 <__aeabi_dsub>
 8005450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005452:	3330      	adds	r3, #48	; 0x30
 8005454:	f805 3b01 	strb.w	r3, [r5], #1
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	429d      	cmp	r5, r3
 800545c:	4606      	mov	r6, r0
 800545e:	460f      	mov	r7, r1
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	d134      	bne.n	80054d0 <_dtoa_r+0x660>
 8005466:	4b19      	ldr	r3, [pc, #100]	; (80054cc <_dtoa_r+0x65c>)
 8005468:	ec51 0b18 	vmov	r0, r1, d8
 800546c:	f7fa ff2e 	bl	80002cc <__adddf3>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4630      	mov	r0, r6
 8005476:	4639      	mov	r1, r7
 8005478:	f7fb fb6e 	bl	8000b58 <__aeabi_dcmpgt>
 800547c:	2800      	cmp	r0, #0
 800547e:	d175      	bne.n	800556c <_dtoa_r+0x6fc>
 8005480:	ec53 2b18 	vmov	r2, r3, d8
 8005484:	4911      	ldr	r1, [pc, #68]	; (80054cc <_dtoa_r+0x65c>)
 8005486:	2000      	movs	r0, #0
 8005488:	f7fa ff1e 	bl	80002c8 <__aeabi_dsub>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4630      	mov	r0, r6
 8005492:	4639      	mov	r1, r7
 8005494:	f7fb fb42 	bl	8000b1c <__aeabi_dcmplt>
 8005498:	2800      	cmp	r0, #0
 800549a:	f43f af27 	beq.w	80052ec <_dtoa_r+0x47c>
 800549e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054a0:	1e6b      	subs	r3, r5, #1
 80054a2:	930c      	str	r3, [sp, #48]	; 0x30
 80054a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054a8:	2b30      	cmp	r3, #48	; 0x30
 80054aa:	d0f8      	beq.n	800549e <_dtoa_r+0x62e>
 80054ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80054b0:	e04a      	b.n	8005548 <_dtoa_r+0x6d8>
 80054b2:	bf00      	nop
 80054b4:	08007008 	.word	0x08007008
 80054b8:	08006fe0 	.word	0x08006fe0
 80054bc:	3ff00000 	.word	0x3ff00000
 80054c0:	40240000 	.word	0x40240000
 80054c4:	401c0000 	.word	0x401c0000
 80054c8:	40140000 	.word	0x40140000
 80054cc:	3fe00000 	.word	0x3fe00000
 80054d0:	4baf      	ldr	r3, [pc, #700]	; (8005790 <_dtoa_r+0x920>)
 80054d2:	f7fb f8b1 	bl	8000638 <__aeabi_dmul>
 80054d6:	4606      	mov	r6, r0
 80054d8:	460f      	mov	r7, r1
 80054da:	e7ac      	b.n	8005436 <_dtoa_r+0x5c6>
 80054dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054e0:	9d00      	ldr	r5, [sp, #0]
 80054e2:	4642      	mov	r2, r8
 80054e4:	464b      	mov	r3, r9
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fb f9cf 	bl	800088c <__aeabi_ddiv>
 80054ee:	f7fb fb53 	bl	8000b98 <__aeabi_d2iz>
 80054f2:	9002      	str	r0, [sp, #8]
 80054f4:	f7fb f836 	bl	8000564 <__aeabi_i2d>
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	f7fb f89c 	bl	8000638 <__aeabi_dmul>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4630      	mov	r0, r6
 8005506:	4639      	mov	r1, r7
 8005508:	f7fa fede 	bl	80002c8 <__aeabi_dsub>
 800550c:	9e02      	ldr	r6, [sp, #8]
 800550e:	9f01      	ldr	r7, [sp, #4]
 8005510:	3630      	adds	r6, #48	; 0x30
 8005512:	f805 6b01 	strb.w	r6, [r5], #1
 8005516:	9e00      	ldr	r6, [sp, #0]
 8005518:	1bae      	subs	r6, r5, r6
 800551a:	42b7      	cmp	r7, r6
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	d137      	bne.n	8005592 <_dtoa_r+0x722>
 8005522:	f7fa fed3 	bl	80002cc <__adddf3>
 8005526:	4642      	mov	r2, r8
 8005528:	464b      	mov	r3, r9
 800552a:	4606      	mov	r6, r0
 800552c:	460f      	mov	r7, r1
 800552e:	f7fb fb13 	bl	8000b58 <__aeabi_dcmpgt>
 8005532:	b9c8      	cbnz	r0, 8005568 <_dtoa_r+0x6f8>
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fb fae4 	bl	8000b08 <__aeabi_dcmpeq>
 8005540:	b110      	cbz	r0, 8005548 <_dtoa_r+0x6d8>
 8005542:	9b02      	ldr	r3, [sp, #8]
 8005544:	07d9      	lsls	r1, r3, #31
 8005546:	d40f      	bmi.n	8005568 <_dtoa_r+0x6f8>
 8005548:	4620      	mov	r0, r4
 800554a:	4659      	mov	r1, fp
 800554c:	f000 fad6 	bl	8005afc <_Bfree>
 8005550:	2300      	movs	r3, #0
 8005552:	702b      	strb	r3, [r5, #0]
 8005554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005556:	f10a 0001 	add.w	r0, sl, #1
 800555a:	6018      	str	r0, [r3, #0]
 800555c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800555e:	2b00      	cmp	r3, #0
 8005560:	f43f acd8 	beq.w	8004f14 <_dtoa_r+0xa4>
 8005564:	601d      	str	r5, [r3, #0]
 8005566:	e4d5      	b.n	8004f14 <_dtoa_r+0xa4>
 8005568:	f8cd a01c 	str.w	sl, [sp, #28]
 800556c:	462b      	mov	r3, r5
 800556e:	461d      	mov	r5, r3
 8005570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005574:	2a39      	cmp	r2, #57	; 0x39
 8005576:	d108      	bne.n	800558a <_dtoa_r+0x71a>
 8005578:	9a00      	ldr	r2, [sp, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d1f7      	bne.n	800556e <_dtoa_r+0x6fe>
 800557e:	9a07      	ldr	r2, [sp, #28]
 8005580:	9900      	ldr	r1, [sp, #0]
 8005582:	3201      	adds	r2, #1
 8005584:	9207      	str	r2, [sp, #28]
 8005586:	2230      	movs	r2, #48	; 0x30
 8005588:	700a      	strb	r2, [r1, #0]
 800558a:	781a      	ldrb	r2, [r3, #0]
 800558c:	3201      	adds	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e78c      	b.n	80054ac <_dtoa_r+0x63c>
 8005592:	4b7f      	ldr	r3, [pc, #508]	; (8005790 <_dtoa_r+0x920>)
 8005594:	2200      	movs	r2, #0
 8005596:	f7fb f84f 	bl	8000638 <__aeabi_dmul>
 800559a:	2200      	movs	r2, #0
 800559c:	2300      	movs	r3, #0
 800559e:	4606      	mov	r6, r0
 80055a0:	460f      	mov	r7, r1
 80055a2:	f7fb fab1 	bl	8000b08 <__aeabi_dcmpeq>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d09b      	beq.n	80054e2 <_dtoa_r+0x672>
 80055aa:	e7cd      	b.n	8005548 <_dtoa_r+0x6d8>
 80055ac:	9a08      	ldr	r2, [sp, #32]
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	f000 80c4 	beq.w	800573c <_dtoa_r+0x8cc>
 80055b4:	9a05      	ldr	r2, [sp, #20]
 80055b6:	2a01      	cmp	r2, #1
 80055b8:	f300 80a8 	bgt.w	800570c <_dtoa_r+0x89c>
 80055bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055be:	2a00      	cmp	r2, #0
 80055c0:	f000 80a0 	beq.w	8005704 <_dtoa_r+0x894>
 80055c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055c8:	9e06      	ldr	r6, [sp, #24]
 80055ca:	4645      	mov	r5, r8
 80055cc:	9a04      	ldr	r2, [sp, #16]
 80055ce:	2101      	movs	r1, #1
 80055d0:	441a      	add	r2, r3
 80055d2:	4620      	mov	r0, r4
 80055d4:	4498      	add	r8, r3
 80055d6:	9204      	str	r2, [sp, #16]
 80055d8:	f000 fb4c 	bl	8005c74 <__i2b>
 80055dc:	4607      	mov	r7, r0
 80055de:	2d00      	cmp	r5, #0
 80055e0:	dd0b      	ble.n	80055fa <_dtoa_r+0x78a>
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dd08      	ble.n	80055fa <_dtoa_r+0x78a>
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	9a04      	ldr	r2, [sp, #16]
 80055ec:	bfa8      	it	ge
 80055ee:	462b      	movge	r3, r5
 80055f0:	eba8 0803 	sub.w	r8, r8, r3
 80055f4:	1aed      	subs	r5, r5, r3
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	9304      	str	r3, [sp, #16]
 80055fa:	9b06      	ldr	r3, [sp, #24]
 80055fc:	b1fb      	cbz	r3, 800563e <_dtoa_r+0x7ce>
 80055fe:	9b08      	ldr	r3, [sp, #32]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 809f 	beq.w	8005744 <_dtoa_r+0x8d4>
 8005606:	2e00      	cmp	r6, #0
 8005608:	dd11      	ble.n	800562e <_dtoa_r+0x7be>
 800560a:	4639      	mov	r1, r7
 800560c:	4632      	mov	r2, r6
 800560e:	4620      	mov	r0, r4
 8005610:	f000 fbec 	bl	8005dec <__pow5mult>
 8005614:	465a      	mov	r2, fp
 8005616:	4601      	mov	r1, r0
 8005618:	4607      	mov	r7, r0
 800561a:	4620      	mov	r0, r4
 800561c:	f000 fb40 	bl	8005ca0 <__multiply>
 8005620:	4659      	mov	r1, fp
 8005622:	9007      	str	r0, [sp, #28]
 8005624:	4620      	mov	r0, r4
 8005626:	f000 fa69 	bl	8005afc <_Bfree>
 800562a:	9b07      	ldr	r3, [sp, #28]
 800562c:	469b      	mov	fp, r3
 800562e:	9b06      	ldr	r3, [sp, #24]
 8005630:	1b9a      	subs	r2, r3, r6
 8005632:	d004      	beq.n	800563e <_dtoa_r+0x7ce>
 8005634:	4659      	mov	r1, fp
 8005636:	4620      	mov	r0, r4
 8005638:	f000 fbd8 	bl	8005dec <__pow5mult>
 800563c:	4683      	mov	fp, r0
 800563e:	2101      	movs	r1, #1
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fb17 	bl	8005c74 <__i2b>
 8005646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005648:	2b00      	cmp	r3, #0
 800564a:	4606      	mov	r6, r0
 800564c:	dd7c      	ble.n	8005748 <_dtoa_r+0x8d8>
 800564e:	461a      	mov	r2, r3
 8005650:	4601      	mov	r1, r0
 8005652:	4620      	mov	r0, r4
 8005654:	f000 fbca 	bl	8005dec <__pow5mult>
 8005658:	9b05      	ldr	r3, [sp, #20]
 800565a:	2b01      	cmp	r3, #1
 800565c:	4606      	mov	r6, r0
 800565e:	dd76      	ble.n	800574e <_dtoa_r+0x8de>
 8005660:	2300      	movs	r3, #0
 8005662:	9306      	str	r3, [sp, #24]
 8005664:	6933      	ldr	r3, [r6, #16]
 8005666:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800566a:	6918      	ldr	r0, [r3, #16]
 800566c:	f000 fab2 	bl	8005bd4 <__hi0bits>
 8005670:	f1c0 0020 	rsb	r0, r0, #32
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	4418      	add	r0, r3
 8005678:	f010 001f 	ands.w	r0, r0, #31
 800567c:	f000 8086 	beq.w	800578c <_dtoa_r+0x91c>
 8005680:	f1c0 0320 	rsb	r3, r0, #32
 8005684:	2b04      	cmp	r3, #4
 8005686:	dd7f      	ble.n	8005788 <_dtoa_r+0x918>
 8005688:	f1c0 001c 	rsb	r0, r0, #28
 800568c:	9b04      	ldr	r3, [sp, #16]
 800568e:	4403      	add	r3, r0
 8005690:	4480      	add	r8, r0
 8005692:	4405      	add	r5, r0
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	f1b8 0f00 	cmp.w	r8, #0
 800569a:	dd05      	ble.n	80056a8 <_dtoa_r+0x838>
 800569c:	4659      	mov	r1, fp
 800569e:	4642      	mov	r2, r8
 80056a0:	4620      	mov	r0, r4
 80056a2:	f000 fbfd 	bl	8005ea0 <__lshift>
 80056a6:	4683      	mov	fp, r0
 80056a8:	9b04      	ldr	r3, [sp, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	dd05      	ble.n	80056ba <_dtoa_r+0x84a>
 80056ae:	4631      	mov	r1, r6
 80056b0:	461a      	mov	r2, r3
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 fbf4 	bl	8005ea0 <__lshift>
 80056b8:	4606      	mov	r6, r0
 80056ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d069      	beq.n	8005794 <_dtoa_r+0x924>
 80056c0:	4631      	mov	r1, r6
 80056c2:	4658      	mov	r0, fp
 80056c4:	f000 fc58 	bl	8005f78 <__mcmp>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	da63      	bge.n	8005794 <_dtoa_r+0x924>
 80056cc:	2300      	movs	r3, #0
 80056ce:	4659      	mov	r1, fp
 80056d0:	220a      	movs	r2, #10
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 fa34 	bl	8005b40 <__multadd>
 80056d8:	9b08      	ldr	r3, [sp, #32]
 80056da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056de:	4683      	mov	fp, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 818f 	beq.w	8005a04 <_dtoa_r+0xb94>
 80056e6:	4639      	mov	r1, r7
 80056e8:	2300      	movs	r3, #0
 80056ea:	220a      	movs	r2, #10
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fa27 	bl	8005b40 <__multadd>
 80056f2:	f1b9 0f00 	cmp.w	r9, #0
 80056f6:	4607      	mov	r7, r0
 80056f8:	f300 808e 	bgt.w	8005818 <_dtoa_r+0x9a8>
 80056fc:	9b05      	ldr	r3, [sp, #20]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	dc50      	bgt.n	80057a4 <_dtoa_r+0x934>
 8005702:	e089      	b.n	8005818 <_dtoa_r+0x9a8>
 8005704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800570a:	e75d      	b.n	80055c8 <_dtoa_r+0x758>
 800570c:	9b01      	ldr	r3, [sp, #4]
 800570e:	1e5e      	subs	r6, r3, #1
 8005710:	9b06      	ldr	r3, [sp, #24]
 8005712:	42b3      	cmp	r3, r6
 8005714:	bfbf      	itttt	lt
 8005716:	9b06      	ldrlt	r3, [sp, #24]
 8005718:	9606      	strlt	r6, [sp, #24]
 800571a:	1af2      	sublt	r2, r6, r3
 800571c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800571e:	bfb6      	itet	lt
 8005720:	189b      	addlt	r3, r3, r2
 8005722:	1b9e      	subge	r6, r3, r6
 8005724:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005726:	9b01      	ldr	r3, [sp, #4]
 8005728:	bfb8      	it	lt
 800572a:	2600      	movlt	r6, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	bfb5      	itete	lt
 8005730:	eba8 0503 	sublt.w	r5, r8, r3
 8005734:	9b01      	ldrge	r3, [sp, #4]
 8005736:	2300      	movlt	r3, #0
 8005738:	4645      	movge	r5, r8
 800573a:	e747      	b.n	80055cc <_dtoa_r+0x75c>
 800573c:	9e06      	ldr	r6, [sp, #24]
 800573e:	9f08      	ldr	r7, [sp, #32]
 8005740:	4645      	mov	r5, r8
 8005742:	e74c      	b.n	80055de <_dtoa_r+0x76e>
 8005744:	9a06      	ldr	r2, [sp, #24]
 8005746:	e775      	b.n	8005634 <_dtoa_r+0x7c4>
 8005748:	9b05      	ldr	r3, [sp, #20]
 800574a:	2b01      	cmp	r3, #1
 800574c:	dc18      	bgt.n	8005780 <_dtoa_r+0x910>
 800574e:	9b02      	ldr	r3, [sp, #8]
 8005750:	b9b3      	cbnz	r3, 8005780 <_dtoa_r+0x910>
 8005752:	9b03      	ldr	r3, [sp, #12]
 8005754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005758:	b9a3      	cbnz	r3, 8005784 <_dtoa_r+0x914>
 800575a:	9b03      	ldr	r3, [sp, #12]
 800575c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005760:	0d1b      	lsrs	r3, r3, #20
 8005762:	051b      	lsls	r3, r3, #20
 8005764:	b12b      	cbz	r3, 8005772 <_dtoa_r+0x902>
 8005766:	9b04      	ldr	r3, [sp, #16]
 8005768:	3301      	adds	r3, #1
 800576a:	9304      	str	r3, [sp, #16]
 800576c:	f108 0801 	add.w	r8, r8, #1
 8005770:	2301      	movs	r3, #1
 8005772:	9306      	str	r3, [sp, #24]
 8005774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005776:	2b00      	cmp	r3, #0
 8005778:	f47f af74 	bne.w	8005664 <_dtoa_r+0x7f4>
 800577c:	2001      	movs	r0, #1
 800577e:	e779      	b.n	8005674 <_dtoa_r+0x804>
 8005780:	2300      	movs	r3, #0
 8005782:	e7f6      	b.n	8005772 <_dtoa_r+0x902>
 8005784:	9b02      	ldr	r3, [sp, #8]
 8005786:	e7f4      	b.n	8005772 <_dtoa_r+0x902>
 8005788:	d085      	beq.n	8005696 <_dtoa_r+0x826>
 800578a:	4618      	mov	r0, r3
 800578c:	301c      	adds	r0, #28
 800578e:	e77d      	b.n	800568c <_dtoa_r+0x81c>
 8005790:	40240000 	.word	0x40240000
 8005794:	9b01      	ldr	r3, [sp, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	dc38      	bgt.n	800580c <_dtoa_r+0x99c>
 800579a:	9b05      	ldr	r3, [sp, #20]
 800579c:	2b02      	cmp	r3, #2
 800579e:	dd35      	ble.n	800580c <_dtoa_r+0x99c>
 80057a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80057a4:	f1b9 0f00 	cmp.w	r9, #0
 80057a8:	d10d      	bne.n	80057c6 <_dtoa_r+0x956>
 80057aa:	4631      	mov	r1, r6
 80057ac:	464b      	mov	r3, r9
 80057ae:	2205      	movs	r2, #5
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 f9c5 	bl	8005b40 <__multadd>
 80057b6:	4601      	mov	r1, r0
 80057b8:	4606      	mov	r6, r0
 80057ba:	4658      	mov	r0, fp
 80057bc:	f000 fbdc 	bl	8005f78 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f73f adbd 	bgt.w	8005340 <_dtoa_r+0x4d0>
 80057c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c8:	9d00      	ldr	r5, [sp, #0]
 80057ca:	ea6f 0a03 	mvn.w	sl, r3
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	4631      	mov	r1, r6
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 f991 	bl	8005afc <_Bfree>
 80057da:	2f00      	cmp	r7, #0
 80057dc:	f43f aeb4 	beq.w	8005548 <_dtoa_r+0x6d8>
 80057e0:	f1b8 0f00 	cmp.w	r8, #0
 80057e4:	d005      	beq.n	80057f2 <_dtoa_r+0x982>
 80057e6:	45b8      	cmp	r8, r7
 80057e8:	d003      	beq.n	80057f2 <_dtoa_r+0x982>
 80057ea:	4641      	mov	r1, r8
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 f985 	bl	8005afc <_Bfree>
 80057f2:	4639      	mov	r1, r7
 80057f4:	4620      	mov	r0, r4
 80057f6:	f000 f981 	bl	8005afc <_Bfree>
 80057fa:	e6a5      	b.n	8005548 <_dtoa_r+0x6d8>
 80057fc:	2600      	movs	r6, #0
 80057fe:	4637      	mov	r7, r6
 8005800:	e7e1      	b.n	80057c6 <_dtoa_r+0x956>
 8005802:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005804:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005808:	4637      	mov	r7, r6
 800580a:	e599      	b.n	8005340 <_dtoa_r+0x4d0>
 800580c:	9b08      	ldr	r3, [sp, #32]
 800580e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 80fd 	beq.w	8005a12 <_dtoa_r+0xba2>
 8005818:	2d00      	cmp	r5, #0
 800581a:	dd05      	ble.n	8005828 <_dtoa_r+0x9b8>
 800581c:	4639      	mov	r1, r7
 800581e:	462a      	mov	r2, r5
 8005820:	4620      	mov	r0, r4
 8005822:	f000 fb3d 	bl	8005ea0 <__lshift>
 8005826:	4607      	mov	r7, r0
 8005828:	9b06      	ldr	r3, [sp, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d05c      	beq.n	80058e8 <_dtoa_r+0xa78>
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4620      	mov	r0, r4
 8005832:	f000 f923 	bl	8005a7c <_Balloc>
 8005836:	4605      	mov	r5, r0
 8005838:	b928      	cbnz	r0, 8005846 <_dtoa_r+0x9d6>
 800583a:	4b80      	ldr	r3, [pc, #512]	; (8005a3c <_dtoa_r+0xbcc>)
 800583c:	4602      	mov	r2, r0
 800583e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005842:	f7ff bb2e 	b.w	8004ea2 <_dtoa_r+0x32>
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	3202      	adds	r2, #2
 800584a:	0092      	lsls	r2, r2, #2
 800584c:	f107 010c 	add.w	r1, r7, #12
 8005850:	300c      	adds	r0, #12
 8005852:	f000 f905 	bl	8005a60 <memcpy>
 8005856:	2201      	movs	r2, #1
 8005858:	4629      	mov	r1, r5
 800585a:	4620      	mov	r0, r4
 800585c:	f000 fb20 	bl	8005ea0 <__lshift>
 8005860:	9b00      	ldr	r3, [sp, #0]
 8005862:	3301      	adds	r3, #1
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	9b00      	ldr	r3, [sp, #0]
 8005868:	444b      	add	r3, r9
 800586a:	9307      	str	r3, [sp, #28]
 800586c:	9b02      	ldr	r3, [sp, #8]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	46b8      	mov	r8, r7
 8005874:	9306      	str	r3, [sp, #24]
 8005876:	4607      	mov	r7, r0
 8005878:	9b01      	ldr	r3, [sp, #4]
 800587a:	4631      	mov	r1, r6
 800587c:	3b01      	subs	r3, #1
 800587e:	4658      	mov	r0, fp
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	f7ff fa69 	bl	8004d58 <quorem>
 8005886:	4603      	mov	r3, r0
 8005888:	3330      	adds	r3, #48	; 0x30
 800588a:	9004      	str	r0, [sp, #16]
 800588c:	4641      	mov	r1, r8
 800588e:	4658      	mov	r0, fp
 8005890:	9308      	str	r3, [sp, #32]
 8005892:	f000 fb71 	bl	8005f78 <__mcmp>
 8005896:	463a      	mov	r2, r7
 8005898:	4681      	mov	r9, r0
 800589a:	4631      	mov	r1, r6
 800589c:	4620      	mov	r0, r4
 800589e:	f000 fb87 	bl	8005fb0 <__mdiff>
 80058a2:	68c2      	ldr	r2, [r0, #12]
 80058a4:	9b08      	ldr	r3, [sp, #32]
 80058a6:	4605      	mov	r5, r0
 80058a8:	bb02      	cbnz	r2, 80058ec <_dtoa_r+0xa7c>
 80058aa:	4601      	mov	r1, r0
 80058ac:	4658      	mov	r0, fp
 80058ae:	f000 fb63 	bl	8005f78 <__mcmp>
 80058b2:	9b08      	ldr	r3, [sp, #32]
 80058b4:	4602      	mov	r2, r0
 80058b6:	4629      	mov	r1, r5
 80058b8:	4620      	mov	r0, r4
 80058ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80058be:	f000 f91d 	bl	8005afc <_Bfree>
 80058c2:	9b05      	ldr	r3, [sp, #20]
 80058c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c6:	9d01      	ldr	r5, [sp, #4]
 80058c8:	ea43 0102 	orr.w	r1, r3, r2
 80058cc:	9b06      	ldr	r3, [sp, #24]
 80058ce:	430b      	orrs	r3, r1
 80058d0:	9b08      	ldr	r3, [sp, #32]
 80058d2:	d10d      	bne.n	80058f0 <_dtoa_r+0xa80>
 80058d4:	2b39      	cmp	r3, #57	; 0x39
 80058d6:	d029      	beq.n	800592c <_dtoa_r+0xabc>
 80058d8:	f1b9 0f00 	cmp.w	r9, #0
 80058dc:	dd01      	ble.n	80058e2 <_dtoa_r+0xa72>
 80058de:	9b04      	ldr	r3, [sp, #16]
 80058e0:	3331      	adds	r3, #49	; 0x31
 80058e2:	9a02      	ldr	r2, [sp, #8]
 80058e4:	7013      	strb	r3, [r2, #0]
 80058e6:	e774      	b.n	80057d2 <_dtoa_r+0x962>
 80058e8:	4638      	mov	r0, r7
 80058ea:	e7b9      	b.n	8005860 <_dtoa_r+0x9f0>
 80058ec:	2201      	movs	r2, #1
 80058ee:	e7e2      	b.n	80058b6 <_dtoa_r+0xa46>
 80058f0:	f1b9 0f00 	cmp.w	r9, #0
 80058f4:	db06      	blt.n	8005904 <_dtoa_r+0xa94>
 80058f6:	9905      	ldr	r1, [sp, #20]
 80058f8:	ea41 0909 	orr.w	r9, r1, r9
 80058fc:	9906      	ldr	r1, [sp, #24]
 80058fe:	ea59 0101 	orrs.w	r1, r9, r1
 8005902:	d120      	bne.n	8005946 <_dtoa_r+0xad6>
 8005904:	2a00      	cmp	r2, #0
 8005906:	ddec      	ble.n	80058e2 <_dtoa_r+0xa72>
 8005908:	4659      	mov	r1, fp
 800590a:	2201      	movs	r2, #1
 800590c:	4620      	mov	r0, r4
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	f000 fac6 	bl	8005ea0 <__lshift>
 8005914:	4631      	mov	r1, r6
 8005916:	4683      	mov	fp, r0
 8005918:	f000 fb2e 	bl	8005f78 <__mcmp>
 800591c:	2800      	cmp	r0, #0
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	dc02      	bgt.n	8005928 <_dtoa_r+0xab8>
 8005922:	d1de      	bne.n	80058e2 <_dtoa_r+0xa72>
 8005924:	07da      	lsls	r2, r3, #31
 8005926:	d5dc      	bpl.n	80058e2 <_dtoa_r+0xa72>
 8005928:	2b39      	cmp	r3, #57	; 0x39
 800592a:	d1d8      	bne.n	80058de <_dtoa_r+0xa6e>
 800592c:	9a02      	ldr	r2, [sp, #8]
 800592e:	2339      	movs	r3, #57	; 0x39
 8005930:	7013      	strb	r3, [r2, #0]
 8005932:	462b      	mov	r3, r5
 8005934:	461d      	mov	r5, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800593c:	2a39      	cmp	r2, #57	; 0x39
 800593e:	d050      	beq.n	80059e2 <_dtoa_r+0xb72>
 8005940:	3201      	adds	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e745      	b.n	80057d2 <_dtoa_r+0x962>
 8005946:	2a00      	cmp	r2, #0
 8005948:	dd03      	ble.n	8005952 <_dtoa_r+0xae2>
 800594a:	2b39      	cmp	r3, #57	; 0x39
 800594c:	d0ee      	beq.n	800592c <_dtoa_r+0xabc>
 800594e:	3301      	adds	r3, #1
 8005950:	e7c7      	b.n	80058e2 <_dtoa_r+0xa72>
 8005952:	9a01      	ldr	r2, [sp, #4]
 8005954:	9907      	ldr	r1, [sp, #28]
 8005956:	f802 3c01 	strb.w	r3, [r2, #-1]
 800595a:	428a      	cmp	r2, r1
 800595c:	d02a      	beq.n	80059b4 <_dtoa_r+0xb44>
 800595e:	4659      	mov	r1, fp
 8005960:	2300      	movs	r3, #0
 8005962:	220a      	movs	r2, #10
 8005964:	4620      	mov	r0, r4
 8005966:	f000 f8eb 	bl	8005b40 <__multadd>
 800596a:	45b8      	cmp	r8, r7
 800596c:	4683      	mov	fp, r0
 800596e:	f04f 0300 	mov.w	r3, #0
 8005972:	f04f 020a 	mov.w	r2, #10
 8005976:	4641      	mov	r1, r8
 8005978:	4620      	mov	r0, r4
 800597a:	d107      	bne.n	800598c <_dtoa_r+0xb1c>
 800597c:	f000 f8e0 	bl	8005b40 <__multadd>
 8005980:	4680      	mov	r8, r0
 8005982:	4607      	mov	r7, r0
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	3301      	adds	r3, #1
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	e775      	b.n	8005878 <_dtoa_r+0xa08>
 800598c:	f000 f8d8 	bl	8005b40 <__multadd>
 8005990:	4639      	mov	r1, r7
 8005992:	4680      	mov	r8, r0
 8005994:	2300      	movs	r3, #0
 8005996:	220a      	movs	r2, #10
 8005998:	4620      	mov	r0, r4
 800599a:	f000 f8d1 	bl	8005b40 <__multadd>
 800599e:	4607      	mov	r7, r0
 80059a0:	e7f0      	b.n	8005984 <_dtoa_r+0xb14>
 80059a2:	f1b9 0f00 	cmp.w	r9, #0
 80059a6:	9a00      	ldr	r2, [sp, #0]
 80059a8:	bfcc      	ite	gt
 80059aa:	464d      	movgt	r5, r9
 80059ac:	2501      	movle	r5, #1
 80059ae:	4415      	add	r5, r2
 80059b0:	f04f 0800 	mov.w	r8, #0
 80059b4:	4659      	mov	r1, fp
 80059b6:	2201      	movs	r2, #1
 80059b8:	4620      	mov	r0, r4
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	f000 fa70 	bl	8005ea0 <__lshift>
 80059c0:	4631      	mov	r1, r6
 80059c2:	4683      	mov	fp, r0
 80059c4:	f000 fad8 	bl	8005f78 <__mcmp>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	dcb2      	bgt.n	8005932 <_dtoa_r+0xac2>
 80059cc:	d102      	bne.n	80059d4 <_dtoa_r+0xb64>
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	07db      	lsls	r3, r3, #31
 80059d2:	d4ae      	bmi.n	8005932 <_dtoa_r+0xac2>
 80059d4:	462b      	mov	r3, r5
 80059d6:	461d      	mov	r5, r3
 80059d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059dc:	2a30      	cmp	r2, #48	; 0x30
 80059de:	d0fa      	beq.n	80059d6 <_dtoa_r+0xb66>
 80059e0:	e6f7      	b.n	80057d2 <_dtoa_r+0x962>
 80059e2:	9a00      	ldr	r2, [sp, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d1a5      	bne.n	8005934 <_dtoa_r+0xac4>
 80059e8:	f10a 0a01 	add.w	sl, sl, #1
 80059ec:	2331      	movs	r3, #49	; 0x31
 80059ee:	e779      	b.n	80058e4 <_dtoa_r+0xa74>
 80059f0:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <_dtoa_r+0xbd0>)
 80059f2:	f7ff baaf 	b.w	8004f54 <_dtoa_r+0xe4>
 80059f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f47f aa86 	bne.w	8004f0a <_dtoa_r+0x9a>
 80059fe:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <_dtoa_r+0xbd4>)
 8005a00:	f7ff baa8 	b.w	8004f54 <_dtoa_r+0xe4>
 8005a04:	f1b9 0f00 	cmp.w	r9, #0
 8005a08:	dc03      	bgt.n	8005a12 <_dtoa_r+0xba2>
 8005a0a:	9b05      	ldr	r3, [sp, #20]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	f73f aec9 	bgt.w	80057a4 <_dtoa_r+0x934>
 8005a12:	9d00      	ldr	r5, [sp, #0]
 8005a14:	4631      	mov	r1, r6
 8005a16:	4658      	mov	r0, fp
 8005a18:	f7ff f99e 	bl	8004d58 <quorem>
 8005a1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005a20:	f805 3b01 	strb.w	r3, [r5], #1
 8005a24:	9a00      	ldr	r2, [sp, #0]
 8005a26:	1aaa      	subs	r2, r5, r2
 8005a28:	4591      	cmp	r9, r2
 8005a2a:	ddba      	ble.n	80059a2 <_dtoa_r+0xb32>
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	2300      	movs	r3, #0
 8005a30:	220a      	movs	r2, #10
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f884 	bl	8005b40 <__multadd>
 8005a38:	4683      	mov	fp, r0
 8005a3a:	e7eb      	b.n	8005a14 <_dtoa_r+0xba4>
 8005a3c:	08006f6b 	.word	0x08006f6b
 8005a40:	08006ec4 	.word	0x08006ec4
 8005a44:	08006ee8 	.word	0x08006ee8

08005a48 <_localeconv_r>:
 8005a48:	4800      	ldr	r0, [pc, #0]	; (8005a4c <_localeconv_r+0x4>)
 8005a4a:	4770      	bx	lr
 8005a4c:	20000160 	.word	0x20000160

08005a50 <malloc>:
 8005a50:	4b02      	ldr	r3, [pc, #8]	; (8005a5c <malloc+0xc>)
 8005a52:	4601      	mov	r1, r0
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	f000 bbef 	b.w	8006238 <_malloc_r>
 8005a5a:	bf00      	nop
 8005a5c:	2000000c 	.word	0x2000000c

08005a60 <memcpy>:
 8005a60:	440a      	add	r2, r1
 8005a62:	4291      	cmp	r1, r2
 8005a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a68:	d100      	bne.n	8005a6c <memcpy+0xc>
 8005a6a:	4770      	bx	lr
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a76:	4291      	cmp	r1, r2
 8005a78:	d1f9      	bne.n	8005a6e <memcpy+0xe>
 8005a7a:	bd10      	pop	{r4, pc}

08005a7c <_Balloc>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a80:	4604      	mov	r4, r0
 8005a82:	460d      	mov	r5, r1
 8005a84:	b976      	cbnz	r6, 8005aa4 <_Balloc+0x28>
 8005a86:	2010      	movs	r0, #16
 8005a88:	f7ff ffe2 	bl	8005a50 <malloc>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	6260      	str	r0, [r4, #36]	; 0x24
 8005a90:	b920      	cbnz	r0, 8005a9c <_Balloc+0x20>
 8005a92:	4b18      	ldr	r3, [pc, #96]	; (8005af4 <_Balloc+0x78>)
 8005a94:	4818      	ldr	r0, [pc, #96]	; (8005af8 <_Balloc+0x7c>)
 8005a96:	2166      	movs	r1, #102	; 0x66
 8005a98:	f000 fc38 	bl	800630c <__assert_func>
 8005a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005aa0:	6006      	str	r6, [r0, #0]
 8005aa2:	60c6      	str	r6, [r0, #12]
 8005aa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005aa6:	68f3      	ldr	r3, [r6, #12]
 8005aa8:	b183      	cbz	r3, 8005acc <_Balloc+0x50>
 8005aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ab2:	b9b8      	cbnz	r0, 8005ae4 <_Balloc+0x68>
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	fa01 f605 	lsl.w	r6, r1, r5
 8005aba:	1d72      	adds	r2, r6, #5
 8005abc:	0092      	lsls	r2, r2, #2
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 fb5a 	bl	8006178 <_calloc_r>
 8005ac4:	b160      	cbz	r0, 8005ae0 <_Balloc+0x64>
 8005ac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aca:	e00e      	b.n	8005aea <_Balloc+0x6e>
 8005acc:	2221      	movs	r2, #33	; 0x21
 8005ace:	2104      	movs	r1, #4
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fb51 	bl	8006178 <_calloc_r>
 8005ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ad8:	60f0      	str	r0, [r6, #12]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e4      	bne.n	8005aaa <_Balloc+0x2e>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	6802      	ldr	r2, [r0, #0]
 8005ae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aea:	2300      	movs	r3, #0
 8005aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005af0:	e7f7      	b.n	8005ae2 <_Balloc+0x66>
 8005af2:	bf00      	nop
 8005af4:	08006ef5 	.word	0x08006ef5
 8005af8:	08006f7c 	.word	0x08006f7c

08005afc <_Bfree>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b00:	4605      	mov	r5, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b976      	cbnz	r6, 8005b24 <_Bfree+0x28>
 8005b06:	2010      	movs	r0, #16
 8005b08:	f7ff ffa2 	bl	8005a50 <malloc>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6268      	str	r0, [r5, #36]	; 0x24
 8005b10:	b920      	cbnz	r0, 8005b1c <_Bfree+0x20>
 8005b12:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <_Bfree+0x3c>)
 8005b14:	4809      	ldr	r0, [pc, #36]	; (8005b3c <_Bfree+0x40>)
 8005b16:	218a      	movs	r1, #138	; 0x8a
 8005b18:	f000 fbf8 	bl	800630c <__assert_func>
 8005b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b20:	6006      	str	r6, [r0, #0]
 8005b22:	60c6      	str	r6, [r0, #12]
 8005b24:	b13c      	cbz	r4, 8005b36 <_Bfree+0x3a>
 8005b26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b28:	6862      	ldr	r2, [r4, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b30:	6021      	str	r1, [r4, #0]
 8005b32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	08006ef5 	.word	0x08006ef5
 8005b3c:	08006f7c 	.word	0x08006f7c

08005b40 <__multadd>:
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	690e      	ldr	r6, [r1, #16]
 8005b46:	4607      	mov	r7, r0
 8005b48:	4698      	mov	r8, r3
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	f101 0014 	add.w	r0, r1, #20
 8005b50:	2300      	movs	r3, #0
 8005b52:	6805      	ldr	r5, [r0, #0]
 8005b54:	b2a9      	uxth	r1, r5
 8005b56:	fb02 8101 	mla	r1, r2, r1, r8
 8005b5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005b5e:	0c2d      	lsrs	r5, r5, #16
 8005b60:	fb02 c505 	mla	r5, r2, r5, ip
 8005b64:	b289      	uxth	r1, r1
 8005b66:	3301      	adds	r3, #1
 8005b68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005b6c:	429e      	cmp	r6, r3
 8005b6e:	f840 1b04 	str.w	r1, [r0], #4
 8005b72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005b76:	dcec      	bgt.n	8005b52 <__multadd+0x12>
 8005b78:	f1b8 0f00 	cmp.w	r8, #0
 8005b7c:	d022      	beq.n	8005bc4 <__multadd+0x84>
 8005b7e:	68a3      	ldr	r3, [r4, #8]
 8005b80:	42b3      	cmp	r3, r6
 8005b82:	dc19      	bgt.n	8005bb8 <__multadd+0x78>
 8005b84:	6861      	ldr	r1, [r4, #4]
 8005b86:	4638      	mov	r0, r7
 8005b88:	3101      	adds	r1, #1
 8005b8a:	f7ff ff77 	bl	8005a7c <_Balloc>
 8005b8e:	4605      	mov	r5, r0
 8005b90:	b928      	cbnz	r0, 8005b9e <__multadd+0x5e>
 8005b92:	4602      	mov	r2, r0
 8005b94:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <__multadd+0x8c>)
 8005b96:	480e      	ldr	r0, [pc, #56]	; (8005bd0 <__multadd+0x90>)
 8005b98:	21b5      	movs	r1, #181	; 0xb5
 8005b9a:	f000 fbb7 	bl	800630c <__assert_func>
 8005b9e:	6922      	ldr	r2, [r4, #16]
 8005ba0:	3202      	adds	r2, #2
 8005ba2:	f104 010c 	add.w	r1, r4, #12
 8005ba6:	0092      	lsls	r2, r2, #2
 8005ba8:	300c      	adds	r0, #12
 8005baa:	f7ff ff59 	bl	8005a60 <memcpy>
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f7ff ffa3 	bl	8005afc <_Bfree>
 8005bb6:	462c      	mov	r4, r5
 8005bb8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	f8c3 8014 	str.w	r8, [r3, #20]
 8005bc2:	6126      	str	r6, [r4, #16]
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bca:	bf00      	nop
 8005bcc:	08006f6b 	.word	0x08006f6b
 8005bd0:	08006f7c 	.word	0x08006f7c

08005bd4 <__hi0bits>:
 8005bd4:	0c03      	lsrs	r3, r0, #16
 8005bd6:	041b      	lsls	r3, r3, #16
 8005bd8:	b9d3      	cbnz	r3, 8005c10 <__hi0bits+0x3c>
 8005bda:	0400      	lsls	r0, r0, #16
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005be2:	bf04      	itt	eq
 8005be4:	0200      	lsleq	r0, r0, #8
 8005be6:	3308      	addeq	r3, #8
 8005be8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bec:	bf04      	itt	eq
 8005bee:	0100      	lsleq	r0, r0, #4
 8005bf0:	3304      	addeq	r3, #4
 8005bf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005bf6:	bf04      	itt	eq
 8005bf8:	0080      	lsleq	r0, r0, #2
 8005bfa:	3302      	addeq	r3, #2
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	db05      	blt.n	8005c0c <__hi0bits+0x38>
 8005c00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c04:	f103 0301 	add.w	r3, r3, #1
 8005c08:	bf08      	it	eq
 8005c0a:	2320      	moveq	r3, #32
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	4770      	bx	lr
 8005c10:	2300      	movs	r3, #0
 8005c12:	e7e4      	b.n	8005bde <__hi0bits+0xa>

08005c14 <__lo0bits>:
 8005c14:	6803      	ldr	r3, [r0, #0]
 8005c16:	f013 0207 	ands.w	r2, r3, #7
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	d00b      	beq.n	8005c36 <__lo0bits+0x22>
 8005c1e:	07da      	lsls	r2, r3, #31
 8005c20:	d424      	bmi.n	8005c6c <__lo0bits+0x58>
 8005c22:	0798      	lsls	r0, r3, #30
 8005c24:	bf49      	itett	mi
 8005c26:	085b      	lsrmi	r3, r3, #1
 8005c28:	089b      	lsrpl	r3, r3, #2
 8005c2a:	2001      	movmi	r0, #1
 8005c2c:	600b      	strmi	r3, [r1, #0]
 8005c2e:	bf5c      	itt	pl
 8005c30:	600b      	strpl	r3, [r1, #0]
 8005c32:	2002      	movpl	r0, #2
 8005c34:	4770      	bx	lr
 8005c36:	b298      	uxth	r0, r3
 8005c38:	b9b0      	cbnz	r0, 8005c68 <__lo0bits+0x54>
 8005c3a:	0c1b      	lsrs	r3, r3, #16
 8005c3c:	2010      	movs	r0, #16
 8005c3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c42:	bf04      	itt	eq
 8005c44:	0a1b      	lsreq	r3, r3, #8
 8005c46:	3008      	addeq	r0, #8
 8005c48:	071a      	lsls	r2, r3, #28
 8005c4a:	bf04      	itt	eq
 8005c4c:	091b      	lsreq	r3, r3, #4
 8005c4e:	3004      	addeq	r0, #4
 8005c50:	079a      	lsls	r2, r3, #30
 8005c52:	bf04      	itt	eq
 8005c54:	089b      	lsreq	r3, r3, #2
 8005c56:	3002      	addeq	r0, #2
 8005c58:	07da      	lsls	r2, r3, #31
 8005c5a:	d403      	bmi.n	8005c64 <__lo0bits+0x50>
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	f100 0001 	add.w	r0, r0, #1
 8005c62:	d005      	beq.n	8005c70 <__lo0bits+0x5c>
 8005c64:	600b      	str	r3, [r1, #0]
 8005c66:	4770      	bx	lr
 8005c68:	4610      	mov	r0, r2
 8005c6a:	e7e8      	b.n	8005c3e <__lo0bits+0x2a>
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	4770      	bx	lr
 8005c70:	2020      	movs	r0, #32
 8005c72:	4770      	bx	lr

08005c74 <__i2b>:
 8005c74:	b510      	push	{r4, lr}
 8005c76:	460c      	mov	r4, r1
 8005c78:	2101      	movs	r1, #1
 8005c7a:	f7ff feff 	bl	8005a7c <_Balloc>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	b928      	cbnz	r0, 8005c8e <__i2b+0x1a>
 8005c82:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <__i2b+0x24>)
 8005c84:	4805      	ldr	r0, [pc, #20]	; (8005c9c <__i2b+0x28>)
 8005c86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c8a:	f000 fb3f 	bl	800630c <__assert_func>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	6144      	str	r4, [r0, #20]
 8005c92:	6103      	str	r3, [r0, #16]
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	bf00      	nop
 8005c98:	08006f6b 	.word	0x08006f6b
 8005c9c:	08006f7c 	.word	0x08006f7c

08005ca0 <__multiply>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	690a      	ldr	r2, [r1, #16]
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	bfb8      	it	lt
 8005cae:	460b      	movlt	r3, r1
 8005cb0:	460d      	mov	r5, r1
 8005cb2:	bfbc      	itt	lt
 8005cb4:	4625      	movlt	r5, r4
 8005cb6:	461c      	movlt	r4, r3
 8005cb8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005cbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005cc0:	68ab      	ldr	r3, [r5, #8]
 8005cc2:	6869      	ldr	r1, [r5, #4]
 8005cc4:	eb0a 0709 	add.w	r7, sl, r9
 8005cc8:	42bb      	cmp	r3, r7
 8005cca:	b085      	sub	sp, #20
 8005ccc:	bfb8      	it	lt
 8005cce:	3101      	addlt	r1, #1
 8005cd0:	f7ff fed4 	bl	8005a7c <_Balloc>
 8005cd4:	b930      	cbnz	r0, 8005ce4 <__multiply+0x44>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	4b42      	ldr	r3, [pc, #264]	; (8005de4 <__multiply+0x144>)
 8005cda:	4843      	ldr	r0, [pc, #268]	; (8005de8 <__multiply+0x148>)
 8005cdc:	f240 115d 	movw	r1, #349	; 0x15d
 8005ce0:	f000 fb14 	bl	800630c <__assert_func>
 8005ce4:	f100 0614 	add.w	r6, r0, #20
 8005ce8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005cec:	4633      	mov	r3, r6
 8005cee:	2200      	movs	r2, #0
 8005cf0:	4543      	cmp	r3, r8
 8005cf2:	d31e      	bcc.n	8005d32 <__multiply+0x92>
 8005cf4:	f105 0c14 	add.w	ip, r5, #20
 8005cf8:	f104 0314 	add.w	r3, r4, #20
 8005cfc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005d00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005d04:	9202      	str	r2, [sp, #8]
 8005d06:	ebac 0205 	sub.w	r2, ip, r5
 8005d0a:	3a15      	subs	r2, #21
 8005d0c:	f022 0203 	bic.w	r2, r2, #3
 8005d10:	3204      	adds	r2, #4
 8005d12:	f105 0115 	add.w	r1, r5, #21
 8005d16:	458c      	cmp	ip, r1
 8005d18:	bf38      	it	cc
 8005d1a:	2204      	movcc	r2, #4
 8005d1c:	9201      	str	r2, [sp, #4]
 8005d1e:	9a02      	ldr	r2, [sp, #8]
 8005d20:	9303      	str	r3, [sp, #12]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d808      	bhi.n	8005d38 <__multiply+0x98>
 8005d26:	2f00      	cmp	r7, #0
 8005d28:	dc55      	bgt.n	8005dd6 <__multiply+0x136>
 8005d2a:	6107      	str	r7, [r0, #16]
 8005d2c:	b005      	add	sp, #20
 8005d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d32:	f843 2b04 	str.w	r2, [r3], #4
 8005d36:	e7db      	b.n	8005cf0 <__multiply+0x50>
 8005d38:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d3c:	f1ba 0f00 	cmp.w	sl, #0
 8005d40:	d020      	beq.n	8005d84 <__multiply+0xe4>
 8005d42:	f105 0e14 	add.w	lr, r5, #20
 8005d46:	46b1      	mov	r9, r6
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005d4e:	f8d9 b000 	ldr.w	fp, [r9]
 8005d52:	b2a1      	uxth	r1, r4
 8005d54:	fa1f fb8b 	uxth.w	fp, fp
 8005d58:	fb0a b101 	mla	r1, sl, r1, fp
 8005d5c:	4411      	add	r1, r2
 8005d5e:	f8d9 2000 	ldr.w	r2, [r9]
 8005d62:	0c24      	lsrs	r4, r4, #16
 8005d64:	0c12      	lsrs	r2, r2, #16
 8005d66:	fb0a 2404 	mla	r4, sl, r4, r2
 8005d6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005d6e:	b289      	uxth	r1, r1
 8005d70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005d74:	45f4      	cmp	ip, lr
 8005d76:	f849 1b04 	str.w	r1, [r9], #4
 8005d7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005d7e:	d8e4      	bhi.n	8005d4a <__multiply+0xaa>
 8005d80:	9901      	ldr	r1, [sp, #4]
 8005d82:	5072      	str	r2, [r6, r1]
 8005d84:	9a03      	ldr	r2, [sp, #12]
 8005d86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	f1b9 0f00 	cmp.w	r9, #0
 8005d90:	d01f      	beq.n	8005dd2 <__multiply+0x132>
 8005d92:	6834      	ldr	r4, [r6, #0]
 8005d94:	f105 0114 	add.w	r1, r5, #20
 8005d98:	46b6      	mov	lr, r6
 8005d9a:	f04f 0a00 	mov.w	sl, #0
 8005d9e:	880a      	ldrh	r2, [r1, #0]
 8005da0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005da4:	fb09 b202 	mla	r2, r9, r2, fp
 8005da8:	4492      	add	sl, r2
 8005daa:	b2a4      	uxth	r4, r4
 8005dac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005db0:	f84e 4b04 	str.w	r4, [lr], #4
 8005db4:	f851 4b04 	ldr.w	r4, [r1], #4
 8005db8:	f8be 2000 	ldrh.w	r2, [lr]
 8005dbc:	0c24      	lsrs	r4, r4, #16
 8005dbe:	fb09 2404 	mla	r4, r9, r4, r2
 8005dc2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005dc6:	458c      	cmp	ip, r1
 8005dc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005dcc:	d8e7      	bhi.n	8005d9e <__multiply+0xfe>
 8005dce:	9a01      	ldr	r2, [sp, #4]
 8005dd0:	50b4      	str	r4, [r6, r2]
 8005dd2:	3604      	adds	r6, #4
 8005dd4:	e7a3      	b.n	8005d1e <__multiply+0x7e>
 8005dd6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1a5      	bne.n	8005d2a <__multiply+0x8a>
 8005dde:	3f01      	subs	r7, #1
 8005de0:	e7a1      	b.n	8005d26 <__multiply+0x86>
 8005de2:	bf00      	nop
 8005de4:	08006f6b 	.word	0x08006f6b
 8005de8:	08006f7c 	.word	0x08006f7c

08005dec <__pow5mult>:
 8005dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df0:	4615      	mov	r5, r2
 8005df2:	f012 0203 	ands.w	r2, r2, #3
 8005df6:	4606      	mov	r6, r0
 8005df8:	460f      	mov	r7, r1
 8005dfa:	d007      	beq.n	8005e0c <__pow5mult+0x20>
 8005dfc:	4c25      	ldr	r4, [pc, #148]	; (8005e94 <__pow5mult+0xa8>)
 8005dfe:	3a01      	subs	r2, #1
 8005e00:	2300      	movs	r3, #0
 8005e02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e06:	f7ff fe9b 	bl	8005b40 <__multadd>
 8005e0a:	4607      	mov	r7, r0
 8005e0c:	10ad      	asrs	r5, r5, #2
 8005e0e:	d03d      	beq.n	8005e8c <__pow5mult+0xa0>
 8005e10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e12:	b97c      	cbnz	r4, 8005e34 <__pow5mult+0x48>
 8005e14:	2010      	movs	r0, #16
 8005e16:	f7ff fe1b 	bl	8005a50 <malloc>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	6270      	str	r0, [r6, #36]	; 0x24
 8005e1e:	b928      	cbnz	r0, 8005e2c <__pow5mult+0x40>
 8005e20:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <__pow5mult+0xac>)
 8005e22:	481e      	ldr	r0, [pc, #120]	; (8005e9c <__pow5mult+0xb0>)
 8005e24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e28:	f000 fa70 	bl	800630c <__assert_func>
 8005e2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e30:	6004      	str	r4, [r0, #0]
 8005e32:	60c4      	str	r4, [r0, #12]
 8005e34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e3c:	b94c      	cbnz	r4, 8005e52 <__pow5mult+0x66>
 8005e3e:	f240 2171 	movw	r1, #625	; 0x271
 8005e42:	4630      	mov	r0, r6
 8005e44:	f7ff ff16 	bl	8005c74 <__i2b>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e4e:	4604      	mov	r4, r0
 8005e50:	6003      	str	r3, [r0, #0]
 8005e52:	f04f 0900 	mov.w	r9, #0
 8005e56:	07eb      	lsls	r3, r5, #31
 8005e58:	d50a      	bpl.n	8005e70 <__pow5mult+0x84>
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f7ff ff1e 	bl	8005ca0 <__multiply>
 8005e64:	4639      	mov	r1, r7
 8005e66:	4680      	mov	r8, r0
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7ff fe47 	bl	8005afc <_Bfree>
 8005e6e:	4647      	mov	r7, r8
 8005e70:	106d      	asrs	r5, r5, #1
 8005e72:	d00b      	beq.n	8005e8c <__pow5mult+0xa0>
 8005e74:	6820      	ldr	r0, [r4, #0]
 8005e76:	b938      	cbnz	r0, 8005e88 <__pow5mult+0x9c>
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f7ff ff0f 	bl	8005ca0 <__multiply>
 8005e82:	6020      	str	r0, [r4, #0]
 8005e84:	f8c0 9000 	str.w	r9, [r0]
 8005e88:	4604      	mov	r4, r0
 8005e8a:	e7e4      	b.n	8005e56 <__pow5mult+0x6a>
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e92:	bf00      	nop
 8005e94:	080070d0 	.word	0x080070d0
 8005e98:	08006ef5 	.word	0x08006ef5
 8005e9c:	08006f7c 	.word	0x08006f7c

08005ea0 <__lshift>:
 8005ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	6849      	ldr	r1, [r1, #4]
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005eae:	68a3      	ldr	r3, [r4, #8]
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	4691      	mov	r9, r2
 8005eb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005eb8:	f108 0601 	add.w	r6, r8, #1
 8005ebc:	42b3      	cmp	r3, r6
 8005ebe:	db0b      	blt.n	8005ed8 <__lshift+0x38>
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	f7ff fddb 	bl	8005a7c <_Balloc>
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	b948      	cbnz	r0, 8005ede <__lshift+0x3e>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	4b28      	ldr	r3, [pc, #160]	; (8005f70 <__lshift+0xd0>)
 8005ece:	4829      	ldr	r0, [pc, #164]	; (8005f74 <__lshift+0xd4>)
 8005ed0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ed4:	f000 fa1a 	bl	800630c <__assert_func>
 8005ed8:	3101      	adds	r1, #1
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	e7ee      	b.n	8005ebc <__lshift+0x1c>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f100 0114 	add.w	r1, r0, #20
 8005ee4:	f100 0210 	add.w	r2, r0, #16
 8005ee8:	4618      	mov	r0, r3
 8005eea:	4553      	cmp	r3, sl
 8005eec:	db33      	blt.n	8005f56 <__lshift+0xb6>
 8005eee:	6920      	ldr	r0, [r4, #16]
 8005ef0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ef4:	f104 0314 	add.w	r3, r4, #20
 8005ef8:	f019 091f 	ands.w	r9, r9, #31
 8005efc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f04:	d02b      	beq.n	8005f5e <__lshift+0xbe>
 8005f06:	f1c9 0e20 	rsb	lr, r9, #32
 8005f0a:	468a      	mov	sl, r1
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	fa00 f009 	lsl.w	r0, r0, r9
 8005f14:	4302      	orrs	r2, r0
 8005f16:	f84a 2b04 	str.w	r2, [sl], #4
 8005f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1e:	459c      	cmp	ip, r3
 8005f20:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f24:	d8f3      	bhi.n	8005f0e <__lshift+0x6e>
 8005f26:	ebac 0304 	sub.w	r3, ip, r4
 8005f2a:	3b15      	subs	r3, #21
 8005f2c:	f023 0303 	bic.w	r3, r3, #3
 8005f30:	3304      	adds	r3, #4
 8005f32:	f104 0015 	add.w	r0, r4, #21
 8005f36:	4584      	cmp	ip, r0
 8005f38:	bf38      	it	cc
 8005f3a:	2304      	movcc	r3, #4
 8005f3c:	50ca      	str	r2, [r1, r3]
 8005f3e:	b10a      	cbz	r2, 8005f44 <__lshift+0xa4>
 8005f40:	f108 0602 	add.w	r6, r8, #2
 8005f44:	3e01      	subs	r6, #1
 8005f46:	4638      	mov	r0, r7
 8005f48:	612e      	str	r6, [r5, #16]
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	f7ff fdd6 	bl	8005afc <_Bfree>
 8005f50:	4628      	mov	r0, r5
 8005f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f56:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	e7c5      	b.n	8005eea <__lshift+0x4a>
 8005f5e:	3904      	subs	r1, #4
 8005f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f64:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f68:	459c      	cmp	ip, r3
 8005f6a:	d8f9      	bhi.n	8005f60 <__lshift+0xc0>
 8005f6c:	e7ea      	b.n	8005f44 <__lshift+0xa4>
 8005f6e:	bf00      	nop
 8005f70:	08006f6b 	.word	0x08006f6b
 8005f74:	08006f7c 	.word	0x08006f7c

08005f78 <__mcmp>:
 8005f78:	b530      	push	{r4, r5, lr}
 8005f7a:	6902      	ldr	r2, [r0, #16]
 8005f7c:	690c      	ldr	r4, [r1, #16]
 8005f7e:	1b12      	subs	r2, r2, r4
 8005f80:	d10e      	bne.n	8005fa0 <__mcmp+0x28>
 8005f82:	f100 0314 	add.w	r3, r0, #20
 8005f86:	3114      	adds	r1, #20
 8005f88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f98:	42a5      	cmp	r5, r4
 8005f9a:	d003      	beq.n	8005fa4 <__mcmp+0x2c>
 8005f9c:	d305      	bcc.n	8005faa <__mcmp+0x32>
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	bd30      	pop	{r4, r5, pc}
 8005fa4:	4283      	cmp	r3, r0
 8005fa6:	d3f3      	bcc.n	8005f90 <__mcmp+0x18>
 8005fa8:	e7fa      	b.n	8005fa0 <__mcmp+0x28>
 8005faa:	f04f 32ff 	mov.w	r2, #4294967295
 8005fae:	e7f7      	b.n	8005fa0 <__mcmp+0x28>

08005fb0 <__mdiff>:
 8005fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4620      	mov	r0, r4
 8005fbc:	4617      	mov	r7, r2
 8005fbe:	f7ff ffdb 	bl	8005f78 <__mcmp>
 8005fc2:	1e05      	subs	r5, r0, #0
 8005fc4:	d110      	bne.n	8005fe8 <__mdiff+0x38>
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f7ff fd57 	bl	8005a7c <_Balloc>
 8005fce:	b930      	cbnz	r0, 8005fde <__mdiff+0x2e>
 8005fd0:	4b39      	ldr	r3, [pc, #228]	; (80060b8 <__mdiff+0x108>)
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	f240 2132 	movw	r1, #562	; 0x232
 8005fd8:	4838      	ldr	r0, [pc, #224]	; (80060bc <__mdiff+0x10c>)
 8005fda:	f000 f997 	bl	800630c <__assert_func>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	bfa4      	itt	ge
 8005fea:	463b      	movge	r3, r7
 8005fec:	4627      	movge	r7, r4
 8005fee:	4630      	mov	r0, r6
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	bfa6      	itte	ge
 8005ff4:	461c      	movge	r4, r3
 8005ff6:	2500      	movge	r5, #0
 8005ff8:	2501      	movlt	r5, #1
 8005ffa:	f7ff fd3f 	bl	8005a7c <_Balloc>
 8005ffe:	b920      	cbnz	r0, 800600a <__mdiff+0x5a>
 8006000:	4b2d      	ldr	r3, [pc, #180]	; (80060b8 <__mdiff+0x108>)
 8006002:	4602      	mov	r2, r0
 8006004:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006008:	e7e6      	b.n	8005fd8 <__mdiff+0x28>
 800600a:	693e      	ldr	r6, [r7, #16]
 800600c:	60c5      	str	r5, [r0, #12]
 800600e:	6925      	ldr	r5, [r4, #16]
 8006010:	f107 0114 	add.w	r1, r7, #20
 8006014:	f104 0914 	add.w	r9, r4, #20
 8006018:	f100 0e14 	add.w	lr, r0, #20
 800601c:	f107 0210 	add.w	r2, r7, #16
 8006020:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006024:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006028:	46f2      	mov	sl, lr
 800602a:	2700      	movs	r7, #0
 800602c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006034:	fa1f f883 	uxth.w	r8, r3
 8006038:	fa17 f78b 	uxtah	r7, r7, fp
 800603c:	0c1b      	lsrs	r3, r3, #16
 800603e:	eba7 0808 	sub.w	r8, r7, r8
 8006042:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006046:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800604a:	fa1f f888 	uxth.w	r8, r8
 800604e:	141f      	asrs	r7, r3, #16
 8006050:	454d      	cmp	r5, r9
 8006052:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006056:	f84a 3b04 	str.w	r3, [sl], #4
 800605a:	d8e7      	bhi.n	800602c <__mdiff+0x7c>
 800605c:	1b2b      	subs	r3, r5, r4
 800605e:	3b15      	subs	r3, #21
 8006060:	f023 0303 	bic.w	r3, r3, #3
 8006064:	3304      	adds	r3, #4
 8006066:	3415      	adds	r4, #21
 8006068:	42a5      	cmp	r5, r4
 800606a:	bf38      	it	cc
 800606c:	2304      	movcc	r3, #4
 800606e:	4419      	add	r1, r3
 8006070:	4473      	add	r3, lr
 8006072:	469e      	mov	lr, r3
 8006074:	460d      	mov	r5, r1
 8006076:	4565      	cmp	r5, ip
 8006078:	d30e      	bcc.n	8006098 <__mdiff+0xe8>
 800607a:	f10c 0203 	add.w	r2, ip, #3
 800607e:	1a52      	subs	r2, r2, r1
 8006080:	f022 0203 	bic.w	r2, r2, #3
 8006084:	3903      	subs	r1, #3
 8006086:	458c      	cmp	ip, r1
 8006088:	bf38      	it	cc
 800608a:	2200      	movcc	r2, #0
 800608c:	441a      	add	r2, r3
 800608e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006092:	b17b      	cbz	r3, 80060b4 <__mdiff+0x104>
 8006094:	6106      	str	r6, [r0, #16]
 8006096:	e7a5      	b.n	8005fe4 <__mdiff+0x34>
 8006098:	f855 8b04 	ldr.w	r8, [r5], #4
 800609c:	fa17 f488 	uxtah	r4, r7, r8
 80060a0:	1422      	asrs	r2, r4, #16
 80060a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80060a6:	b2a4      	uxth	r4, r4
 80060a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80060ac:	f84e 4b04 	str.w	r4, [lr], #4
 80060b0:	1417      	asrs	r7, r2, #16
 80060b2:	e7e0      	b.n	8006076 <__mdiff+0xc6>
 80060b4:	3e01      	subs	r6, #1
 80060b6:	e7ea      	b.n	800608e <__mdiff+0xde>
 80060b8:	08006f6b 	.word	0x08006f6b
 80060bc:	08006f7c 	.word	0x08006f7c

080060c0 <__d2b>:
 80060c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060c4:	4689      	mov	r9, r1
 80060c6:	2101      	movs	r1, #1
 80060c8:	ec57 6b10 	vmov	r6, r7, d0
 80060cc:	4690      	mov	r8, r2
 80060ce:	f7ff fcd5 	bl	8005a7c <_Balloc>
 80060d2:	4604      	mov	r4, r0
 80060d4:	b930      	cbnz	r0, 80060e4 <__d2b+0x24>
 80060d6:	4602      	mov	r2, r0
 80060d8:	4b25      	ldr	r3, [pc, #148]	; (8006170 <__d2b+0xb0>)
 80060da:	4826      	ldr	r0, [pc, #152]	; (8006174 <__d2b+0xb4>)
 80060dc:	f240 310a 	movw	r1, #778	; 0x30a
 80060e0:	f000 f914 	bl	800630c <__assert_func>
 80060e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80060e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060ec:	bb35      	cbnz	r5, 800613c <__d2b+0x7c>
 80060ee:	2e00      	cmp	r6, #0
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	d028      	beq.n	8006146 <__d2b+0x86>
 80060f4:	4668      	mov	r0, sp
 80060f6:	9600      	str	r6, [sp, #0]
 80060f8:	f7ff fd8c 	bl	8005c14 <__lo0bits>
 80060fc:	9900      	ldr	r1, [sp, #0]
 80060fe:	b300      	cbz	r0, 8006142 <__d2b+0x82>
 8006100:	9a01      	ldr	r2, [sp, #4]
 8006102:	f1c0 0320 	rsb	r3, r0, #32
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	430b      	orrs	r3, r1
 800610c:	40c2      	lsrs	r2, r0
 800610e:	6163      	str	r3, [r4, #20]
 8006110:	9201      	str	r2, [sp, #4]
 8006112:	9b01      	ldr	r3, [sp, #4]
 8006114:	61a3      	str	r3, [r4, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	bf14      	ite	ne
 800611a:	2202      	movne	r2, #2
 800611c:	2201      	moveq	r2, #1
 800611e:	6122      	str	r2, [r4, #16]
 8006120:	b1d5      	cbz	r5, 8006158 <__d2b+0x98>
 8006122:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006126:	4405      	add	r5, r0
 8006128:	f8c9 5000 	str.w	r5, [r9]
 800612c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006130:	f8c8 0000 	str.w	r0, [r8]
 8006134:	4620      	mov	r0, r4
 8006136:	b003      	add	sp, #12
 8006138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800613c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006140:	e7d5      	b.n	80060ee <__d2b+0x2e>
 8006142:	6161      	str	r1, [r4, #20]
 8006144:	e7e5      	b.n	8006112 <__d2b+0x52>
 8006146:	a801      	add	r0, sp, #4
 8006148:	f7ff fd64 	bl	8005c14 <__lo0bits>
 800614c:	9b01      	ldr	r3, [sp, #4]
 800614e:	6163      	str	r3, [r4, #20]
 8006150:	2201      	movs	r2, #1
 8006152:	6122      	str	r2, [r4, #16]
 8006154:	3020      	adds	r0, #32
 8006156:	e7e3      	b.n	8006120 <__d2b+0x60>
 8006158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800615c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006160:	f8c9 0000 	str.w	r0, [r9]
 8006164:	6918      	ldr	r0, [r3, #16]
 8006166:	f7ff fd35 	bl	8005bd4 <__hi0bits>
 800616a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800616e:	e7df      	b.n	8006130 <__d2b+0x70>
 8006170:	08006f6b 	.word	0x08006f6b
 8006174:	08006f7c 	.word	0x08006f7c

08006178 <_calloc_r>:
 8006178:	b513      	push	{r0, r1, r4, lr}
 800617a:	434a      	muls	r2, r1
 800617c:	4611      	mov	r1, r2
 800617e:	9201      	str	r2, [sp, #4]
 8006180:	f000 f85a 	bl	8006238 <_malloc_r>
 8006184:	4604      	mov	r4, r0
 8006186:	b118      	cbz	r0, 8006190 <_calloc_r+0x18>
 8006188:	9a01      	ldr	r2, [sp, #4]
 800618a:	2100      	movs	r1, #0
 800618c:	f7fe f972 	bl	8004474 <memset>
 8006190:	4620      	mov	r0, r4
 8006192:	b002      	add	sp, #8
 8006194:	bd10      	pop	{r4, pc}
	...

08006198 <_free_r>:
 8006198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800619a:	2900      	cmp	r1, #0
 800619c:	d048      	beq.n	8006230 <_free_r+0x98>
 800619e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a2:	9001      	str	r0, [sp, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f1a1 0404 	sub.w	r4, r1, #4
 80061aa:	bfb8      	it	lt
 80061ac:	18e4      	addlt	r4, r4, r3
 80061ae:	f000 f8ef 	bl	8006390 <__malloc_lock>
 80061b2:	4a20      	ldr	r2, [pc, #128]	; (8006234 <_free_r+0x9c>)
 80061b4:	9801      	ldr	r0, [sp, #4]
 80061b6:	6813      	ldr	r3, [r2, #0]
 80061b8:	4615      	mov	r5, r2
 80061ba:	b933      	cbnz	r3, 80061ca <_free_r+0x32>
 80061bc:	6063      	str	r3, [r4, #4]
 80061be:	6014      	str	r4, [r2, #0]
 80061c0:	b003      	add	sp, #12
 80061c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061c6:	f000 b8e9 	b.w	800639c <__malloc_unlock>
 80061ca:	42a3      	cmp	r3, r4
 80061cc:	d90b      	bls.n	80061e6 <_free_r+0x4e>
 80061ce:	6821      	ldr	r1, [r4, #0]
 80061d0:	1862      	adds	r2, r4, r1
 80061d2:	4293      	cmp	r3, r2
 80061d4:	bf04      	itt	eq
 80061d6:	681a      	ldreq	r2, [r3, #0]
 80061d8:	685b      	ldreq	r3, [r3, #4]
 80061da:	6063      	str	r3, [r4, #4]
 80061dc:	bf04      	itt	eq
 80061de:	1852      	addeq	r2, r2, r1
 80061e0:	6022      	streq	r2, [r4, #0]
 80061e2:	602c      	str	r4, [r5, #0]
 80061e4:	e7ec      	b.n	80061c0 <_free_r+0x28>
 80061e6:	461a      	mov	r2, r3
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	b10b      	cbz	r3, 80061f0 <_free_r+0x58>
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	d9fa      	bls.n	80061e6 <_free_r+0x4e>
 80061f0:	6811      	ldr	r1, [r2, #0]
 80061f2:	1855      	adds	r5, r2, r1
 80061f4:	42a5      	cmp	r5, r4
 80061f6:	d10b      	bne.n	8006210 <_free_r+0x78>
 80061f8:	6824      	ldr	r4, [r4, #0]
 80061fa:	4421      	add	r1, r4
 80061fc:	1854      	adds	r4, r2, r1
 80061fe:	42a3      	cmp	r3, r4
 8006200:	6011      	str	r1, [r2, #0]
 8006202:	d1dd      	bne.n	80061c0 <_free_r+0x28>
 8006204:	681c      	ldr	r4, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	6053      	str	r3, [r2, #4]
 800620a:	4421      	add	r1, r4
 800620c:	6011      	str	r1, [r2, #0]
 800620e:	e7d7      	b.n	80061c0 <_free_r+0x28>
 8006210:	d902      	bls.n	8006218 <_free_r+0x80>
 8006212:	230c      	movs	r3, #12
 8006214:	6003      	str	r3, [r0, #0]
 8006216:	e7d3      	b.n	80061c0 <_free_r+0x28>
 8006218:	6825      	ldr	r5, [r4, #0]
 800621a:	1961      	adds	r1, r4, r5
 800621c:	428b      	cmp	r3, r1
 800621e:	bf04      	itt	eq
 8006220:	6819      	ldreq	r1, [r3, #0]
 8006222:	685b      	ldreq	r3, [r3, #4]
 8006224:	6063      	str	r3, [r4, #4]
 8006226:	bf04      	itt	eq
 8006228:	1949      	addeq	r1, r1, r5
 800622a:	6021      	streq	r1, [r4, #0]
 800622c:	6054      	str	r4, [r2, #4]
 800622e:	e7c7      	b.n	80061c0 <_free_r+0x28>
 8006230:	b003      	add	sp, #12
 8006232:	bd30      	pop	{r4, r5, pc}
 8006234:	20000208 	.word	0x20000208

08006238 <_malloc_r>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	1ccd      	adds	r5, r1, #3
 800623c:	f025 0503 	bic.w	r5, r5, #3
 8006240:	3508      	adds	r5, #8
 8006242:	2d0c      	cmp	r5, #12
 8006244:	bf38      	it	cc
 8006246:	250c      	movcc	r5, #12
 8006248:	2d00      	cmp	r5, #0
 800624a:	4606      	mov	r6, r0
 800624c:	db01      	blt.n	8006252 <_malloc_r+0x1a>
 800624e:	42a9      	cmp	r1, r5
 8006250:	d903      	bls.n	800625a <_malloc_r+0x22>
 8006252:	230c      	movs	r3, #12
 8006254:	6033      	str	r3, [r6, #0]
 8006256:	2000      	movs	r0, #0
 8006258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800625a:	f000 f899 	bl	8006390 <__malloc_lock>
 800625e:	4921      	ldr	r1, [pc, #132]	; (80062e4 <_malloc_r+0xac>)
 8006260:	680a      	ldr	r2, [r1, #0]
 8006262:	4614      	mov	r4, r2
 8006264:	b99c      	cbnz	r4, 800628e <_malloc_r+0x56>
 8006266:	4f20      	ldr	r7, [pc, #128]	; (80062e8 <_malloc_r+0xb0>)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	b923      	cbnz	r3, 8006276 <_malloc_r+0x3e>
 800626c:	4621      	mov	r1, r4
 800626e:	4630      	mov	r0, r6
 8006270:	f000 f83c 	bl	80062ec <_sbrk_r>
 8006274:	6038      	str	r0, [r7, #0]
 8006276:	4629      	mov	r1, r5
 8006278:	4630      	mov	r0, r6
 800627a:	f000 f837 	bl	80062ec <_sbrk_r>
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d123      	bne.n	80062ca <_malloc_r+0x92>
 8006282:	230c      	movs	r3, #12
 8006284:	6033      	str	r3, [r6, #0]
 8006286:	4630      	mov	r0, r6
 8006288:	f000 f888 	bl	800639c <__malloc_unlock>
 800628c:	e7e3      	b.n	8006256 <_malloc_r+0x1e>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	1b5b      	subs	r3, r3, r5
 8006292:	d417      	bmi.n	80062c4 <_malloc_r+0x8c>
 8006294:	2b0b      	cmp	r3, #11
 8006296:	d903      	bls.n	80062a0 <_malloc_r+0x68>
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	441c      	add	r4, r3
 800629c:	6025      	str	r5, [r4, #0]
 800629e:	e004      	b.n	80062aa <_malloc_r+0x72>
 80062a0:	6863      	ldr	r3, [r4, #4]
 80062a2:	42a2      	cmp	r2, r4
 80062a4:	bf0c      	ite	eq
 80062a6:	600b      	streq	r3, [r1, #0]
 80062a8:	6053      	strne	r3, [r2, #4]
 80062aa:	4630      	mov	r0, r6
 80062ac:	f000 f876 	bl	800639c <__malloc_unlock>
 80062b0:	f104 000b 	add.w	r0, r4, #11
 80062b4:	1d23      	adds	r3, r4, #4
 80062b6:	f020 0007 	bic.w	r0, r0, #7
 80062ba:	1ac2      	subs	r2, r0, r3
 80062bc:	d0cc      	beq.n	8006258 <_malloc_r+0x20>
 80062be:	1a1b      	subs	r3, r3, r0
 80062c0:	50a3      	str	r3, [r4, r2]
 80062c2:	e7c9      	b.n	8006258 <_malloc_r+0x20>
 80062c4:	4622      	mov	r2, r4
 80062c6:	6864      	ldr	r4, [r4, #4]
 80062c8:	e7cc      	b.n	8006264 <_malloc_r+0x2c>
 80062ca:	1cc4      	adds	r4, r0, #3
 80062cc:	f024 0403 	bic.w	r4, r4, #3
 80062d0:	42a0      	cmp	r0, r4
 80062d2:	d0e3      	beq.n	800629c <_malloc_r+0x64>
 80062d4:	1a21      	subs	r1, r4, r0
 80062d6:	4630      	mov	r0, r6
 80062d8:	f000 f808 	bl	80062ec <_sbrk_r>
 80062dc:	3001      	adds	r0, #1
 80062de:	d1dd      	bne.n	800629c <_malloc_r+0x64>
 80062e0:	e7cf      	b.n	8006282 <_malloc_r+0x4a>
 80062e2:	bf00      	nop
 80062e4:	20000208 	.word	0x20000208
 80062e8:	2000020c 	.word	0x2000020c

080062ec <_sbrk_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4d06      	ldr	r5, [pc, #24]	; (8006308 <_sbrk_r+0x1c>)
 80062f0:	2300      	movs	r3, #0
 80062f2:	4604      	mov	r4, r0
 80062f4:	4608      	mov	r0, r1
 80062f6:	602b      	str	r3, [r5, #0]
 80062f8:	f7fb fb42 	bl	8001980 <_sbrk>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d102      	bne.n	8006306 <_sbrk_r+0x1a>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	b103      	cbz	r3, 8006306 <_sbrk_r+0x1a>
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	bd38      	pop	{r3, r4, r5, pc}
 8006308:	200002a0 	.word	0x200002a0

0800630c <__assert_func>:
 800630c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800630e:	4614      	mov	r4, r2
 8006310:	461a      	mov	r2, r3
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <__assert_func+0x2c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4605      	mov	r5, r0
 8006318:	68d8      	ldr	r0, [r3, #12]
 800631a:	b14c      	cbz	r4, 8006330 <__assert_func+0x24>
 800631c:	4b07      	ldr	r3, [pc, #28]	; (800633c <__assert_func+0x30>)
 800631e:	9100      	str	r1, [sp, #0]
 8006320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006324:	4906      	ldr	r1, [pc, #24]	; (8006340 <__assert_func+0x34>)
 8006326:	462b      	mov	r3, r5
 8006328:	f000 f80e 	bl	8006348 <fiprintf>
 800632c:	f000 fa64 	bl	80067f8 <abort>
 8006330:	4b04      	ldr	r3, [pc, #16]	; (8006344 <__assert_func+0x38>)
 8006332:	461c      	mov	r4, r3
 8006334:	e7f3      	b.n	800631e <__assert_func+0x12>
 8006336:	bf00      	nop
 8006338:	2000000c 	.word	0x2000000c
 800633c:	080070dc 	.word	0x080070dc
 8006340:	080070e9 	.word	0x080070e9
 8006344:	08007117 	.word	0x08007117

08006348 <fiprintf>:
 8006348:	b40e      	push	{r1, r2, r3}
 800634a:	b503      	push	{r0, r1, lr}
 800634c:	4601      	mov	r1, r0
 800634e:	ab03      	add	r3, sp, #12
 8006350:	4805      	ldr	r0, [pc, #20]	; (8006368 <fiprintf+0x20>)
 8006352:	f853 2b04 	ldr.w	r2, [r3], #4
 8006356:	6800      	ldr	r0, [r0, #0]
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	f000 f84f 	bl	80063fc <_vfiprintf_r>
 800635e:	b002      	add	sp, #8
 8006360:	f85d eb04 	ldr.w	lr, [sp], #4
 8006364:	b003      	add	sp, #12
 8006366:	4770      	bx	lr
 8006368:	2000000c 	.word	0x2000000c

0800636c <__ascii_mbtowc>:
 800636c:	b082      	sub	sp, #8
 800636e:	b901      	cbnz	r1, 8006372 <__ascii_mbtowc+0x6>
 8006370:	a901      	add	r1, sp, #4
 8006372:	b142      	cbz	r2, 8006386 <__ascii_mbtowc+0x1a>
 8006374:	b14b      	cbz	r3, 800638a <__ascii_mbtowc+0x1e>
 8006376:	7813      	ldrb	r3, [r2, #0]
 8006378:	600b      	str	r3, [r1, #0]
 800637a:	7812      	ldrb	r2, [r2, #0]
 800637c:	1e10      	subs	r0, r2, #0
 800637e:	bf18      	it	ne
 8006380:	2001      	movne	r0, #1
 8006382:	b002      	add	sp, #8
 8006384:	4770      	bx	lr
 8006386:	4610      	mov	r0, r2
 8006388:	e7fb      	b.n	8006382 <__ascii_mbtowc+0x16>
 800638a:	f06f 0001 	mvn.w	r0, #1
 800638e:	e7f8      	b.n	8006382 <__ascii_mbtowc+0x16>

08006390 <__malloc_lock>:
 8006390:	4801      	ldr	r0, [pc, #4]	; (8006398 <__malloc_lock+0x8>)
 8006392:	f000 bbf1 	b.w	8006b78 <__retarget_lock_acquire_recursive>
 8006396:	bf00      	nop
 8006398:	200002a8 	.word	0x200002a8

0800639c <__malloc_unlock>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__malloc_unlock+0x8>)
 800639e:	f000 bbec 	b.w	8006b7a <__retarget_lock_release_recursive>
 80063a2:	bf00      	nop
 80063a4:	200002a8 	.word	0x200002a8

080063a8 <__sfputc_r>:
 80063a8:	6893      	ldr	r3, [r2, #8]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	b410      	push	{r4}
 80063b0:	6093      	str	r3, [r2, #8]
 80063b2:	da08      	bge.n	80063c6 <__sfputc_r+0x1e>
 80063b4:	6994      	ldr	r4, [r2, #24]
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	db01      	blt.n	80063be <__sfputc_r+0x16>
 80063ba:	290a      	cmp	r1, #10
 80063bc:	d103      	bne.n	80063c6 <__sfputc_r+0x1e>
 80063be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063c2:	f000 b94b 	b.w	800665c <__swbuf_r>
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	1c58      	adds	r0, r3, #1
 80063ca:	6010      	str	r0, [r2, #0]
 80063cc:	7019      	strb	r1, [r3, #0]
 80063ce:	4608      	mov	r0, r1
 80063d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <__sfputs_r>:
 80063d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d8:	4606      	mov	r6, r0
 80063da:	460f      	mov	r7, r1
 80063dc:	4614      	mov	r4, r2
 80063de:	18d5      	adds	r5, r2, r3
 80063e0:	42ac      	cmp	r4, r5
 80063e2:	d101      	bne.n	80063e8 <__sfputs_r+0x12>
 80063e4:	2000      	movs	r0, #0
 80063e6:	e007      	b.n	80063f8 <__sfputs_r+0x22>
 80063e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ec:	463a      	mov	r2, r7
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7ff ffda 	bl	80063a8 <__sfputc_r>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d1f3      	bne.n	80063e0 <__sfputs_r+0xa>
 80063f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063fc <_vfiprintf_r>:
 80063fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006400:	460d      	mov	r5, r1
 8006402:	b09d      	sub	sp, #116	; 0x74
 8006404:	4614      	mov	r4, r2
 8006406:	4698      	mov	r8, r3
 8006408:	4606      	mov	r6, r0
 800640a:	b118      	cbz	r0, 8006414 <_vfiprintf_r+0x18>
 800640c:	6983      	ldr	r3, [r0, #24]
 800640e:	b90b      	cbnz	r3, 8006414 <_vfiprintf_r+0x18>
 8006410:	f000 fb14 	bl	8006a3c <__sinit>
 8006414:	4b89      	ldr	r3, [pc, #548]	; (800663c <_vfiprintf_r+0x240>)
 8006416:	429d      	cmp	r5, r3
 8006418:	d11b      	bne.n	8006452 <_vfiprintf_r+0x56>
 800641a:	6875      	ldr	r5, [r6, #4]
 800641c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800641e:	07d9      	lsls	r1, r3, #31
 8006420:	d405      	bmi.n	800642e <_vfiprintf_r+0x32>
 8006422:	89ab      	ldrh	r3, [r5, #12]
 8006424:	059a      	lsls	r2, r3, #22
 8006426:	d402      	bmi.n	800642e <_vfiprintf_r+0x32>
 8006428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800642a:	f000 fba5 	bl	8006b78 <__retarget_lock_acquire_recursive>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	071b      	lsls	r3, r3, #28
 8006432:	d501      	bpl.n	8006438 <_vfiprintf_r+0x3c>
 8006434:	692b      	ldr	r3, [r5, #16]
 8006436:	b9eb      	cbnz	r3, 8006474 <_vfiprintf_r+0x78>
 8006438:	4629      	mov	r1, r5
 800643a:	4630      	mov	r0, r6
 800643c:	f000 f96e 	bl	800671c <__swsetup_r>
 8006440:	b1c0      	cbz	r0, 8006474 <_vfiprintf_r+0x78>
 8006442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006444:	07dc      	lsls	r4, r3, #31
 8006446:	d50e      	bpl.n	8006466 <_vfiprintf_r+0x6a>
 8006448:	f04f 30ff 	mov.w	r0, #4294967295
 800644c:	b01d      	add	sp, #116	; 0x74
 800644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006452:	4b7b      	ldr	r3, [pc, #492]	; (8006640 <_vfiprintf_r+0x244>)
 8006454:	429d      	cmp	r5, r3
 8006456:	d101      	bne.n	800645c <_vfiprintf_r+0x60>
 8006458:	68b5      	ldr	r5, [r6, #8]
 800645a:	e7df      	b.n	800641c <_vfiprintf_r+0x20>
 800645c:	4b79      	ldr	r3, [pc, #484]	; (8006644 <_vfiprintf_r+0x248>)
 800645e:	429d      	cmp	r5, r3
 8006460:	bf08      	it	eq
 8006462:	68f5      	ldreq	r5, [r6, #12]
 8006464:	e7da      	b.n	800641c <_vfiprintf_r+0x20>
 8006466:	89ab      	ldrh	r3, [r5, #12]
 8006468:	0598      	lsls	r0, r3, #22
 800646a:	d4ed      	bmi.n	8006448 <_vfiprintf_r+0x4c>
 800646c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800646e:	f000 fb84 	bl	8006b7a <__retarget_lock_release_recursive>
 8006472:	e7e9      	b.n	8006448 <_vfiprintf_r+0x4c>
 8006474:	2300      	movs	r3, #0
 8006476:	9309      	str	r3, [sp, #36]	; 0x24
 8006478:	2320      	movs	r3, #32
 800647a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800647e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006482:	2330      	movs	r3, #48	; 0x30
 8006484:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006648 <_vfiprintf_r+0x24c>
 8006488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800648c:	f04f 0901 	mov.w	r9, #1
 8006490:	4623      	mov	r3, r4
 8006492:	469a      	mov	sl, r3
 8006494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006498:	b10a      	cbz	r2, 800649e <_vfiprintf_r+0xa2>
 800649a:	2a25      	cmp	r2, #37	; 0x25
 800649c:	d1f9      	bne.n	8006492 <_vfiprintf_r+0x96>
 800649e:	ebba 0b04 	subs.w	fp, sl, r4
 80064a2:	d00b      	beq.n	80064bc <_vfiprintf_r+0xc0>
 80064a4:	465b      	mov	r3, fp
 80064a6:	4622      	mov	r2, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7ff ff93 	bl	80063d6 <__sfputs_r>
 80064b0:	3001      	adds	r0, #1
 80064b2:	f000 80aa 	beq.w	800660a <_vfiprintf_r+0x20e>
 80064b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b8:	445a      	add	r2, fp
 80064ba:	9209      	str	r2, [sp, #36]	; 0x24
 80064bc:	f89a 3000 	ldrb.w	r3, [sl]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80a2 	beq.w	800660a <_vfiprintf_r+0x20e>
 80064c6:	2300      	movs	r3, #0
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295
 80064cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d0:	f10a 0a01 	add.w	sl, sl, #1
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	9307      	str	r3, [sp, #28]
 80064d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064dc:	931a      	str	r3, [sp, #104]	; 0x68
 80064de:	4654      	mov	r4, sl
 80064e0:	2205      	movs	r2, #5
 80064e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e6:	4858      	ldr	r0, [pc, #352]	; (8006648 <_vfiprintf_r+0x24c>)
 80064e8:	f7f9 fe9a 	bl	8000220 <memchr>
 80064ec:	9a04      	ldr	r2, [sp, #16]
 80064ee:	b9d8      	cbnz	r0, 8006528 <_vfiprintf_r+0x12c>
 80064f0:	06d1      	lsls	r1, r2, #27
 80064f2:	bf44      	itt	mi
 80064f4:	2320      	movmi	r3, #32
 80064f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064fa:	0713      	lsls	r3, r2, #28
 80064fc:	bf44      	itt	mi
 80064fe:	232b      	movmi	r3, #43	; 0x2b
 8006500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006504:	f89a 3000 	ldrb.w	r3, [sl]
 8006508:	2b2a      	cmp	r3, #42	; 0x2a
 800650a:	d015      	beq.n	8006538 <_vfiprintf_r+0x13c>
 800650c:	9a07      	ldr	r2, [sp, #28]
 800650e:	4654      	mov	r4, sl
 8006510:	2000      	movs	r0, #0
 8006512:	f04f 0c0a 	mov.w	ip, #10
 8006516:	4621      	mov	r1, r4
 8006518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800651c:	3b30      	subs	r3, #48	; 0x30
 800651e:	2b09      	cmp	r3, #9
 8006520:	d94e      	bls.n	80065c0 <_vfiprintf_r+0x1c4>
 8006522:	b1b0      	cbz	r0, 8006552 <_vfiprintf_r+0x156>
 8006524:	9207      	str	r2, [sp, #28]
 8006526:	e014      	b.n	8006552 <_vfiprintf_r+0x156>
 8006528:	eba0 0308 	sub.w	r3, r0, r8
 800652c:	fa09 f303 	lsl.w	r3, r9, r3
 8006530:	4313      	orrs	r3, r2
 8006532:	9304      	str	r3, [sp, #16]
 8006534:	46a2      	mov	sl, r4
 8006536:	e7d2      	b.n	80064de <_vfiprintf_r+0xe2>
 8006538:	9b03      	ldr	r3, [sp, #12]
 800653a:	1d19      	adds	r1, r3, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	9103      	str	r1, [sp, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	bfbb      	ittet	lt
 8006544:	425b      	neglt	r3, r3
 8006546:	f042 0202 	orrlt.w	r2, r2, #2
 800654a:	9307      	strge	r3, [sp, #28]
 800654c:	9307      	strlt	r3, [sp, #28]
 800654e:	bfb8      	it	lt
 8006550:	9204      	strlt	r2, [sp, #16]
 8006552:	7823      	ldrb	r3, [r4, #0]
 8006554:	2b2e      	cmp	r3, #46	; 0x2e
 8006556:	d10c      	bne.n	8006572 <_vfiprintf_r+0x176>
 8006558:	7863      	ldrb	r3, [r4, #1]
 800655a:	2b2a      	cmp	r3, #42	; 0x2a
 800655c:	d135      	bne.n	80065ca <_vfiprintf_r+0x1ce>
 800655e:	9b03      	ldr	r3, [sp, #12]
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	9203      	str	r2, [sp, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfb8      	it	lt
 800656a:	f04f 33ff 	movlt.w	r3, #4294967295
 800656e:	3402      	adds	r4, #2
 8006570:	9305      	str	r3, [sp, #20]
 8006572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006658 <_vfiprintf_r+0x25c>
 8006576:	7821      	ldrb	r1, [r4, #0]
 8006578:	2203      	movs	r2, #3
 800657a:	4650      	mov	r0, sl
 800657c:	f7f9 fe50 	bl	8000220 <memchr>
 8006580:	b140      	cbz	r0, 8006594 <_vfiprintf_r+0x198>
 8006582:	2340      	movs	r3, #64	; 0x40
 8006584:	eba0 000a 	sub.w	r0, r0, sl
 8006588:	fa03 f000 	lsl.w	r0, r3, r0
 800658c:	9b04      	ldr	r3, [sp, #16]
 800658e:	4303      	orrs	r3, r0
 8006590:	3401      	adds	r4, #1
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006598:	482c      	ldr	r0, [pc, #176]	; (800664c <_vfiprintf_r+0x250>)
 800659a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800659e:	2206      	movs	r2, #6
 80065a0:	f7f9 fe3e 	bl	8000220 <memchr>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d03f      	beq.n	8006628 <_vfiprintf_r+0x22c>
 80065a8:	4b29      	ldr	r3, [pc, #164]	; (8006650 <_vfiprintf_r+0x254>)
 80065aa:	bb1b      	cbnz	r3, 80065f4 <_vfiprintf_r+0x1f8>
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	3307      	adds	r3, #7
 80065b0:	f023 0307 	bic.w	r3, r3, #7
 80065b4:	3308      	adds	r3, #8
 80065b6:	9303      	str	r3, [sp, #12]
 80065b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ba:	443b      	add	r3, r7
 80065bc:	9309      	str	r3, [sp, #36]	; 0x24
 80065be:	e767      	b.n	8006490 <_vfiprintf_r+0x94>
 80065c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c4:	460c      	mov	r4, r1
 80065c6:	2001      	movs	r0, #1
 80065c8:	e7a5      	b.n	8006516 <_vfiprintf_r+0x11a>
 80065ca:	2300      	movs	r3, #0
 80065cc:	3401      	adds	r4, #1
 80065ce:	9305      	str	r3, [sp, #20]
 80065d0:	4619      	mov	r1, r3
 80065d2:	f04f 0c0a 	mov.w	ip, #10
 80065d6:	4620      	mov	r0, r4
 80065d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065dc:	3a30      	subs	r2, #48	; 0x30
 80065de:	2a09      	cmp	r2, #9
 80065e0:	d903      	bls.n	80065ea <_vfiprintf_r+0x1ee>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0c5      	beq.n	8006572 <_vfiprintf_r+0x176>
 80065e6:	9105      	str	r1, [sp, #20]
 80065e8:	e7c3      	b.n	8006572 <_vfiprintf_r+0x176>
 80065ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ee:	4604      	mov	r4, r0
 80065f0:	2301      	movs	r3, #1
 80065f2:	e7f0      	b.n	80065d6 <_vfiprintf_r+0x1da>
 80065f4:	ab03      	add	r3, sp, #12
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	462a      	mov	r2, r5
 80065fa:	4b16      	ldr	r3, [pc, #88]	; (8006654 <_vfiprintf_r+0x258>)
 80065fc:	a904      	add	r1, sp, #16
 80065fe:	4630      	mov	r0, r6
 8006600:	f7fd ffe0 	bl	80045c4 <_printf_float>
 8006604:	4607      	mov	r7, r0
 8006606:	1c78      	adds	r0, r7, #1
 8006608:	d1d6      	bne.n	80065b8 <_vfiprintf_r+0x1bc>
 800660a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800660c:	07d9      	lsls	r1, r3, #31
 800660e:	d405      	bmi.n	800661c <_vfiprintf_r+0x220>
 8006610:	89ab      	ldrh	r3, [r5, #12]
 8006612:	059a      	lsls	r2, r3, #22
 8006614:	d402      	bmi.n	800661c <_vfiprintf_r+0x220>
 8006616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006618:	f000 faaf 	bl	8006b7a <__retarget_lock_release_recursive>
 800661c:	89ab      	ldrh	r3, [r5, #12]
 800661e:	065b      	lsls	r3, r3, #25
 8006620:	f53f af12 	bmi.w	8006448 <_vfiprintf_r+0x4c>
 8006624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006626:	e711      	b.n	800644c <_vfiprintf_r+0x50>
 8006628:	ab03      	add	r3, sp, #12
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	462a      	mov	r2, r5
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <_vfiprintf_r+0x258>)
 8006630:	a904      	add	r1, sp, #16
 8006632:	4630      	mov	r0, r6
 8006634:	f7fe fa6a 	bl	8004b0c <_printf_i>
 8006638:	e7e4      	b.n	8006604 <_vfiprintf_r+0x208>
 800663a:	bf00      	nop
 800663c:	08007254 	.word	0x08007254
 8006640:	08007274 	.word	0x08007274
 8006644:	08007234 	.word	0x08007234
 8006648:	08007122 	.word	0x08007122
 800664c:	0800712c 	.word	0x0800712c
 8006650:	080045c5 	.word	0x080045c5
 8006654:	080063d7 	.word	0x080063d7
 8006658:	08007128 	.word	0x08007128

0800665c <__swbuf_r>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	460e      	mov	r6, r1
 8006660:	4614      	mov	r4, r2
 8006662:	4605      	mov	r5, r0
 8006664:	b118      	cbz	r0, 800666e <__swbuf_r+0x12>
 8006666:	6983      	ldr	r3, [r0, #24]
 8006668:	b90b      	cbnz	r3, 800666e <__swbuf_r+0x12>
 800666a:	f000 f9e7 	bl	8006a3c <__sinit>
 800666e:	4b21      	ldr	r3, [pc, #132]	; (80066f4 <__swbuf_r+0x98>)
 8006670:	429c      	cmp	r4, r3
 8006672:	d12b      	bne.n	80066cc <__swbuf_r+0x70>
 8006674:	686c      	ldr	r4, [r5, #4]
 8006676:	69a3      	ldr	r3, [r4, #24]
 8006678:	60a3      	str	r3, [r4, #8]
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	071a      	lsls	r2, r3, #28
 800667e:	d52f      	bpl.n	80066e0 <__swbuf_r+0x84>
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	b36b      	cbz	r3, 80066e0 <__swbuf_r+0x84>
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	6820      	ldr	r0, [r4, #0]
 8006688:	1ac0      	subs	r0, r0, r3
 800668a:	6963      	ldr	r3, [r4, #20]
 800668c:	b2f6      	uxtb	r6, r6
 800668e:	4283      	cmp	r3, r0
 8006690:	4637      	mov	r7, r6
 8006692:	dc04      	bgt.n	800669e <__swbuf_r+0x42>
 8006694:	4621      	mov	r1, r4
 8006696:	4628      	mov	r0, r5
 8006698:	f000 f93c 	bl	8006914 <_fflush_r>
 800669c:	bb30      	cbnz	r0, 80066ec <__swbuf_r+0x90>
 800669e:	68a3      	ldr	r3, [r4, #8]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	60a3      	str	r3, [r4, #8]
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	6022      	str	r2, [r4, #0]
 80066aa:	701e      	strb	r6, [r3, #0]
 80066ac:	6963      	ldr	r3, [r4, #20]
 80066ae:	3001      	adds	r0, #1
 80066b0:	4283      	cmp	r3, r0
 80066b2:	d004      	beq.n	80066be <__swbuf_r+0x62>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	07db      	lsls	r3, r3, #31
 80066b8:	d506      	bpl.n	80066c8 <__swbuf_r+0x6c>
 80066ba:	2e0a      	cmp	r6, #10
 80066bc:	d104      	bne.n	80066c8 <__swbuf_r+0x6c>
 80066be:	4621      	mov	r1, r4
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 f927 	bl	8006914 <_fflush_r>
 80066c6:	b988      	cbnz	r0, 80066ec <__swbuf_r+0x90>
 80066c8:	4638      	mov	r0, r7
 80066ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <__swbuf_r+0x9c>)
 80066ce:	429c      	cmp	r4, r3
 80066d0:	d101      	bne.n	80066d6 <__swbuf_r+0x7a>
 80066d2:	68ac      	ldr	r4, [r5, #8]
 80066d4:	e7cf      	b.n	8006676 <__swbuf_r+0x1a>
 80066d6:	4b09      	ldr	r3, [pc, #36]	; (80066fc <__swbuf_r+0xa0>)
 80066d8:	429c      	cmp	r4, r3
 80066da:	bf08      	it	eq
 80066dc:	68ec      	ldreq	r4, [r5, #12]
 80066de:	e7ca      	b.n	8006676 <__swbuf_r+0x1a>
 80066e0:	4621      	mov	r1, r4
 80066e2:	4628      	mov	r0, r5
 80066e4:	f000 f81a 	bl	800671c <__swsetup_r>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d0cb      	beq.n	8006684 <__swbuf_r+0x28>
 80066ec:	f04f 37ff 	mov.w	r7, #4294967295
 80066f0:	e7ea      	b.n	80066c8 <__swbuf_r+0x6c>
 80066f2:	bf00      	nop
 80066f4:	08007254 	.word	0x08007254
 80066f8:	08007274 	.word	0x08007274
 80066fc:	08007234 	.word	0x08007234

08006700 <__ascii_wctomb>:
 8006700:	b149      	cbz	r1, 8006716 <__ascii_wctomb+0x16>
 8006702:	2aff      	cmp	r2, #255	; 0xff
 8006704:	bf85      	ittet	hi
 8006706:	238a      	movhi	r3, #138	; 0x8a
 8006708:	6003      	strhi	r3, [r0, #0]
 800670a:	700a      	strbls	r2, [r1, #0]
 800670c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006710:	bf98      	it	ls
 8006712:	2001      	movls	r0, #1
 8006714:	4770      	bx	lr
 8006716:	4608      	mov	r0, r1
 8006718:	4770      	bx	lr
	...

0800671c <__swsetup_r>:
 800671c:	4b32      	ldr	r3, [pc, #200]	; (80067e8 <__swsetup_r+0xcc>)
 800671e:	b570      	push	{r4, r5, r6, lr}
 8006720:	681d      	ldr	r5, [r3, #0]
 8006722:	4606      	mov	r6, r0
 8006724:	460c      	mov	r4, r1
 8006726:	b125      	cbz	r5, 8006732 <__swsetup_r+0x16>
 8006728:	69ab      	ldr	r3, [r5, #24]
 800672a:	b913      	cbnz	r3, 8006732 <__swsetup_r+0x16>
 800672c:	4628      	mov	r0, r5
 800672e:	f000 f985 	bl	8006a3c <__sinit>
 8006732:	4b2e      	ldr	r3, [pc, #184]	; (80067ec <__swsetup_r+0xd0>)
 8006734:	429c      	cmp	r4, r3
 8006736:	d10f      	bne.n	8006758 <__swsetup_r+0x3c>
 8006738:	686c      	ldr	r4, [r5, #4]
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006740:	0719      	lsls	r1, r3, #28
 8006742:	d42c      	bmi.n	800679e <__swsetup_r+0x82>
 8006744:	06dd      	lsls	r5, r3, #27
 8006746:	d411      	bmi.n	800676c <__swsetup_r+0x50>
 8006748:	2309      	movs	r3, #9
 800674a:	6033      	str	r3, [r6, #0]
 800674c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	f04f 30ff 	mov.w	r0, #4294967295
 8006756:	e03e      	b.n	80067d6 <__swsetup_r+0xba>
 8006758:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <__swsetup_r+0xd4>)
 800675a:	429c      	cmp	r4, r3
 800675c:	d101      	bne.n	8006762 <__swsetup_r+0x46>
 800675e:	68ac      	ldr	r4, [r5, #8]
 8006760:	e7eb      	b.n	800673a <__swsetup_r+0x1e>
 8006762:	4b24      	ldr	r3, [pc, #144]	; (80067f4 <__swsetup_r+0xd8>)
 8006764:	429c      	cmp	r4, r3
 8006766:	bf08      	it	eq
 8006768:	68ec      	ldreq	r4, [r5, #12]
 800676a:	e7e6      	b.n	800673a <__swsetup_r+0x1e>
 800676c:	0758      	lsls	r0, r3, #29
 800676e:	d512      	bpl.n	8006796 <__swsetup_r+0x7a>
 8006770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006772:	b141      	cbz	r1, 8006786 <__swsetup_r+0x6a>
 8006774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006778:	4299      	cmp	r1, r3
 800677a:	d002      	beq.n	8006782 <__swsetup_r+0x66>
 800677c:	4630      	mov	r0, r6
 800677e:	f7ff fd0b 	bl	8006198 <_free_r>
 8006782:	2300      	movs	r3, #0
 8006784:	6363      	str	r3, [r4, #52]	; 0x34
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	2300      	movs	r3, #0
 8006790:	6063      	str	r3, [r4, #4]
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f043 0308 	orr.w	r3, r3, #8
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	b94b      	cbnz	r3, 80067b6 <__swsetup_r+0x9a>
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ac:	d003      	beq.n	80067b6 <__swsetup_r+0x9a>
 80067ae:	4621      	mov	r1, r4
 80067b0:	4630      	mov	r0, r6
 80067b2:	f000 fa07 	bl	8006bc4 <__smakebuf_r>
 80067b6:	89a0      	ldrh	r0, [r4, #12]
 80067b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067bc:	f010 0301 	ands.w	r3, r0, #1
 80067c0:	d00a      	beq.n	80067d8 <__swsetup_r+0xbc>
 80067c2:	2300      	movs	r3, #0
 80067c4:	60a3      	str	r3, [r4, #8]
 80067c6:	6963      	ldr	r3, [r4, #20]
 80067c8:	425b      	negs	r3, r3
 80067ca:	61a3      	str	r3, [r4, #24]
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	b943      	cbnz	r3, 80067e2 <__swsetup_r+0xc6>
 80067d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067d4:	d1ba      	bne.n	800674c <__swsetup_r+0x30>
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	0781      	lsls	r1, r0, #30
 80067da:	bf58      	it	pl
 80067dc:	6963      	ldrpl	r3, [r4, #20]
 80067de:	60a3      	str	r3, [r4, #8]
 80067e0:	e7f4      	b.n	80067cc <__swsetup_r+0xb0>
 80067e2:	2000      	movs	r0, #0
 80067e4:	e7f7      	b.n	80067d6 <__swsetup_r+0xba>
 80067e6:	bf00      	nop
 80067e8:	2000000c 	.word	0x2000000c
 80067ec:	08007254 	.word	0x08007254
 80067f0:	08007274 	.word	0x08007274
 80067f4:	08007234 	.word	0x08007234

080067f8 <abort>:
 80067f8:	b508      	push	{r3, lr}
 80067fa:	2006      	movs	r0, #6
 80067fc:	f000 fa4a 	bl	8006c94 <raise>
 8006800:	2001      	movs	r0, #1
 8006802:	f7fb f845 	bl	8001890 <_exit>
	...

08006808 <__sflush_r>:
 8006808:	898a      	ldrh	r2, [r1, #12]
 800680a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800680e:	4605      	mov	r5, r0
 8006810:	0710      	lsls	r0, r2, #28
 8006812:	460c      	mov	r4, r1
 8006814:	d458      	bmi.n	80068c8 <__sflush_r+0xc0>
 8006816:	684b      	ldr	r3, [r1, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	dc05      	bgt.n	8006828 <__sflush_r+0x20>
 800681c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	dc02      	bgt.n	8006828 <__sflush_r+0x20>
 8006822:	2000      	movs	r0, #0
 8006824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800682a:	2e00      	cmp	r6, #0
 800682c:	d0f9      	beq.n	8006822 <__sflush_r+0x1a>
 800682e:	2300      	movs	r3, #0
 8006830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006834:	682f      	ldr	r7, [r5, #0]
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	d032      	beq.n	80068a0 <__sflush_r+0x98>
 800683a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	075a      	lsls	r2, r3, #29
 8006840:	d505      	bpl.n	800684e <__sflush_r+0x46>
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	1ac0      	subs	r0, r0, r3
 8006846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006848:	b10b      	cbz	r3, 800684e <__sflush_r+0x46>
 800684a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800684c:	1ac0      	subs	r0, r0, r3
 800684e:	2300      	movs	r3, #0
 8006850:	4602      	mov	r2, r0
 8006852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006854:	6a21      	ldr	r1, [r4, #32]
 8006856:	4628      	mov	r0, r5
 8006858:	47b0      	blx	r6
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	d106      	bne.n	800686e <__sflush_r+0x66>
 8006860:	6829      	ldr	r1, [r5, #0]
 8006862:	291d      	cmp	r1, #29
 8006864:	d82c      	bhi.n	80068c0 <__sflush_r+0xb8>
 8006866:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <__sflush_r+0x108>)
 8006868:	40ca      	lsrs	r2, r1
 800686a:	07d6      	lsls	r6, r2, #31
 800686c:	d528      	bpl.n	80068c0 <__sflush_r+0xb8>
 800686e:	2200      	movs	r2, #0
 8006870:	6062      	str	r2, [r4, #4]
 8006872:	04d9      	lsls	r1, r3, #19
 8006874:	6922      	ldr	r2, [r4, #16]
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	d504      	bpl.n	8006884 <__sflush_r+0x7c>
 800687a:	1c42      	adds	r2, r0, #1
 800687c:	d101      	bne.n	8006882 <__sflush_r+0x7a>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	b903      	cbnz	r3, 8006884 <__sflush_r+0x7c>
 8006882:	6560      	str	r0, [r4, #84]	; 0x54
 8006884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006886:	602f      	str	r7, [r5, #0]
 8006888:	2900      	cmp	r1, #0
 800688a:	d0ca      	beq.n	8006822 <__sflush_r+0x1a>
 800688c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006890:	4299      	cmp	r1, r3
 8006892:	d002      	beq.n	800689a <__sflush_r+0x92>
 8006894:	4628      	mov	r0, r5
 8006896:	f7ff fc7f 	bl	8006198 <_free_r>
 800689a:	2000      	movs	r0, #0
 800689c:	6360      	str	r0, [r4, #52]	; 0x34
 800689e:	e7c1      	b.n	8006824 <__sflush_r+0x1c>
 80068a0:	6a21      	ldr	r1, [r4, #32]
 80068a2:	2301      	movs	r3, #1
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b0      	blx	r6
 80068a8:	1c41      	adds	r1, r0, #1
 80068aa:	d1c7      	bne.n	800683c <__sflush_r+0x34>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0c4      	beq.n	800683c <__sflush_r+0x34>
 80068b2:	2b1d      	cmp	r3, #29
 80068b4:	d001      	beq.n	80068ba <__sflush_r+0xb2>
 80068b6:	2b16      	cmp	r3, #22
 80068b8:	d101      	bne.n	80068be <__sflush_r+0xb6>
 80068ba:	602f      	str	r7, [r5, #0]
 80068bc:	e7b1      	b.n	8006822 <__sflush_r+0x1a>
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	e7ad      	b.n	8006824 <__sflush_r+0x1c>
 80068c8:	690f      	ldr	r7, [r1, #16]
 80068ca:	2f00      	cmp	r7, #0
 80068cc:	d0a9      	beq.n	8006822 <__sflush_r+0x1a>
 80068ce:	0793      	lsls	r3, r2, #30
 80068d0:	680e      	ldr	r6, [r1, #0]
 80068d2:	bf08      	it	eq
 80068d4:	694b      	ldreq	r3, [r1, #20]
 80068d6:	600f      	str	r7, [r1, #0]
 80068d8:	bf18      	it	ne
 80068da:	2300      	movne	r3, #0
 80068dc:	eba6 0807 	sub.w	r8, r6, r7
 80068e0:	608b      	str	r3, [r1, #8]
 80068e2:	f1b8 0f00 	cmp.w	r8, #0
 80068e6:	dd9c      	ble.n	8006822 <__sflush_r+0x1a>
 80068e8:	6a21      	ldr	r1, [r4, #32]
 80068ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068ec:	4643      	mov	r3, r8
 80068ee:	463a      	mov	r2, r7
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b0      	blx	r6
 80068f4:	2800      	cmp	r0, #0
 80068f6:	dc06      	bgt.n	8006906 <__sflush_r+0xfe>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068fe:	81a3      	strh	r3, [r4, #12]
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	e78e      	b.n	8006824 <__sflush_r+0x1c>
 8006906:	4407      	add	r7, r0
 8006908:	eba8 0800 	sub.w	r8, r8, r0
 800690c:	e7e9      	b.n	80068e2 <__sflush_r+0xda>
 800690e:	bf00      	nop
 8006910:	20400001 	.word	0x20400001

08006914 <_fflush_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	690b      	ldr	r3, [r1, #16]
 8006918:	4605      	mov	r5, r0
 800691a:	460c      	mov	r4, r1
 800691c:	b913      	cbnz	r3, 8006924 <_fflush_r+0x10>
 800691e:	2500      	movs	r5, #0
 8006920:	4628      	mov	r0, r5
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	b118      	cbz	r0, 800692e <_fflush_r+0x1a>
 8006926:	6983      	ldr	r3, [r0, #24]
 8006928:	b90b      	cbnz	r3, 800692e <_fflush_r+0x1a>
 800692a:	f000 f887 	bl	8006a3c <__sinit>
 800692e:	4b14      	ldr	r3, [pc, #80]	; (8006980 <_fflush_r+0x6c>)
 8006930:	429c      	cmp	r4, r3
 8006932:	d11b      	bne.n	800696c <_fflush_r+0x58>
 8006934:	686c      	ldr	r4, [r5, #4]
 8006936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0ef      	beq.n	800691e <_fflush_r+0xa>
 800693e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006940:	07d0      	lsls	r0, r2, #31
 8006942:	d404      	bmi.n	800694e <_fflush_r+0x3a>
 8006944:	0599      	lsls	r1, r3, #22
 8006946:	d402      	bmi.n	800694e <_fflush_r+0x3a>
 8006948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800694a:	f000 f915 	bl	8006b78 <__retarget_lock_acquire_recursive>
 800694e:	4628      	mov	r0, r5
 8006950:	4621      	mov	r1, r4
 8006952:	f7ff ff59 	bl	8006808 <__sflush_r>
 8006956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006958:	07da      	lsls	r2, r3, #31
 800695a:	4605      	mov	r5, r0
 800695c:	d4e0      	bmi.n	8006920 <_fflush_r+0xc>
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	059b      	lsls	r3, r3, #22
 8006962:	d4dd      	bmi.n	8006920 <_fflush_r+0xc>
 8006964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006966:	f000 f908 	bl	8006b7a <__retarget_lock_release_recursive>
 800696a:	e7d9      	b.n	8006920 <_fflush_r+0xc>
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <_fflush_r+0x70>)
 800696e:	429c      	cmp	r4, r3
 8006970:	d101      	bne.n	8006976 <_fflush_r+0x62>
 8006972:	68ac      	ldr	r4, [r5, #8]
 8006974:	e7df      	b.n	8006936 <_fflush_r+0x22>
 8006976:	4b04      	ldr	r3, [pc, #16]	; (8006988 <_fflush_r+0x74>)
 8006978:	429c      	cmp	r4, r3
 800697a:	bf08      	it	eq
 800697c:	68ec      	ldreq	r4, [r5, #12]
 800697e:	e7da      	b.n	8006936 <_fflush_r+0x22>
 8006980:	08007254 	.word	0x08007254
 8006984:	08007274 	.word	0x08007274
 8006988:	08007234 	.word	0x08007234

0800698c <std>:
 800698c:	2300      	movs	r3, #0
 800698e:	b510      	push	{r4, lr}
 8006990:	4604      	mov	r4, r0
 8006992:	e9c0 3300 	strd	r3, r3, [r0]
 8006996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800699a:	6083      	str	r3, [r0, #8]
 800699c:	8181      	strh	r1, [r0, #12]
 800699e:	6643      	str	r3, [r0, #100]	; 0x64
 80069a0:	81c2      	strh	r2, [r0, #14]
 80069a2:	6183      	str	r3, [r0, #24]
 80069a4:	4619      	mov	r1, r3
 80069a6:	2208      	movs	r2, #8
 80069a8:	305c      	adds	r0, #92	; 0x5c
 80069aa:	f7fd fd63 	bl	8004474 <memset>
 80069ae:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <std+0x38>)
 80069b0:	6263      	str	r3, [r4, #36]	; 0x24
 80069b2:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <std+0x3c>)
 80069b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <std+0x40>)
 80069b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <std+0x44>)
 80069bc:	6224      	str	r4, [r4, #32]
 80069be:	6323      	str	r3, [r4, #48]	; 0x30
 80069c0:	bd10      	pop	{r4, pc}
 80069c2:	bf00      	nop
 80069c4:	08006ccd 	.word	0x08006ccd
 80069c8:	08006cef 	.word	0x08006cef
 80069cc:	08006d27 	.word	0x08006d27
 80069d0:	08006d4b 	.word	0x08006d4b

080069d4 <_cleanup_r>:
 80069d4:	4901      	ldr	r1, [pc, #4]	; (80069dc <_cleanup_r+0x8>)
 80069d6:	f000 b8af 	b.w	8006b38 <_fwalk_reent>
 80069da:	bf00      	nop
 80069dc:	08006915 	.word	0x08006915

080069e0 <__sfmoreglue>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	1e4a      	subs	r2, r1, #1
 80069e4:	2568      	movs	r5, #104	; 0x68
 80069e6:	4355      	muls	r5, r2
 80069e8:	460e      	mov	r6, r1
 80069ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069ee:	f7ff fc23 	bl	8006238 <_malloc_r>
 80069f2:	4604      	mov	r4, r0
 80069f4:	b140      	cbz	r0, 8006a08 <__sfmoreglue+0x28>
 80069f6:	2100      	movs	r1, #0
 80069f8:	e9c0 1600 	strd	r1, r6, [r0]
 80069fc:	300c      	adds	r0, #12
 80069fe:	60a0      	str	r0, [r4, #8]
 8006a00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a04:	f7fd fd36 	bl	8004474 <memset>
 8006a08:	4620      	mov	r0, r4
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}

08006a0c <__sfp_lock_acquire>:
 8006a0c:	4801      	ldr	r0, [pc, #4]	; (8006a14 <__sfp_lock_acquire+0x8>)
 8006a0e:	f000 b8b3 	b.w	8006b78 <__retarget_lock_acquire_recursive>
 8006a12:	bf00      	nop
 8006a14:	200002ac 	.word	0x200002ac

08006a18 <__sfp_lock_release>:
 8006a18:	4801      	ldr	r0, [pc, #4]	; (8006a20 <__sfp_lock_release+0x8>)
 8006a1a:	f000 b8ae 	b.w	8006b7a <__retarget_lock_release_recursive>
 8006a1e:	bf00      	nop
 8006a20:	200002ac 	.word	0x200002ac

08006a24 <__sinit_lock_acquire>:
 8006a24:	4801      	ldr	r0, [pc, #4]	; (8006a2c <__sinit_lock_acquire+0x8>)
 8006a26:	f000 b8a7 	b.w	8006b78 <__retarget_lock_acquire_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	200002a7 	.word	0x200002a7

08006a30 <__sinit_lock_release>:
 8006a30:	4801      	ldr	r0, [pc, #4]	; (8006a38 <__sinit_lock_release+0x8>)
 8006a32:	f000 b8a2 	b.w	8006b7a <__retarget_lock_release_recursive>
 8006a36:	bf00      	nop
 8006a38:	200002a7 	.word	0x200002a7

08006a3c <__sinit>:
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	4604      	mov	r4, r0
 8006a40:	f7ff fff0 	bl	8006a24 <__sinit_lock_acquire>
 8006a44:	69a3      	ldr	r3, [r4, #24]
 8006a46:	b11b      	cbz	r3, 8006a50 <__sinit+0x14>
 8006a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a4c:	f7ff bff0 	b.w	8006a30 <__sinit_lock_release>
 8006a50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a54:	6523      	str	r3, [r4, #80]	; 0x50
 8006a56:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <__sinit+0x68>)
 8006a58:	4a13      	ldr	r2, [pc, #76]	; (8006aa8 <__sinit+0x6c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a5e:	42a3      	cmp	r3, r4
 8006a60:	bf04      	itt	eq
 8006a62:	2301      	moveq	r3, #1
 8006a64:	61a3      	streq	r3, [r4, #24]
 8006a66:	4620      	mov	r0, r4
 8006a68:	f000 f820 	bl	8006aac <__sfp>
 8006a6c:	6060      	str	r0, [r4, #4]
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 f81c 	bl	8006aac <__sfp>
 8006a74:	60a0      	str	r0, [r4, #8]
 8006a76:	4620      	mov	r0, r4
 8006a78:	f000 f818 	bl	8006aac <__sfp>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	60e0      	str	r0, [r4, #12]
 8006a80:	2104      	movs	r1, #4
 8006a82:	6860      	ldr	r0, [r4, #4]
 8006a84:	f7ff ff82 	bl	800698c <std>
 8006a88:	68a0      	ldr	r0, [r4, #8]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	2109      	movs	r1, #9
 8006a8e:	f7ff ff7d 	bl	800698c <std>
 8006a92:	68e0      	ldr	r0, [r4, #12]
 8006a94:	2202      	movs	r2, #2
 8006a96:	2112      	movs	r1, #18
 8006a98:	f7ff ff78 	bl	800698c <std>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	61a3      	str	r3, [r4, #24]
 8006aa0:	e7d2      	b.n	8006a48 <__sinit+0xc>
 8006aa2:	bf00      	nop
 8006aa4:	08006eb0 	.word	0x08006eb0
 8006aa8:	080069d5 	.word	0x080069d5

08006aac <__sfp>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	4607      	mov	r7, r0
 8006ab0:	f7ff ffac 	bl	8006a0c <__sfp_lock_acquire>
 8006ab4:	4b1e      	ldr	r3, [pc, #120]	; (8006b30 <__sfp+0x84>)
 8006ab6:	681e      	ldr	r6, [r3, #0]
 8006ab8:	69b3      	ldr	r3, [r6, #24]
 8006aba:	b913      	cbnz	r3, 8006ac2 <__sfp+0x16>
 8006abc:	4630      	mov	r0, r6
 8006abe:	f7ff ffbd 	bl	8006a3c <__sinit>
 8006ac2:	3648      	adds	r6, #72	; 0x48
 8006ac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	d503      	bpl.n	8006ad4 <__sfp+0x28>
 8006acc:	6833      	ldr	r3, [r6, #0]
 8006ace:	b30b      	cbz	r3, 8006b14 <__sfp+0x68>
 8006ad0:	6836      	ldr	r6, [r6, #0]
 8006ad2:	e7f7      	b.n	8006ac4 <__sfp+0x18>
 8006ad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ad8:	b9d5      	cbnz	r5, 8006b10 <__sfp+0x64>
 8006ada:	4b16      	ldr	r3, [pc, #88]	; (8006b34 <__sfp+0x88>)
 8006adc:	60e3      	str	r3, [r4, #12]
 8006ade:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ae2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ae4:	f000 f847 	bl	8006b76 <__retarget_lock_init_recursive>
 8006ae8:	f7ff ff96 	bl	8006a18 <__sfp_lock_release>
 8006aec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006af0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006af4:	6025      	str	r5, [r4, #0]
 8006af6:	61a5      	str	r5, [r4, #24]
 8006af8:	2208      	movs	r2, #8
 8006afa:	4629      	mov	r1, r5
 8006afc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b00:	f7fd fcb8 	bl	8004474 <memset>
 8006b04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b10:	3468      	adds	r4, #104	; 0x68
 8006b12:	e7d9      	b.n	8006ac8 <__sfp+0x1c>
 8006b14:	2104      	movs	r1, #4
 8006b16:	4638      	mov	r0, r7
 8006b18:	f7ff ff62 	bl	80069e0 <__sfmoreglue>
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	6030      	str	r0, [r6, #0]
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d1d5      	bne.n	8006ad0 <__sfp+0x24>
 8006b24:	f7ff ff78 	bl	8006a18 <__sfp_lock_release>
 8006b28:	230c      	movs	r3, #12
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	e7ee      	b.n	8006b0c <__sfp+0x60>
 8006b2e:	bf00      	nop
 8006b30:	08006eb0 	.word	0x08006eb0
 8006b34:	ffff0001 	.word	0xffff0001

08006b38 <_fwalk_reent>:
 8006b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	4688      	mov	r8, r1
 8006b40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b44:	2700      	movs	r7, #0
 8006b46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b4a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b4e:	d505      	bpl.n	8006b5c <_fwalk_reent+0x24>
 8006b50:	6824      	ldr	r4, [r4, #0]
 8006b52:	2c00      	cmp	r4, #0
 8006b54:	d1f7      	bne.n	8006b46 <_fwalk_reent+0xe>
 8006b56:	4638      	mov	r0, r7
 8006b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b5c:	89ab      	ldrh	r3, [r5, #12]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d907      	bls.n	8006b72 <_fwalk_reent+0x3a>
 8006b62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b66:	3301      	adds	r3, #1
 8006b68:	d003      	beq.n	8006b72 <_fwalk_reent+0x3a>
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	47c0      	blx	r8
 8006b70:	4307      	orrs	r7, r0
 8006b72:	3568      	adds	r5, #104	; 0x68
 8006b74:	e7e9      	b.n	8006b4a <_fwalk_reent+0x12>

08006b76 <__retarget_lock_init_recursive>:
 8006b76:	4770      	bx	lr

08006b78 <__retarget_lock_acquire_recursive>:
 8006b78:	4770      	bx	lr

08006b7a <__retarget_lock_release_recursive>:
 8006b7a:	4770      	bx	lr

08006b7c <__swhatbuf_r>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	460e      	mov	r6, r1
 8006b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b84:	2900      	cmp	r1, #0
 8006b86:	b096      	sub	sp, #88	; 0x58
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	da07      	bge.n	8006b9e <__swhatbuf_r+0x22>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	89b3      	ldrh	r3, [r6, #12]
 8006b94:	061a      	lsls	r2, r3, #24
 8006b96:	d410      	bmi.n	8006bba <__swhatbuf_r+0x3e>
 8006b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9c:	e00e      	b.n	8006bbc <__swhatbuf_r+0x40>
 8006b9e:	466a      	mov	r2, sp
 8006ba0:	f000 f8fa 	bl	8006d98 <_fstat_r>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	dbf2      	blt.n	8006b8e <__swhatbuf_r+0x12>
 8006ba8:	9a01      	ldr	r2, [sp, #4]
 8006baa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bb2:	425a      	negs	r2, r3
 8006bb4:	415a      	adcs	r2, r3
 8006bb6:	602a      	str	r2, [r5, #0]
 8006bb8:	e7ee      	b.n	8006b98 <__swhatbuf_r+0x1c>
 8006bba:	2340      	movs	r3, #64	; 0x40
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	b016      	add	sp, #88	; 0x58
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}

08006bc4 <__smakebuf_r>:
 8006bc4:	898b      	ldrh	r3, [r1, #12]
 8006bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bc8:	079d      	lsls	r5, r3, #30
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460c      	mov	r4, r1
 8006bce:	d507      	bpl.n	8006be0 <__smakebuf_r+0x1c>
 8006bd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	2301      	movs	r3, #1
 8006bda:	6163      	str	r3, [r4, #20]
 8006bdc:	b002      	add	sp, #8
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	ab01      	add	r3, sp, #4
 8006be2:	466a      	mov	r2, sp
 8006be4:	f7ff ffca 	bl	8006b7c <__swhatbuf_r>
 8006be8:	9900      	ldr	r1, [sp, #0]
 8006bea:	4605      	mov	r5, r0
 8006bec:	4630      	mov	r0, r6
 8006bee:	f7ff fb23 	bl	8006238 <_malloc_r>
 8006bf2:	b948      	cbnz	r0, 8006c08 <__smakebuf_r+0x44>
 8006bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf8:	059a      	lsls	r2, r3, #22
 8006bfa:	d4ef      	bmi.n	8006bdc <__smakebuf_r+0x18>
 8006bfc:	f023 0303 	bic.w	r3, r3, #3
 8006c00:	f043 0302 	orr.w	r3, r3, #2
 8006c04:	81a3      	strh	r3, [r4, #12]
 8006c06:	e7e3      	b.n	8006bd0 <__smakebuf_r+0xc>
 8006c08:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <__smakebuf_r+0x7c>)
 8006c0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	6020      	str	r0, [r4, #0]
 8006c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	9b00      	ldr	r3, [sp, #0]
 8006c18:	6163      	str	r3, [r4, #20]
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	6120      	str	r0, [r4, #16]
 8006c1e:	b15b      	cbz	r3, 8006c38 <__smakebuf_r+0x74>
 8006c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c24:	4630      	mov	r0, r6
 8006c26:	f000 f8c9 	bl	8006dbc <_isatty_r>
 8006c2a:	b128      	cbz	r0, 8006c38 <__smakebuf_r+0x74>
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	f023 0303 	bic.w	r3, r3, #3
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	81a3      	strh	r3, [r4, #12]
 8006c38:	89a0      	ldrh	r0, [r4, #12]
 8006c3a:	4305      	orrs	r5, r0
 8006c3c:	81a5      	strh	r5, [r4, #12]
 8006c3e:	e7cd      	b.n	8006bdc <__smakebuf_r+0x18>
 8006c40:	080069d5 	.word	0x080069d5

08006c44 <_raise_r>:
 8006c44:	291f      	cmp	r1, #31
 8006c46:	b538      	push	{r3, r4, r5, lr}
 8006c48:	4604      	mov	r4, r0
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	d904      	bls.n	8006c58 <_raise_r+0x14>
 8006c4e:	2316      	movs	r3, #22
 8006c50:	6003      	str	r3, [r0, #0]
 8006c52:	f04f 30ff 	mov.w	r0, #4294967295
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c5a:	b112      	cbz	r2, 8006c62 <_raise_r+0x1e>
 8006c5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c60:	b94b      	cbnz	r3, 8006c76 <_raise_r+0x32>
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 f830 	bl	8006cc8 <_getpid_r>
 8006c68:	462a      	mov	r2, r5
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c72:	f000 b817 	b.w	8006ca4 <_kill_r>
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d00a      	beq.n	8006c90 <_raise_r+0x4c>
 8006c7a:	1c59      	adds	r1, r3, #1
 8006c7c:	d103      	bne.n	8006c86 <_raise_r+0x42>
 8006c7e:	2316      	movs	r3, #22
 8006c80:	6003      	str	r3, [r0, #0]
 8006c82:	2001      	movs	r0, #1
 8006c84:	e7e7      	b.n	8006c56 <_raise_r+0x12>
 8006c86:	2400      	movs	r4, #0
 8006c88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	4798      	blx	r3
 8006c90:	2000      	movs	r0, #0
 8006c92:	e7e0      	b.n	8006c56 <_raise_r+0x12>

08006c94 <raise>:
 8006c94:	4b02      	ldr	r3, [pc, #8]	; (8006ca0 <raise+0xc>)
 8006c96:	4601      	mov	r1, r0
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	f7ff bfd3 	b.w	8006c44 <_raise_r>
 8006c9e:	bf00      	nop
 8006ca0:	2000000c 	.word	0x2000000c

08006ca4 <_kill_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d07      	ldr	r5, [pc, #28]	; (8006cc4 <_kill_r+0x20>)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	4611      	mov	r1, r2
 8006cb0:	602b      	str	r3, [r5, #0]
 8006cb2:	f7fa fddd 	bl	8001870 <_kill>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	d102      	bne.n	8006cc0 <_kill_r+0x1c>
 8006cba:	682b      	ldr	r3, [r5, #0]
 8006cbc:	b103      	cbz	r3, 8006cc0 <_kill_r+0x1c>
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200002a0 	.word	0x200002a0

08006cc8 <_getpid_r>:
 8006cc8:	f7fa bdca 	b.w	8001860 <_getpid>

08006ccc <__sread>:
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	460c      	mov	r4, r1
 8006cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd4:	f000 f894 	bl	8006e00 <_read_r>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	bfab      	itete	ge
 8006cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cde:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce0:	181b      	addge	r3, r3, r0
 8006ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ce6:	bfac      	ite	ge
 8006ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cea:	81a3      	strhlt	r3, [r4, #12]
 8006cec:	bd10      	pop	{r4, pc}

08006cee <__swrite>:
 8006cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf2:	461f      	mov	r7, r3
 8006cf4:	898b      	ldrh	r3, [r1, #12]
 8006cf6:	05db      	lsls	r3, r3, #23
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	d505      	bpl.n	8006d0c <__swrite+0x1e>
 8006d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d04:	2302      	movs	r3, #2
 8006d06:	2200      	movs	r2, #0
 8006d08:	f000 f868 	bl	8006ddc <_lseek_r>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	4632      	mov	r2, r6
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d22:	f000 b817 	b.w	8006d54 <_write_r>

08006d26 <__sseek>:
 8006d26:	b510      	push	{r4, lr}
 8006d28:	460c      	mov	r4, r1
 8006d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2e:	f000 f855 	bl	8006ddc <_lseek_r>
 8006d32:	1c43      	adds	r3, r0, #1
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	bf15      	itete	ne
 8006d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d42:	81a3      	strheq	r3, [r4, #12]
 8006d44:	bf18      	it	ne
 8006d46:	81a3      	strhne	r3, [r4, #12]
 8006d48:	bd10      	pop	{r4, pc}

08006d4a <__sclose>:
 8006d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4e:	f000 b813 	b.w	8006d78 <_close_r>
	...

08006d54 <_write_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d07      	ldr	r5, [pc, #28]	; (8006d74 <_write_r+0x20>)
 8006d58:	4604      	mov	r4, r0
 8006d5a:	4608      	mov	r0, r1
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	2200      	movs	r2, #0
 8006d60:	602a      	str	r2, [r5, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f7fa fdbb 	bl	80018de <_write>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_write_r+0x1e>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_write_r+0x1e>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	200002a0 	.word	0x200002a0

08006d78 <_close_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	; (8006d94 <_close_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fa fdc7 	bl	8001916 <_close>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_close_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_close_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	200002a0 	.word	0x200002a0

08006d98 <_fstat_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d07      	ldr	r5, [pc, #28]	; (8006db8 <_fstat_r+0x20>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	4611      	mov	r1, r2
 8006da4:	602b      	str	r3, [r5, #0]
 8006da6:	f7fa fdc2 	bl	800192e <_fstat>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	d102      	bne.n	8006db4 <_fstat_r+0x1c>
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	b103      	cbz	r3, 8006db4 <_fstat_r+0x1c>
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	bd38      	pop	{r3, r4, r5, pc}
 8006db6:	bf00      	nop
 8006db8:	200002a0 	.word	0x200002a0

08006dbc <_isatty_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d06      	ldr	r5, [pc, #24]	; (8006dd8 <_isatty_r+0x1c>)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7fa fdc1 	bl	800194e <_isatty>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_isatty_r+0x1a>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_isatty_r+0x1a>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	200002a0 	.word	0x200002a0

08006ddc <_lseek_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	; (8006dfc <_lseek_r+0x20>)
 8006de0:	4604      	mov	r4, r0
 8006de2:	4608      	mov	r0, r1
 8006de4:	4611      	mov	r1, r2
 8006de6:	2200      	movs	r2, #0
 8006de8:	602a      	str	r2, [r5, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f7fa fdba 	bl	8001964 <_lseek>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_lseek_r+0x1e>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_lseek_r+0x1e>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	200002a0 	.word	0x200002a0

08006e00 <_read_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d07      	ldr	r5, [pc, #28]	; (8006e20 <_read_r+0x20>)
 8006e04:	4604      	mov	r4, r0
 8006e06:	4608      	mov	r0, r1
 8006e08:	4611      	mov	r1, r2
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	602a      	str	r2, [r5, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f7fa fd48 	bl	80018a4 <_read>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_read_r+0x1e>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_read_r+0x1e>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	200002a0 	.word	0x200002a0

08006e24 <lroundf>:
 8006e24:	ee10 3a10 	vmov	r3, s0
 8006e28:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 8006e32:	bfb4      	ite	lt
 8006e34:	f04f 30ff 	movlt.w	r0, #4294967295
 8006e38:	2001      	movge	r0, #1
 8006e3a:	291e      	cmp	r1, #30
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	dc18      	bgt.n	8006e72 <lroundf+0x4e>
 8006e40:	2900      	cmp	r1, #0
 8006e42:	da03      	bge.n	8006e4c <lroundf+0x28>
 8006e44:	3101      	adds	r1, #1
 8006e46:	bf18      	it	ne
 8006e48:	2000      	movne	r0, #0
 8006e4a:	bd10      	pop	{r4, pc}
 8006e4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e50:	2916      	cmp	r1, #22
 8006e52:	f443 0400 	orr.w	r4, r3, #8388608	; 0x800000
 8006e56:	bfdd      	ittte	le
 8006e58:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 8006e5c:	410b      	asrle	r3, r1
 8006e5e:	191b      	addle	r3, r3, r4
 8006e60:	3a96      	subgt	r2, #150	; 0x96
 8006e62:	bfd6      	itet	le
 8006e64:	f1c1 0117 	rsble	r1, r1, #23
 8006e68:	fa04 f302 	lslgt.w	r3, r4, r2
 8006e6c:	40cb      	lsrle	r3, r1
 8006e6e:	4358      	muls	r0, r3
 8006e70:	e7eb      	b.n	8006e4a <lroundf+0x26>
 8006e72:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006e76:	ee17 0a90 	vmov	r0, s15
 8006e7a:	e7e6      	b.n	8006e4a <lroundf+0x26>

08006e7c <_init>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr

08006e88 <_fini>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr
